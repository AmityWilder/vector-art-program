#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals, unused_imports)]
use std::ffi::c_void;

pub type khronos_float_t  = f32;
pub type khronos_int8_t   = i8;
pub type khronos_uint8_t  = u8;
pub type khronos_int16_t  = i16;
pub type khronos_uint16_t = u16;
pub type khronos_int32_t  = i32;
pub type khronos_uint32_t = u32;
pub type khronos_int64_t  = i64;
pub type khronos_uint64_t = u64;
pub type khronos_intptr_t = *mut i32;
pub type khronos_ssize_t  = isize;

pub type GLenum = u32;
pub type GLboolean = u8;
pub type GLbitfield = u32;
pub type GLvoid = c_void;
pub type GLbyte = khronos_int8_t;
pub type GLubyte = khronos_uint8_t;
pub type GLshort = khronos_int16_t;
pub type GLushort = khronos_uint16_t;
pub type GLint = i32;
pub type GLuint = u32;
pub type GLclampx = khronos_int32_t;
pub type GLsizei = i32;
pub type GLfloat = khronos_float_t;
pub type GLclampf = khronos_float_t;
pub type GLdouble = f64;
pub type GLclampd = f64;
pub type GLeglClientBufferEXT = *mut c_void;
pub type GLeglImageOES = *mut c_void;
pub type GLchar = char;
pub type GLcharARB = char;
#[cfg(any(target_os = "macos", target_os = "ios"))]
pub type GLhandleARB = *mut c_void;
#[cfg(not(any(target_os = "macos", target_os = "ios")))]
pub type GLhandleARB = u32;
pub type GLhalf = khronos_uint16_t;
pub type GLhalfARB = khronos_uint16_t;
pub type GLfixed = khronos_int32_t;
pub type GLintptr = khronos_intptr_t;
pub type GLintptrARB = khronos_intptr_t;
pub type GLsizeiptr = khronos_ssize_t;
pub type GLsizeiptrARB = khronos_ssize_t;
pub type GLint64 = khronos_int64_t;
pub type GLint64EXT = khronos_int64_t;
pub type GLuint64 = khronos_uint64_t;
pub type GLuint64EXT = khronos_uint64_t;
unsafe extern "C" { type __GLsync; }
pub type GLsync = *mut __GLsync;
struct _cl_context;
struct _cl_event;
pub type GLDEBUGPROC = fn(source: GLenum, r#type: GLenum, id: GLuint, severity: GLenum, length: GLsizei, message: *const GLchar, userParam: *const c_void);
pub type GLDEBUGPROCARB = fn(source: GLenum, r#type: GLenum, id: GLuint, severity: GLenum, length: GLsizei, message: *const GLchar, userParam: *const c_void);
pub type GLDEBUGPROCKHR = fn(source: GLenum, r#type: GLenum, id: GLuint, severity: GLenum, length: GLsizei, message: *const GLchar, userParam: *const c_void);
pub type GLDEBUGPROCAMD = fn(id: GLuint, category: GLenum, severity: GLenum, length: GLsizei, message: *const GLchar, userParam: *mut c_void);
pub type GLhalfNV = u16;
pub type GLvdpauSurfaceNV = GLintptr;
pub type GLVULKANPROCNV = fn();

pub const GL_ACTIVE_ATOMIC_COUNTER_BUFFERS: u32 = 0x92D9;
pub const GL_ACTIVE_ATTRIBUTES: u32 = 0x8B89;
pub const GL_ACTIVE_ATTRIBUTE_MAX_LENGTH: u32 = 0x8B8A;
pub const GL_ACTIVE_PROGRAM: u32 = 0x8259;
pub const GL_ACTIVE_RESOURCES: u32 = 0x92F5;
pub const GL_ACTIVE_SUBROUTINES: u32 = 0x8DE5;
pub const GL_ACTIVE_SUBROUTINE_MAX_LENGTH: u32 = 0x8E48;
pub const GL_ACTIVE_SUBROUTINE_UNIFORMS: u32 = 0x8DE6;
pub const GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS: u32 = 0x8E47;
pub const GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH: u32 = 0x8E49;
pub const GL_ACTIVE_TEXTURE: u32 = 0x84E0;
pub const GL_ACTIVE_TEXTURE_ARB: u32 = 0x84E0;
pub const GL_ACTIVE_UNIFORMS: u32 = 0x8B86;
pub const GL_ACTIVE_UNIFORM_BLOCKS: u32 = 0x8A36;
pub const GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH: u32 = 0x8A35;
pub const GL_ACTIVE_UNIFORM_MAX_LENGTH: u32 = 0x8B87;
pub const GL_ACTIVE_VARIABLES: u32 = 0x9305;
pub const GL_ALIASED_LINE_WIDTH_RANGE: u32 = 0x846E;
pub const GL_ALL_BARRIER_BITS: u32 = 0xFFFFFFFF;
pub const GL_ALL_SHADER_BITS: u32 = 0xFFFFFFFF;
pub const GL_ALPHA: u32 = 0x1906;
pub const GL_ALPHA16F_ARB: u32 = 0x881C;
pub const GL_ALPHA32F_ARB: u32 = 0x8816;
pub const GL_ALREADY_SIGNALED: u32 = 0x911A;
pub const GL_ALWAYS: u32 = 0x0207;
pub const GL_AND: u32 = 0x1501;
pub const GL_AND_INVERTED: u32 = 0x1504;
pub const GL_AND_REVERSE: u32 = 0x1502;
pub const GL_ANY_SAMPLES_PASSED: u32 = 0x8C2F;
pub const GL_ANY_SAMPLES_PASSED_CONSERVATIVE: u32 = 0x8D6A;
pub const GL_ARRAY_BUFFER: u32 = 0x8892;
pub const GL_ARRAY_BUFFER_ARB: u32 = 0x8892;
pub const GL_ARRAY_BUFFER_BINDING: u32 = 0x8894;
pub const GL_ARRAY_BUFFER_BINDING_ARB: u32 = 0x8894;
pub const GL_ARRAY_SIZE: u32 = 0x92FB;
pub const GL_ARRAY_STRIDE: u32 = 0x92FE;
pub const GL_ATOMIC_COUNTER_BARRIER_BIT: u32 = 0x00001000;
pub const GL_ATOMIC_COUNTER_BUFFER: u32 = 0x92C0;
pub const GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS: u32 = 0x92C5;
pub const GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES: u32 = 0x92C6;
pub const GL_ATOMIC_COUNTER_BUFFER_BINDING: u32 = 0x92C1;
pub const GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE: u32 = 0x92C4;
pub const GL_ATOMIC_COUNTER_BUFFER_INDEX: u32 = 0x9301;
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER: u32 = 0x90ED;
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER: u32 = 0x92CB;
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER: u32 = 0x92CA;
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER: u32 = 0x92C8;
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER: u32 = 0x92C9;
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER: u32 = 0x92C7;
pub const GL_ATOMIC_COUNTER_BUFFER_SIZE: u32 = 0x92C3;
pub const GL_ATOMIC_COUNTER_BUFFER_START: u32 = 0x92C2;
pub const GL_ATTACHED_SHADERS: u32 = 0x8B85;
pub const GL_AUTO_GENERATE_MIPMAP: u32 = 0x8295;
pub const GL_BACK: u32 = 0x0405;
pub const GL_BACK_LEFT: u32 = 0x0402;
pub const GL_BACK_RIGHT: u32 = 0x0403;
pub const GL_BGR: u32 = 0x80E0;
pub const GL_BGRA: u32 = 0x80E1;
pub const GL_BGRA_INTEGER: u32 = 0x8D9B;
pub const GL_BGR_INTEGER: u32 = 0x8D9A;
pub const GL_BLEND: u32 = 0x0BE2;
pub const GL_BLEND_COLOR: u32 = 0x8005;
pub const GL_BLEND_DST: u32 = 0x0BE0;
pub const GL_BLEND_DST_ALPHA: u32 = 0x80CA;
pub const GL_BLEND_DST_RGB: u32 = 0x80C8;
pub const GL_BLEND_EQUATION: u32 = 0x8009;
pub const GL_BLEND_EQUATION_ALPHA: u32 = 0x883D;
pub const GL_BLEND_EQUATION_RGB: u32 = 0x8009;
pub const GL_BLEND_SRC: u32 = 0x0BE1;
pub const GL_BLEND_SRC_ALPHA: u32 = 0x80CB;
pub const GL_BLEND_SRC_RGB: u32 = 0x80C9;
pub const GL_BLOCK_INDEX: u32 = 0x92FD;
pub const GL_BLUE: u32 = 0x1905;
pub const GL_BLUE_INTEGER: u32 = 0x8D96;
pub const GL_BOOL: u32 = 0x8B56;
pub const GL_BOOL_ARB: u32 = 0x8B56;
pub const GL_BOOL_VEC2: u32 = 0x8B57;
pub const GL_BOOL_VEC2_ARB: u32 = 0x8B57;
pub const GL_BOOL_VEC3: u32 = 0x8B58;
pub const GL_BOOL_VEC3_ARB: u32 = 0x8B58;
pub const GL_BOOL_VEC4: u32 = 0x8B59;
pub const GL_BOOL_VEC4_ARB: u32 = 0x8B59;
pub const GL_BUFFER: u32 = 0x82E0;
pub const GL_BUFFER_ACCESS: u32 = 0x88BB;
pub const GL_BUFFER_ACCESS_ARB: u32 = 0x88BB;
pub const GL_BUFFER_ACCESS_FLAGS: u32 = 0x911F;
pub const GL_BUFFER_BINDING: u32 = 0x9302;
pub const GL_BUFFER_DATA_SIZE: u32 = 0x9303;
pub const GL_BUFFER_IMMUTABLE_STORAGE: u32 = 0x821F;
pub const GL_BUFFER_MAPPED: u32 = 0x88BC;
pub const GL_BUFFER_MAPPED_ARB: u32 = 0x88BC;
pub const GL_BUFFER_MAP_LENGTH: u32 = 0x9120;
pub const GL_BUFFER_MAP_OFFSET: u32 = 0x9121;
pub const GL_BUFFER_MAP_POINTER: u32 = 0x88BD;
pub const GL_BUFFER_MAP_POINTER_ARB: u32 = 0x88BD;
pub const GL_BUFFER_SIZE: u32 = 0x8764;
pub const GL_BUFFER_SIZE_ARB: u32 = 0x8764;
pub const GL_BUFFER_STORAGE_FLAGS: u32 = 0x8220;
pub const GL_BUFFER_UPDATE_BARRIER_BIT: u32 = 0x00000200;
pub const GL_BUFFER_USAGE: u32 = 0x8765;
pub const GL_BUFFER_USAGE_ARB: u32 = 0x8765;
pub const GL_BUFFER_VARIABLE: u32 = 0x92E5;
pub const GL_BYTE: u32 = 0x1400;
pub const GL_CAVEAT_SUPPORT: u32 = 0x82B8;
pub const GL_CCW: u32 = 0x0901;
pub const GL_CLAMP_FRAGMENT_COLOR_ARB: u32 = 0x891B;
pub const GL_CLAMP_READ_COLOR: u32 = 0x891C;
pub const GL_CLAMP_READ_COLOR_ARB: u32 = 0x891C;
pub const GL_CLAMP_TO_BORDER: u32 = 0x812D;
pub const GL_CLAMP_TO_BORDER_ARB: u32 = 0x812D;
pub const GL_CLAMP_TO_EDGE: u32 = 0x812F;
pub const GL_CLAMP_VERTEX_COLOR_ARB: u32 = 0x891A;
pub const GL_CLEAR: u32 = 0x1500;
pub const GL_CLEAR_BUFFER: u32 = 0x82B4;
pub const GL_CLEAR_TEXTURE: u32 = 0x9365;
pub const GL_CLIENT_ACTIVE_TEXTURE_ARB: u32 = 0x84E1;
pub const GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT: u32 = 0x00004000;
pub const GL_CLIENT_STORAGE_BIT: u32 = 0x0200;
pub const GL_CLIPPING_INPUT_PRIMITIVES: u32 = 0x82F6;
pub const GL_CLIPPING_INPUT_PRIMITIVES_ARB: u32 = 0x82F6;
pub const GL_CLIPPING_OUTPUT_PRIMITIVES: u32 = 0x82F7;
pub const GL_CLIPPING_OUTPUT_PRIMITIVES_ARB: u32 = 0x82F7;
pub const GL_CLIP_DISTANCE0: u32 = 0x3000;
pub const GL_CLIP_DISTANCE1: u32 = 0x3001;
pub const GL_CLIP_DISTANCE2: u32 = 0x3002;
pub const GL_CLIP_DISTANCE3: u32 = 0x3003;
pub const GL_CLIP_DISTANCE4: u32 = 0x3004;
pub const GL_CLIP_DISTANCE5: u32 = 0x3005;
pub const GL_CLIP_DISTANCE6: u32 = 0x3006;
pub const GL_CLIP_DISTANCE7: u32 = 0x3007;
pub const GL_COLOR: u32 = 0x1800;
pub const GL_COLOR_ARRAY_BUFFER_BINDING_ARB: u32 = 0x8898;
pub const GL_COLOR_ATTACHMENT0: u32 = 0x8CE0;
pub const GL_COLOR_ATTACHMENT0_EXT: u32 = 0x8CE0;
pub const GL_COLOR_ATTACHMENT1: u32 = 0x8CE1;
pub const GL_COLOR_ATTACHMENT10: u32 = 0x8CEA;
pub const GL_COLOR_ATTACHMENT10_EXT: u32 = 0x8CEA;
pub const GL_COLOR_ATTACHMENT11: u32 = 0x8CEB;
pub const GL_COLOR_ATTACHMENT11_EXT: u32 = 0x8CEB;
pub const GL_COLOR_ATTACHMENT12: u32 = 0x8CEC;
pub const GL_COLOR_ATTACHMENT12_EXT: u32 = 0x8CEC;
pub const GL_COLOR_ATTACHMENT13: u32 = 0x8CED;
pub const GL_COLOR_ATTACHMENT13_EXT: u32 = 0x8CED;
pub const GL_COLOR_ATTACHMENT14: u32 = 0x8CEE;
pub const GL_COLOR_ATTACHMENT14_EXT: u32 = 0x8CEE;
pub const GL_COLOR_ATTACHMENT15: u32 = 0x8CEF;
pub const GL_COLOR_ATTACHMENT15_EXT: u32 = 0x8CEF;
pub const GL_COLOR_ATTACHMENT16: u32 = 0x8CF0;
pub const GL_COLOR_ATTACHMENT17: u32 = 0x8CF1;
pub const GL_COLOR_ATTACHMENT18: u32 = 0x8CF2;
pub const GL_COLOR_ATTACHMENT19: u32 = 0x8CF3;
pub const GL_COLOR_ATTACHMENT1_EXT: u32 = 0x8CE1;
pub const GL_COLOR_ATTACHMENT2: u32 = 0x8CE2;
pub const GL_COLOR_ATTACHMENT20: u32 = 0x8CF4;
pub const GL_COLOR_ATTACHMENT21: u32 = 0x8CF5;
pub const GL_COLOR_ATTACHMENT22: u32 = 0x8CF6;
pub const GL_COLOR_ATTACHMENT23: u32 = 0x8CF7;
pub const GL_COLOR_ATTACHMENT24: u32 = 0x8CF8;
pub const GL_COLOR_ATTACHMENT25: u32 = 0x8CF9;
pub const GL_COLOR_ATTACHMENT26: u32 = 0x8CFA;
pub const GL_COLOR_ATTACHMENT27: u32 = 0x8CFB;
pub const GL_COLOR_ATTACHMENT28: u32 = 0x8CFC;
pub const GL_COLOR_ATTACHMENT29: u32 = 0x8CFD;
pub const GL_COLOR_ATTACHMENT2_EXT: u32 = 0x8CE2;
pub const GL_COLOR_ATTACHMENT3: u32 = 0x8CE3;
pub const GL_COLOR_ATTACHMENT30: u32 = 0x8CFE;
pub const GL_COLOR_ATTACHMENT31: u32 = 0x8CFF;
pub const GL_COLOR_ATTACHMENT3_EXT: u32 = 0x8CE3;
pub const GL_COLOR_ATTACHMENT4: u32 = 0x8CE4;
pub const GL_COLOR_ATTACHMENT4_EXT: u32 = 0x8CE4;
pub const GL_COLOR_ATTACHMENT5: u32 = 0x8CE5;
pub const GL_COLOR_ATTACHMENT5_EXT: u32 = 0x8CE5;
pub const GL_COLOR_ATTACHMENT6: u32 = 0x8CE6;
pub const GL_COLOR_ATTACHMENT6_EXT: u32 = 0x8CE6;
pub const GL_COLOR_ATTACHMENT7: u32 = 0x8CE7;
pub const GL_COLOR_ATTACHMENT7_EXT: u32 = 0x8CE7;
pub const GL_COLOR_ATTACHMENT8: u32 = 0x8CE8;
pub const GL_COLOR_ATTACHMENT8_EXT: u32 = 0x8CE8;
pub const GL_COLOR_ATTACHMENT9: u32 = 0x8CE9;
pub const GL_COLOR_ATTACHMENT9_EXT: u32 = 0x8CE9;
pub const GL_COLOR_BUFFER_BIT: u32 = 0x00004000;
pub const GL_COLOR_CLEAR_VALUE: u32 = 0x0C22;
pub const GL_COLOR_COMPONENTS: u32 = 0x8283;
pub const GL_COLOR_ENCODING: u32 = 0x8296;
pub const GL_COLOR_LOGIC_OP: u32 = 0x0BF2;
pub const GL_COLOR_RENDERABLE: u32 = 0x8286;
pub const GL_COLOR_SUM_ARB: u32 = 0x8458;
pub const GL_COLOR_WRITEMASK: u32 = 0x0C23;
pub const GL_COMMAND_BARRIER_BIT: u32 = 0x00000040;
pub const GL_COMPARE_REF_TO_TEXTURE: u32 = 0x884E;
pub const GL_COMPATIBLE_SUBROUTINES: u32 = 0x8E4B;
pub const GL_COMPILE_STATUS: u32 = 0x8B81;
pub const GL_COMPRESSED_ALPHA_ARB: u32 = 0x84E9;
pub const GL_COMPRESSED_INTENSITY_ARB: u32 = 0x84EC;
pub const GL_COMPRESSED_LUMINANCE_ALPHA_ARB: u32 = 0x84EB;
pub const GL_COMPRESSED_LUMINANCE_ARB: u32 = 0x84EA;
pub const GL_COMPRESSED_R11_EAC: u32 = 0x9270;
pub const GL_COMPRESSED_RED: u32 = 0x8225;
pub const GL_COMPRESSED_RED_RGTC1: u32 = 0x8DBB;
pub const GL_COMPRESSED_RG: u32 = 0x8226;
pub const GL_COMPRESSED_RG11_EAC: u32 = 0x9272;
pub const GL_COMPRESSED_RGB: u32 = 0x84ED;
pub const GL_COMPRESSED_RGB8_ETC2: u32 = 0x9274;
pub const GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2: u32 = 0x9276;
pub const GL_COMPRESSED_RGBA: u32 = 0x84EE;
pub const GL_COMPRESSED_RGBA8_ETC2_EAC: u32 = 0x9278;
pub const GL_COMPRESSED_RGBA_ARB: u32 = 0x84EE;
pub const GL_COMPRESSED_RGBA_ASTC_10x10_KHR: u32 = 0x93BB;
pub const GL_COMPRESSED_RGBA_ASTC_10x5_KHR: u32 = 0x93B8;
pub const GL_COMPRESSED_RGBA_ASTC_10x6_KHR: u32 = 0x93B9;
pub const GL_COMPRESSED_RGBA_ASTC_10x8_KHR: u32 = 0x93BA;
pub const GL_COMPRESSED_RGBA_ASTC_12x10_KHR: u32 = 0x93BC;
pub const GL_COMPRESSED_RGBA_ASTC_12x12_KHR: u32 = 0x93BD;
pub const GL_COMPRESSED_RGBA_ASTC_4x4_KHR: u32 = 0x93B0;
pub const GL_COMPRESSED_RGBA_ASTC_5x4_KHR: u32 = 0x93B1;
pub const GL_COMPRESSED_RGBA_ASTC_5x5_KHR: u32 = 0x93B2;
pub const GL_COMPRESSED_RGBA_ASTC_6x5_KHR: u32 = 0x93B3;
pub const GL_COMPRESSED_RGBA_ASTC_6x6_KHR: u32 = 0x93B4;
pub const GL_COMPRESSED_RGBA_ASTC_8x5_KHR: u32 = 0x93B5;
pub const GL_COMPRESSED_RGBA_ASTC_8x6_KHR: u32 = 0x93B6;
pub const GL_COMPRESSED_RGBA_ASTC_8x8_KHR: u32 = 0x93B7;
pub const GL_COMPRESSED_RGBA_BPTC_UNORM: u32 = 0x8E8C;
pub const GL_COMPRESSED_RGBA_S3TC_DXT1_EXT: u32 = 0x83F1;
pub const GL_COMPRESSED_RGBA_S3TC_DXT3_EXT: u32 = 0x83F2;
pub const GL_COMPRESSED_RGBA_S3TC_DXT5_EXT: u32 = 0x83F3;
pub const GL_COMPRESSED_RGB_ARB: u32 = 0x84ED;
pub const GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT: u32 = 0x8E8E;
pub const GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT: u32 = 0x8E8F;
pub const GL_COMPRESSED_RGB_S3TC_DXT1_EXT: u32 = 0x83F0;
pub const GL_COMPRESSED_RG_RGTC2: u32 = 0x8DBD;
pub const GL_COMPRESSED_SIGNED_R11_EAC: u32 = 0x9271;
pub const GL_COMPRESSED_SIGNED_RED_RGTC1: u32 = 0x8DBC;
pub const GL_COMPRESSED_SIGNED_RG11_EAC: u32 = 0x9273;
pub const GL_COMPRESSED_SIGNED_RG_RGTC2: u32 = 0x8DBE;
pub const GL_COMPRESSED_SRGB: u32 = 0x8C48;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR: u32 = 0x93DB;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR: u32 = 0x93D8;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR: u32 = 0x93D9;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR: u32 = 0x93DA;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR: u32 = 0x93DC;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR: u32 = 0x93DD;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR: u32 = 0x93D0;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR: u32 = 0x93D1;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR: u32 = 0x93D2;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR: u32 = 0x93D3;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR: u32 = 0x93D4;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR: u32 = 0x93D5;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR: u32 = 0x93D6;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR: u32 = 0x93D7;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC: u32 = 0x9279;
pub const GL_COMPRESSED_SRGB8_ETC2: u32 = 0x9275;
pub const GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2: u32 = 0x9277;
pub const GL_COMPRESSED_SRGB_ALPHA: u32 = 0x8C49;
pub const GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM: u32 = 0x8E8D;
pub const GL_COMPRESSED_TEXTURE_FORMATS: u32 = 0x86A3;
pub const GL_COMPRESSED_TEXTURE_FORMATS_ARB: u32 = 0x86A3;
pub const GL_COMPUTE_SHADER: u32 = 0x91B9;
pub const GL_COMPUTE_SHADER_BIT: u32 = 0x00000020;
pub const GL_COMPUTE_SHADER_INVOCATIONS: u32 = 0x82F5;
pub const GL_COMPUTE_SHADER_INVOCATIONS_ARB: u32 = 0x82F5;
pub const GL_COMPUTE_SUBROUTINE: u32 = 0x92ED;
pub const GL_COMPUTE_SUBROUTINE_UNIFORM: u32 = 0x92F3;
pub const GL_COMPUTE_TEXTURE: u32 = 0x82A0;
pub const GL_COMPUTE_WORK_GROUP_SIZE: u32 = 0x8267;
pub const GL_CONDITION_SATISFIED: u32 = 0x911C;
pub const GL_CONSTANT_ALPHA: u32 = 0x8003;
pub const GL_CONSTANT_COLOR: u32 = 0x8001;
pub const GL_CONTEXT_COMPATIBILITY_PROFILE_BIT: u32 = 0x00000002;
pub const GL_CONTEXT_CORE_PROFILE_BIT: u32 = 0x00000001;
pub const GL_CONTEXT_FLAGS: u32 = 0x821E;
pub const GL_CONTEXT_FLAG_DEBUG_BIT: u32 = 0x00000002;
pub const GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT: u32 = 0x00000001;
pub const GL_CONTEXT_PROFILE_MASK: u32 = 0x9126;
pub const GL_COPY: u32 = 0x1503;
pub const GL_COPY_INVERTED: u32 = 0x150C;
pub const GL_COPY_READ_BUFFER: u32 = 0x8F36;
pub const GL_COPY_READ_BUFFER_BINDING: u32 = 0x8F36;
pub const GL_COPY_WRITE_BUFFER: u32 = 0x8F37;
pub const GL_COPY_WRITE_BUFFER_BINDING: u32 = 0x8F37;
pub const GL_CULL_FACE: u32 = 0x0B44;
pub const GL_CULL_FACE_MODE: u32 = 0x0B45;
pub const GL_CURRENT_FOG_COORDINATE_EXT: u32 = 0x8453;
pub const GL_CURRENT_MATRIX_ARB: u32 = 0x8641;
pub const GL_CURRENT_MATRIX_STACK_DEPTH_ARB: u32 = 0x8640;
pub const GL_CURRENT_PROGRAM: u32 = 0x8B8D;
pub const GL_CURRENT_QUERY: u32 = 0x8865;
pub const GL_CURRENT_QUERY_ARB: u32 = 0x8865;
pub const GL_CURRENT_VERTEX_ATTRIB: u32 = 0x8626;
pub const GL_CURRENT_VERTEX_ATTRIB_ARB: u32 = 0x8626;
pub const GL_CW: u32 = 0x0900;
pub const GL_DEBUG_CALLBACK_FUNCTION: u32 = 0x8244;
pub const GL_DEBUG_CALLBACK_FUNCTION_ARB: u32 = 0x8244;
pub const GL_DEBUG_CALLBACK_USER_PARAM: u32 = 0x8245;
pub const GL_DEBUG_CALLBACK_USER_PARAM_ARB: u32 = 0x8245;
pub const GL_DEBUG_GROUP_STACK_DEPTH: u32 = 0x826D;
pub const GL_DEBUG_LOGGED_MESSAGES: u32 = 0x9145;
pub const GL_DEBUG_LOGGED_MESSAGES_ARB: u32 = 0x9145;
pub const GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH: u32 = 0x8243;
pub const GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB: u32 = 0x8243;
pub const GL_DEBUG_OUTPUT: u32 = 0x92E0;
pub const GL_DEBUG_OUTPUT_SYNCHRONOUS: u32 = 0x8242;
pub const GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB: u32 = 0x8242;
pub const GL_DEBUG_SEVERITY_HIGH: u32 = 0x9146;
pub const GL_DEBUG_SEVERITY_HIGH_ARB: u32 = 0x9146;
pub const GL_DEBUG_SEVERITY_LOW: u32 = 0x9148;
pub const GL_DEBUG_SEVERITY_LOW_ARB: u32 = 0x9148;
pub const GL_DEBUG_SEVERITY_MEDIUM: u32 = 0x9147;
pub const GL_DEBUG_SEVERITY_MEDIUM_ARB: u32 = 0x9147;
pub const GL_DEBUG_SEVERITY_NOTIFICATION: u32 = 0x826B;
pub const GL_DEBUG_SOURCE_API: u32 = 0x8246;
pub const GL_DEBUG_SOURCE_API_ARB: u32 = 0x8246;
pub const GL_DEBUG_SOURCE_APPLICATION: u32 = 0x824A;
pub const GL_DEBUG_SOURCE_APPLICATION_ARB: u32 = 0x824A;
pub const GL_DEBUG_SOURCE_OTHER: u32 = 0x824B;
pub const GL_DEBUG_SOURCE_OTHER_ARB: u32 = 0x824B;
pub const GL_DEBUG_SOURCE_SHADER_COMPILER: u32 = 0x8248;
pub const GL_DEBUG_SOURCE_SHADER_COMPILER_ARB: u32 = 0x8248;
pub const GL_DEBUG_SOURCE_THIRD_PARTY: u32 = 0x8249;
pub const GL_DEBUG_SOURCE_THIRD_PARTY_ARB: u32 = 0x8249;
pub const GL_DEBUG_SOURCE_WINDOW_SYSTEM: u32 = 0x8247;
pub const GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB: u32 = 0x8247;
pub const GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR: u32 = 0x824D;
pub const GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB: u32 = 0x824D;
pub const GL_DEBUG_TYPE_ERROR: u32 = 0x824C;
pub const GL_DEBUG_TYPE_ERROR_ARB: u32 = 0x824C;
pub const GL_DEBUG_TYPE_MARKER: u32 = 0x8268;
pub const GL_DEBUG_TYPE_OTHER: u32 = 0x8251;
pub const GL_DEBUG_TYPE_OTHER_ARB: u32 = 0x8251;
pub const GL_DEBUG_TYPE_PERFORMANCE: u32 = 0x8250;
pub const GL_DEBUG_TYPE_PERFORMANCE_ARB: u32 = 0x8250;
pub const GL_DEBUG_TYPE_POP_GROUP: u32 = 0x826A;
pub const GL_DEBUG_TYPE_PORTABILITY: u32 = 0x824F;
pub const GL_DEBUG_TYPE_PORTABILITY_ARB: u32 = 0x824F;
pub const GL_DEBUG_TYPE_PUSH_GROUP: u32 = 0x8269;
pub const GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR: u32 = 0x824E;
pub const GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB: u32 = 0x824E;
pub const GL_DECR: u32 = 0x1E03;
pub const GL_DECR_WRAP: u32 = 0x8508;
pub const GL_DELETE_STATUS: u32 = 0x8B80;
pub const GL_DEPTH: u32 = 0x1801;
pub const GL_DEPTH24_STENCIL8: u32 = 0x88F0;
pub const GL_DEPTH32F_STENCIL8: u32 = 0x8CAD;
pub const GL_DEPTH_ATTACHMENT: u32 = 0x8D00;
pub const GL_DEPTH_ATTACHMENT_EXT: u32 = 0x8D00;
pub const GL_DEPTH_BUFFER_BIT: u32 = 0x00000100;
pub const GL_DEPTH_CLAMP: u32 = 0x864F;
pub const GL_DEPTH_CLEAR_VALUE: u32 = 0x0B73;
pub const GL_DEPTH_COMPONENT: u32 = 0x1902;
pub const GL_DEPTH_COMPONENT16: u32 = 0x81A5;
pub const GL_DEPTH_COMPONENT16_ARB: u32 = 0x81A5;
pub const GL_DEPTH_COMPONENT24: u32 = 0x81A6;
pub const GL_DEPTH_COMPONENT24_ARB: u32 = 0x81A6;
pub const GL_DEPTH_COMPONENT32: u32 = 0x81A7;
pub const GL_DEPTH_COMPONENT32F: u32 = 0x8CAC;
pub const GL_DEPTH_COMPONENT32_ARB: u32 = 0x81A7;
pub const GL_DEPTH_COMPONENTS: u32 = 0x8284;
pub const GL_DEPTH_FUNC: u32 = 0x0B74;
pub const GL_DEPTH_RANGE: u32 = 0x0B70;
pub const GL_DEPTH_RENDERABLE: u32 = 0x8287;
pub const GL_DEPTH_STENCIL: u32 = 0x84F9;
pub const GL_DEPTH_STENCIL_ATTACHMENT: u32 = 0x821A;
pub const GL_DEPTH_STENCIL_TEXTURE_MODE: u32 = 0x90EA;
pub const GL_DEPTH_TEST: u32 = 0x0B71;
pub const GL_DEPTH_TEXTURE_MODE_ARB: u32 = 0x884B;
pub const GL_DEPTH_WRITEMASK: u32 = 0x0B72;
pub const GL_DISPATCH_INDIRECT_BUFFER: u32 = 0x90EE;
pub const GL_DISPATCH_INDIRECT_BUFFER_BINDING: u32 = 0x90EF;
pub const GL_DITHER: u32 = 0x0BD0;
pub const GL_DONT_CARE: u32 = 0x1100;
pub const GL_DOUBLE: u32 = 0x140A;
pub const GL_DOUBLEBUFFER: u32 = 0x0C32;
pub const GL_DOUBLE_MAT2: u32 = 0x8F46;
pub const GL_DOUBLE_MAT2x3: u32 = 0x8F49;
pub const GL_DOUBLE_MAT2x4: u32 = 0x8F4A;
pub const GL_DOUBLE_MAT3: u32 = 0x8F47;
pub const GL_DOUBLE_MAT3x2: u32 = 0x8F4B;
pub const GL_DOUBLE_MAT3x4: u32 = 0x8F4C;
pub const GL_DOUBLE_MAT4: u32 = 0x8F48;
pub const GL_DOUBLE_MAT4x2: u32 = 0x8F4D;
pub const GL_DOUBLE_MAT4x3: u32 = 0x8F4E;
pub const GL_DOUBLE_VEC2: u32 = 0x8FFC;
pub const GL_DOUBLE_VEC3: u32 = 0x8FFD;
pub const GL_DOUBLE_VEC4: u32 = 0x8FFE;
pub const GL_DRAW_BUFFER: u32 = 0x0C01;
pub const GL_DRAW_BUFFER0: u32 = 0x8825;
pub const GL_DRAW_BUFFER0_ARB: u32 = 0x8825;
pub const GL_DRAW_BUFFER1: u32 = 0x8826;
pub const GL_DRAW_BUFFER10: u32 = 0x882F;
pub const GL_DRAW_BUFFER10_ARB: u32 = 0x882F;
pub const GL_DRAW_BUFFER11: u32 = 0x8830;
pub const GL_DRAW_BUFFER11_ARB: u32 = 0x8830;
pub const GL_DRAW_BUFFER12: u32 = 0x8831;
pub const GL_DRAW_BUFFER12_ARB: u32 = 0x8831;
pub const GL_DRAW_BUFFER13: u32 = 0x8832;
pub const GL_DRAW_BUFFER13_ARB: u32 = 0x8832;
pub const GL_DRAW_BUFFER14: u32 = 0x8833;
pub const GL_DRAW_BUFFER14_ARB: u32 = 0x8833;
pub const GL_DRAW_BUFFER15: u32 = 0x8834;
pub const GL_DRAW_BUFFER15_ARB: u32 = 0x8834;
pub const GL_DRAW_BUFFER1_ARB: u32 = 0x8826;
pub const GL_DRAW_BUFFER2: u32 = 0x8827;
pub const GL_DRAW_BUFFER2_ARB: u32 = 0x8827;
pub const GL_DRAW_BUFFER3: u32 = 0x8828;
pub const GL_DRAW_BUFFER3_ARB: u32 = 0x8828;
pub const GL_DRAW_BUFFER4: u32 = 0x8829;
pub const GL_DRAW_BUFFER4_ARB: u32 = 0x8829;
pub const GL_DRAW_BUFFER5: u32 = 0x882A;
pub const GL_DRAW_BUFFER5_ARB: u32 = 0x882A;
pub const GL_DRAW_BUFFER6: u32 = 0x882B;
pub const GL_DRAW_BUFFER6_ARB: u32 = 0x882B;
pub const GL_DRAW_BUFFER7: u32 = 0x882C;
pub const GL_DRAW_BUFFER7_ARB: u32 = 0x882C;
pub const GL_DRAW_BUFFER8: u32 = 0x882D;
pub const GL_DRAW_BUFFER8_ARB: u32 = 0x882D;
pub const GL_DRAW_BUFFER9: u32 = 0x882E;
pub const GL_DRAW_BUFFER9_ARB: u32 = 0x882E;
pub const GL_DRAW_FRAMEBUFFER: u32 = 0x8CA9;
pub const GL_DRAW_FRAMEBUFFER_BINDING: u32 = 0x8CA6;
pub const GL_DRAW_FRAMEBUFFER_BINDING_EXT: u32 = 0x8CA6;
pub const GL_DRAW_FRAMEBUFFER_EXT: u32 = 0x8CA9;
pub const GL_DRAW_INDIRECT_BUFFER: u32 = 0x8F3F;
pub const GL_DRAW_INDIRECT_BUFFER_BINDING: u32 = 0x8F43;
pub const GL_DST_ALPHA: u32 = 0x0304;
pub const GL_DST_COLOR: u32 = 0x0306;
pub const GL_DYNAMIC_COPY: u32 = 0x88EA;
pub const GL_DYNAMIC_COPY_ARB: u32 = 0x88EA;
pub const GL_DYNAMIC_DRAW: u32 = 0x88E8;
pub const GL_DYNAMIC_DRAW_ARB: u32 = 0x88E8;
pub const GL_DYNAMIC_READ: u32 = 0x88E9;
pub const GL_DYNAMIC_READ_ARB: u32 = 0x88E9;
pub const GL_DYNAMIC_STORAGE_BIT: u32 = 0x0100;
pub const GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB: u32 = 0x889B;
pub const GL_ELEMENT_ARRAY_BARRIER_BIT: u32 = 0x00000002;
pub const GL_ELEMENT_ARRAY_BUFFER: u32 = 0x8893;
pub const GL_ELEMENT_ARRAY_BUFFER_ARB: u32 = 0x8893;
pub const GL_ELEMENT_ARRAY_BUFFER_BINDING: u32 = 0x8895;
pub const GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB: u32 = 0x8895;
pub const GL_EQUAL: u32 = 0x0202;
pub const GL_EQUIV: u32 = 0x1509;
pub const GL_EXTENSIONS: u32 = 0x1F03;
pub const GL_FALSE: u32 = 0;
pub const GL_FASTEST: u32 = 0x1101;
pub const GL_FILL: u32 = 0x1B02;
pub const GL_FILTER: u32 = 0x829A;
pub const GL_FIRST_VERTEX_CONVENTION: u32 = 0x8E4D;
pub const GL_FIXED: u32 = 0x140C;
pub const GL_FIXED_OES: u32 = 0x140C;
pub const GL_FIXED_ONLY: u32 = 0x891D;
pub const GL_FIXED_ONLY_ARB: u32 = 0x891D;
pub const GL_FLOAT: u32 = 0x1406;
pub const GL_FLOAT_32_UNSIGNED_INT_24_8_REV: u32 = 0x8DAD;
pub const GL_FLOAT_MAT2: u32 = 0x8B5A;
pub const GL_FLOAT_MAT2_ARB: u32 = 0x8B5A;
pub const GL_FLOAT_MAT2x3: u32 = 0x8B65;
pub const GL_FLOAT_MAT2x4: u32 = 0x8B66;
pub const GL_FLOAT_MAT3: u32 = 0x8B5B;
pub const GL_FLOAT_MAT3_ARB: u32 = 0x8B5B;
pub const GL_FLOAT_MAT3x2: u32 = 0x8B67;
pub const GL_FLOAT_MAT3x4: u32 = 0x8B68;
pub const GL_FLOAT_MAT4: u32 = 0x8B5C;
pub const GL_FLOAT_MAT4_ARB: u32 = 0x8B5C;
pub const GL_FLOAT_MAT4x2: u32 = 0x8B69;
pub const GL_FLOAT_MAT4x3: u32 = 0x8B6A;
pub const GL_FLOAT_VEC2: u32 = 0x8B50;
pub const GL_FLOAT_VEC2_ARB: u32 = 0x8B50;
pub const GL_FLOAT_VEC3: u32 = 0x8B51;
pub const GL_FLOAT_VEC3_ARB: u32 = 0x8B51;
pub const GL_FLOAT_VEC4: u32 = 0x8B52;
pub const GL_FLOAT_VEC4_ARB: u32 = 0x8B52;
pub const GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB: u32 = 0x889D;
pub const GL_FOG_COORDINATE_ARRAY_EXT: u32 = 0x8457;
pub const GL_FOG_COORDINATE_ARRAY_POINTER_EXT: u32 = 0x8456;
pub const GL_FOG_COORDINATE_ARRAY_STRIDE_EXT: u32 = 0x8455;
pub const GL_FOG_COORDINATE_ARRAY_TYPE_EXT: u32 = 0x8454;
pub const GL_FOG_COORDINATE_EXT: u32 = 0x8451;
pub const GL_FOG_COORDINATE_SOURCE_EXT: u32 = 0x8450;
pub const GL_FRACTIONAL_EVEN: u32 = 0x8E7C;
pub const GL_FRACTIONAL_ODD: u32 = 0x8E7B;
pub const GL_FRAGMENT_DEPTH_EXT: u32 = 0x8452;
pub const GL_FRAGMENT_INTERPOLATION_OFFSET_BITS: u32 = 0x8E5D;
pub const GL_FRAGMENT_PROGRAM_ARB: u32 = 0x8804;
pub const GL_FRAGMENT_SHADER: u32 = 0x8B30;
pub const GL_FRAGMENT_SHADER_ARB: u32 = 0x8B30;
pub const GL_FRAGMENT_SHADER_BIT: u32 = 0x00000002;
pub const GL_FRAGMENT_SHADER_DERIVATIVE_HINT: u32 = 0x8B8B;
pub const GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB: u32 = 0x8B8B;
pub const GL_FRAGMENT_SHADER_INVOCATIONS: u32 = 0x82F4;
pub const GL_FRAGMENT_SHADER_INVOCATIONS_ARB: u32 = 0x82F4;
pub const GL_FRAGMENT_SUBROUTINE: u32 = 0x92EC;
pub const GL_FRAGMENT_SUBROUTINE_UNIFORM: u32 = 0x92F2;
pub const GL_FRAGMENT_TEXTURE: u32 = 0x829F;
pub const GL_FRAMEBUFFER: u32 = 0x8D40;
pub const GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: u32 = 0x8215;
pub const GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: u32 = 0x8214;
pub const GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING: u32 = 0x8210;
pub const GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: u32 = 0x8211;
pub const GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: u32 = 0x8216;
pub const GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: u32 = 0x8213;
pub const GL_FRAMEBUFFER_ATTACHMENT_LAYERED: u32 = 0x8DA7;
pub const GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB: u32 = 0x8DA7;
pub const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: u32 = 0x8CD1;
pub const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT: u32 = 0x8CD1;
pub const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: u32 = 0x8CD0;
pub const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT: u32 = 0x8CD0;
pub const GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE: u32 = 0x8212;
pub const GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: u32 = 0x8217;
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT: u32 = 0x8CD4;
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: u32 = 0x8CD3;
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT: u32 = 0x8CD3;
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: u32 = 0x8CD4;
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: u32 = 0x8CD2;
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT: u32 = 0x8CD2;
pub const GL_FRAMEBUFFER_BARRIER_BIT: u32 = 0x00000400;
pub const GL_FRAMEBUFFER_BINDING: u32 = 0x8CA6;
pub const GL_FRAMEBUFFER_BINDING_EXT: u32 = 0x8CA6;
pub const GL_FRAMEBUFFER_BLEND: u32 = 0x828B;
pub const GL_FRAMEBUFFER_COMPLETE: u32 = 0x8CD5;
pub const GL_FRAMEBUFFER_COMPLETE_EXT: u32 = 0x8CD5;
pub const GL_FRAMEBUFFER_DEFAULT: u32 = 0x8218;
pub const GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS: u32 = 0x9314;
pub const GL_FRAMEBUFFER_DEFAULT_HEIGHT: u32 = 0x9311;
pub const GL_FRAMEBUFFER_DEFAULT_LAYERS: u32 = 0x9312;
pub const GL_FRAMEBUFFER_DEFAULT_SAMPLES: u32 = 0x9313;
pub const GL_FRAMEBUFFER_DEFAULT_WIDTH: u32 = 0x9310;
pub const GL_FRAMEBUFFER_EXT: u32 = 0x8D40;
pub const GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT: u32 = 0x8CD6;
pub const GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT: u32 = 0x8CD6;
pub const GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT: u32 = 0x8CD9;
pub const GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER: u32 = 0x8CDB;
pub const GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT: u32 = 0x8CDB;
pub const GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT: u32 = 0x8CDA;
pub const GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB: u32 = 0x8DA9;
pub const GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS: u32 = 0x8DA8;
pub const GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB: u32 = 0x8DA8;
pub const GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: u32 = 0x8CD7;
pub const GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT: u32 = 0x8CD7;
pub const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE: u32 = 0x8D56;
pub const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT: u32 = 0x8D56;
pub const GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER: u32 = 0x8CDC;
pub const GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT: u32 = 0x8CDC;
pub const GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_ARB: u32 = 0x9342;
pub const GL_FRAMEBUFFER_RENDERABLE: u32 = 0x8289;
pub const GL_FRAMEBUFFER_RENDERABLE_LAYERED: u32 = 0x828A;
pub const GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_ARB: u32 = 0x9343;
pub const GL_FRAMEBUFFER_SRGB: u32 = 0x8DB9;
pub const GL_FRAMEBUFFER_SRGB_CAPABLE_EXT: u32 = 0x8DBA;
pub const GL_FRAMEBUFFER_SRGB_EXT: u32 = 0x8DB9;
pub const GL_FRAMEBUFFER_UNDEFINED: u32 = 0x8219;
pub const GL_FRAMEBUFFER_UNSUPPORTED: u32 = 0x8CDD;
pub const GL_FRAMEBUFFER_UNSUPPORTED_EXT: u32 = 0x8CDD;
pub const GL_FRONT: u32 = 0x0404;
pub const GL_FRONT_AND_BACK: u32 = 0x0408;
pub const GL_FRONT_FACE: u32 = 0x0B46;
pub const GL_FRONT_LEFT: u32 = 0x0400;
pub const GL_FRONT_RIGHT: u32 = 0x0401;
pub const GL_FULL_SUPPORT: u32 = 0x82B7;
pub const GL_FUNC_ADD: u32 = 0x8006;
pub const GL_FUNC_REVERSE_SUBTRACT: u32 = 0x800B;
pub const GL_FUNC_SUBTRACT: u32 = 0x800A;
pub const GL_GEOMETRY_INPUT_TYPE: u32 = 0x8917;
pub const GL_GEOMETRY_INPUT_TYPE_ARB: u32 = 0x8DDB;
pub const GL_GEOMETRY_OUTPUT_TYPE: u32 = 0x8918;
pub const GL_GEOMETRY_OUTPUT_TYPE_ARB: u32 = 0x8DDC;
pub const GL_GEOMETRY_SHADER: u32 = 0x8DD9;
pub const GL_GEOMETRY_SHADER_ARB: u32 = 0x8DD9;
pub const GL_GEOMETRY_SHADER_BIT: u32 = 0x00000004;
pub const GL_GEOMETRY_SHADER_INVOCATIONS: u32 = 0x887F;
pub const GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED: u32 = 0x82F3;
pub const GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED_ARB: u32 = 0x82F3;
pub const GL_GEOMETRY_SUBROUTINE: u32 = 0x92EB;
pub const GL_GEOMETRY_SUBROUTINE_UNIFORM: u32 = 0x92F1;
pub const GL_GEOMETRY_TEXTURE: u32 = 0x829E;
pub const GL_GEOMETRY_VERTICES_OUT: u32 = 0x8916;
pub const GL_GEOMETRY_VERTICES_OUT_ARB: u32 = 0x8DDA;
pub const GL_GEQUAL: u32 = 0x0206;
pub const GL_GET_TEXTURE_IMAGE_FORMAT: u32 = 0x8291;
pub const GL_GET_TEXTURE_IMAGE_TYPE: u32 = 0x8292;
pub const GL_GREATER: u32 = 0x0204;
pub const GL_GREEN: u32 = 0x1904;
pub const GL_GREEN_INTEGER: u32 = 0x8D95;
pub const GL_HALF_FLOAT: u32 = 0x140B;
pub const GL_HALF_FLOAT_ARB: u32 = 0x140B;
pub const GL_HIGH_FLOAT: u32 = 0x8DF2;
pub const GL_HIGH_INT: u32 = 0x8DF5;
pub const GL_IMAGE_1D: u32 = 0x904C;
pub const GL_IMAGE_1D_ARRAY: u32 = 0x9052;
pub const GL_IMAGE_2D: u32 = 0x904D;
pub const GL_IMAGE_2D_ARRAY: u32 = 0x9053;
pub const GL_IMAGE_2D_MULTISAMPLE: u32 = 0x9055;
pub const GL_IMAGE_2D_MULTISAMPLE_ARRAY: u32 = 0x9056;
pub const GL_IMAGE_2D_RECT: u32 = 0x904F;
pub const GL_IMAGE_3D: u32 = 0x904E;
pub const GL_IMAGE_BINDING_ACCESS: u32 = 0x8F3E;
pub const GL_IMAGE_BINDING_FORMAT: u32 = 0x906E;
pub const GL_IMAGE_BINDING_LAYER: u32 = 0x8F3D;
pub const GL_IMAGE_BINDING_LAYERED: u32 = 0x8F3C;
pub const GL_IMAGE_BINDING_LEVEL: u32 = 0x8F3B;
pub const GL_IMAGE_BINDING_NAME: u32 = 0x8F3A;
pub const GL_IMAGE_BUFFER: u32 = 0x9051;
pub const GL_IMAGE_CLASS_10_10_10_2: u32 = 0x82C3;
pub const GL_IMAGE_CLASS_11_11_10: u32 = 0x82C2;
pub const GL_IMAGE_CLASS_1_X_16: u32 = 0x82BE;
pub const GL_IMAGE_CLASS_1_X_32: u32 = 0x82BB;
pub const GL_IMAGE_CLASS_1_X_8: u32 = 0x82C1;
pub const GL_IMAGE_CLASS_2_X_16: u32 = 0x82BD;
pub const GL_IMAGE_CLASS_2_X_32: u32 = 0x82BA;
pub const GL_IMAGE_CLASS_2_X_8: u32 = 0x82C0;
pub const GL_IMAGE_CLASS_4_X_16: u32 = 0x82BC;
pub const GL_IMAGE_CLASS_4_X_32: u32 = 0x82B9;
pub const GL_IMAGE_CLASS_4_X_8: u32 = 0x82BF;
pub const GL_IMAGE_COMPATIBILITY_CLASS: u32 = 0x82A8;
pub const GL_IMAGE_CUBE: u32 = 0x9050;
pub const GL_IMAGE_CUBE_MAP_ARRAY: u32 = 0x9054;
pub const GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS: u32 = 0x90C9;
pub const GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE: u32 = 0x90C8;
pub const GL_IMAGE_FORMAT_COMPATIBILITY_TYPE: u32 = 0x90C7;
pub const GL_IMAGE_PIXEL_FORMAT: u32 = 0x82A9;
pub const GL_IMAGE_PIXEL_TYPE: u32 = 0x82AA;
pub const GL_IMAGE_TEXEL_SIZE: u32 = 0x82A7;
pub const GL_IMPLEMENTATION_COLOR_READ_FORMAT: u32 = 0x8B9B;
pub const GL_IMPLEMENTATION_COLOR_READ_TYPE: u32 = 0x8B9A;
pub const GL_INCR: u32 = 0x1E02;
pub const GL_INCR_WRAP: u32 = 0x8507;
pub const GL_INDEX_ARRAY_BUFFER_BINDING_ARB: u32 = 0x8899;
pub const GL_INFO_LOG_LENGTH: u32 = 0x8B84;
pub const GL_INT: u32 = 0x1404;
pub const GL_INT64_ARB: u32 = 0x140E;
pub const GL_INT64_VEC2_ARB: u32 = 0x8FE9;
pub const GL_INT64_VEC3_ARB: u32 = 0x8FEA;
pub const GL_INT64_VEC4_ARB: u32 = 0x8FEB;
pub const GL_INTENSITY16F_ARB: u32 = 0x881D;
pub const GL_INTENSITY32F_ARB: u32 = 0x8817;
pub const GL_INTERLEAVED_ATTRIBS: u32 = 0x8C8C;
pub const GL_INTERNALFORMAT_ALPHA_SIZE: u32 = 0x8274;
pub const GL_INTERNALFORMAT_ALPHA_TYPE: u32 = 0x827B;
pub const GL_INTERNALFORMAT_BLUE_SIZE: u32 = 0x8273;
pub const GL_INTERNALFORMAT_BLUE_TYPE: u32 = 0x827A;
pub const GL_INTERNALFORMAT_DEPTH_SIZE: u32 = 0x8275;
pub const GL_INTERNALFORMAT_DEPTH_TYPE: u32 = 0x827C;
pub const GL_INTERNALFORMAT_GREEN_SIZE: u32 = 0x8272;
pub const GL_INTERNALFORMAT_GREEN_TYPE: u32 = 0x8279;
pub const GL_INTERNALFORMAT_PREFERRED: u32 = 0x8270;
pub const GL_INTERNALFORMAT_RED_SIZE: u32 = 0x8271;
pub const GL_INTERNALFORMAT_RED_TYPE: u32 = 0x8278;
pub const GL_INTERNALFORMAT_SHARED_SIZE: u32 = 0x8277;
pub const GL_INTERNALFORMAT_STENCIL_SIZE: u32 = 0x8276;
pub const GL_INTERNALFORMAT_STENCIL_TYPE: u32 = 0x827D;
pub const GL_INTERNALFORMAT_SUPPORTED: u32 = 0x826F;
pub const GL_INT_2_10_10_10_REV: u32 = 0x8D9F;
pub const GL_INT_IMAGE_1D: u32 = 0x9057;
pub const GL_INT_IMAGE_1D_ARRAY: u32 = 0x905D;
pub const GL_INT_IMAGE_2D: u32 = 0x9058;
pub const GL_INT_IMAGE_2D_ARRAY: u32 = 0x905E;
pub const GL_INT_IMAGE_2D_MULTISAMPLE: u32 = 0x9060;
pub const GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY: u32 = 0x9061;
pub const GL_INT_IMAGE_2D_RECT: u32 = 0x905A;
pub const GL_INT_IMAGE_3D: u32 = 0x9059;
pub const GL_INT_IMAGE_BUFFER: u32 = 0x905C;
pub const GL_INT_IMAGE_CUBE: u32 = 0x905B;
pub const GL_INT_IMAGE_CUBE_MAP_ARRAY: u32 = 0x905F;
pub const GL_INT_SAMPLER_1D: u32 = 0x8DC9;
pub const GL_INT_SAMPLER_1D_ARRAY: u32 = 0x8DCE;
pub const GL_INT_SAMPLER_2D: u32 = 0x8DCA;
pub const GL_INT_SAMPLER_2D_ARRAY: u32 = 0x8DCF;
pub const GL_INT_SAMPLER_2D_MULTISAMPLE: u32 = 0x9109;
pub const GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY: u32 = 0x910C;
pub const GL_INT_SAMPLER_2D_RECT: u32 = 0x8DCD;
pub const GL_INT_SAMPLER_3D: u32 = 0x8DCB;
pub const GL_INT_SAMPLER_BUFFER: u32 = 0x8DD0;
pub const GL_INT_SAMPLER_CUBE: u32 = 0x8DCC;
pub const GL_INT_SAMPLER_CUBE_MAP_ARRAY: u32 = 0x900E;
pub const GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB: u32 = 0x900E;
pub const GL_INT_VEC2: u32 = 0x8B53;
pub const GL_INT_VEC2_ARB: u32 = 0x8B53;
pub const GL_INT_VEC3: u32 = 0x8B54;
pub const GL_INT_VEC3_ARB: u32 = 0x8B54;
pub const GL_INT_VEC4: u32 = 0x8B55;
pub const GL_INT_VEC4_ARB: u32 = 0x8B55;
pub const GL_INVALID_ENUM: u32 = 0x0500;
pub const GL_INVALID_FRAMEBUFFER_OPERATION: u32 = 0x0506;
pub const GL_INVALID_FRAMEBUFFER_OPERATION_EXT: u32 = 0x0506;
pub const GL_INVALID_INDEX: u32 = 0xFFFFFFFF;
pub const GL_INVALID_OPERATION: u32 = 0x0502;
pub const GL_INVALID_VALUE: u32 = 0x0501;
pub const GL_INVERT: u32 = 0x150A;
pub const GL_ISOLINES: u32 = 0x8E7A;
pub const GL_IS_PER_PATCH: u32 = 0x92E7;
pub const GL_IS_ROW_MAJOR: u32 = 0x9300;
pub const GL_KEEP: u32 = 0x1E00;
pub const GL_LAST_VERTEX_CONVENTION: u32 = 0x8E4E;
pub const GL_LAYER_PROVOKING_VERTEX: u32 = 0x825E;
pub const GL_LEFT: u32 = 0x0406;
pub const GL_LEQUAL: u32 = 0x0203;
pub const GL_LESS: u32 = 0x0201;
pub const GL_LINE: u32 = 0x1B01;
pub const GL_LINEAR: u32 = 0x2601;
pub const GL_LINEAR_MIPMAP_LINEAR: u32 = 0x2703;
pub const GL_LINEAR_MIPMAP_NEAREST: u32 = 0x2701;
pub const GL_LINES: u32 = 0x0001;
pub const GL_LINES_ADJACENCY: u32 = 0x000A;
pub const GL_LINES_ADJACENCY_ARB: u32 = 0x000A;
pub const GL_LINE_LOOP: u32 = 0x0002;
pub const GL_LINE_SMOOTH: u32 = 0x0B20;
pub const GL_LINE_SMOOTH_HINT: u32 = 0x0C52;
pub const GL_LINE_STRIP: u32 = 0x0003;
pub const GL_LINE_STRIP_ADJACENCY: u32 = 0x000B;
pub const GL_LINE_STRIP_ADJACENCY_ARB: u32 = 0x000B;
pub const GL_LINE_WIDTH: u32 = 0x0B21;
pub const GL_LINE_WIDTH_GRANULARITY: u32 = 0x0B23;
pub const GL_LINE_WIDTH_RANGE: u32 = 0x0B22;
pub const GL_LINK_STATUS: u32 = 0x8B82;
pub const GL_LOCATION: u32 = 0x930E;
pub const GL_LOCATION_COMPONENT: u32 = 0x934A;
pub const GL_LOCATION_INDEX: u32 = 0x930F;
pub const GL_LOGIC_OP_MODE: u32 = 0x0BF0;
pub const GL_LOWER_LEFT: u32 = 0x8CA1;
pub const GL_LOW_FLOAT: u32 = 0x8DF0;
pub const GL_LOW_INT: u32 = 0x8DF3;
pub const GL_LUMINANCE16F_ARB: u32 = 0x881E;
pub const GL_LUMINANCE32F_ARB: u32 = 0x8818;
pub const GL_LUMINANCE_ALPHA16F_ARB: u32 = 0x881F;
pub const GL_LUMINANCE_ALPHA32F_ARB: u32 = 0x8819;
pub const GL_MAJOR_VERSION: u32 = 0x821B;
pub const GL_MANUAL_GENERATE_MIPMAP: u32 = 0x8294;
pub const GL_MAP_COHERENT_BIT: u32 = 0x0080;
pub const GL_MAP_FLUSH_EXPLICIT_BIT: u32 = 0x0010;
pub const GL_MAP_INVALIDATE_BUFFER_BIT: u32 = 0x0008;
pub const GL_MAP_INVALIDATE_RANGE_BIT: u32 = 0x0004;
pub const GL_MAP_PERSISTENT_BIT: u32 = 0x0040;
pub const GL_MAP_READ_BIT: u32 = 0x0001;
pub const GL_MAP_UNSYNCHRONIZED_BIT: u32 = 0x0020;
pub const GL_MAP_WRITE_BIT: u32 = 0x0002;
pub const GL_MATRIX0_ARB: u32 = 0x88C0;
pub const GL_MATRIX10_ARB: u32 = 0x88CA;
pub const GL_MATRIX11_ARB: u32 = 0x88CB;
pub const GL_MATRIX12_ARB: u32 = 0x88CC;
pub const GL_MATRIX13_ARB: u32 = 0x88CD;
pub const GL_MATRIX14_ARB: u32 = 0x88CE;
pub const GL_MATRIX15_ARB: u32 = 0x88CF;
pub const GL_MATRIX16_ARB: u32 = 0x88D0;
pub const GL_MATRIX17_ARB: u32 = 0x88D1;
pub const GL_MATRIX18_ARB: u32 = 0x88D2;
pub const GL_MATRIX19_ARB: u32 = 0x88D3;
pub const GL_MATRIX1_ARB: u32 = 0x88C1;
pub const GL_MATRIX20_ARB: u32 = 0x88D4;
pub const GL_MATRIX21_ARB: u32 = 0x88D5;
pub const GL_MATRIX22_ARB: u32 = 0x88D6;
pub const GL_MATRIX23_ARB: u32 = 0x88D7;
pub const GL_MATRIX24_ARB: u32 = 0x88D8;
pub const GL_MATRIX25_ARB: u32 = 0x88D9;
pub const GL_MATRIX26_ARB: u32 = 0x88DA;
pub const GL_MATRIX27_ARB: u32 = 0x88DB;
pub const GL_MATRIX28_ARB: u32 = 0x88DC;
pub const GL_MATRIX29_ARB: u32 = 0x88DD;
pub const GL_MATRIX2_ARB: u32 = 0x88C2;
pub const GL_MATRIX30_ARB: u32 = 0x88DE;
pub const GL_MATRIX31_ARB: u32 = 0x88DF;
pub const GL_MATRIX3_ARB: u32 = 0x88C3;
pub const GL_MATRIX4_ARB: u32 = 0x88C4;
pub const GL_MATRIX5_ARB: u32 = 0x88C5;
pub const GL_MATRIX6_ARB: u32 = 0x88C6;
pub const GL_MATRIX7_ARB: u32 = 0x88C7;
pub const GL_MATRIX8_ARB: u32 = 0x88C8;
pub const GL_MATRIX9_ARB: u32 = 0x88C9;
pub const GL_MATRIX_STRIDE: u32 = 0x92FF;
pub const GL_MAX: u32 = 0x8008;
pub const GL_MAX_3D_TEXTURE_SIZE: u32 = 0x8073;
pub const GL_MAX_ARRAY_TEXTURE_LAYERS: u32 = 0x88FF;
pub const GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS: u32 = 0x92DC;
pub const GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE: u32 = 0x92D8;
pub const GL_MAX_CLIP_DISTANCES: u32 = 0x0D32;
pub const GL_MAX_COLOR_ATTACHMENTS: u32 = 0x8CDF;
pub const GL_MAX_COLOR_ATTACHMENTS_EXT: u32 = 0x8CDF;
pub const GL_MAX_COLOR_TEXTURE_SAMPLES: u32 = 0x910E;
pub const GL_MAX_COMBINED_ATOMIC_COUNTERS: u32 = 0x92D7;
pub const GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS: u32 = 0x92D1;
pub const GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS: u32 = 0x8266;
pub const GL_MAX_COMBINED_DIMENSIONS: u32 = 0x8282;
pub const GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS: u32 = 0x8A33;
pub const GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS: u32 = 0x8A32;
pub const GL_MAX_COMBINED_IMAGE_UNIFORMS: u32 = 0x90CF;
pub const GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS: u32 = 0x8F39;
pub const GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES: u32 = 0x8F39;
pub const GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS: u32 = 0x90DC;
pub const GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS: u32 = 0x8E1E;
pub const GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS: u32 = 0x8E1F;
pub const GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS: u32 = 0x8B4D;
pub const GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB: u32 = 0x8B4D;
pub const GL_MAX_COMBINED_UNIFORM_BLOCKS: u32 = 0x8A2E;
pub const GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS: u32 = 0x8A31;
pub const GL_MAX_COMPUTE_ATOMIC_COUNTERS: u32 = 0x8265;
pub const GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS: u32 = 0x8264;
pub const GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB: u32 = 0x90EB;
pub const GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB: u32 = 0x91BF;
pub const GL_MAX_COMPUTE_IMAGE_UNIFORMS: u32 = 0x91BD;
pub const GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS: u32 = 0x90DB;
pub const GL_MAX_COMPUTE_SHARED_MEMORY_SIZE: u32 = 0x8262;
pub const GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS: u32 = 0x91BC;
pub const GL_MAX_COMPUTE_UNIFORM_BLOCKS: u32 = 0x91BB;
pub const GL_MAX_COMPUTE_UNIFORM_COMPONENTS: u32 = 0x8263;
pub const GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB: u32 = 0x9344;
pub const GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB: u32 = 0x9345;
pub const GL_MAX_COMPUTE_WORK_GROUP_COUNT: u32 = 0x91BE;
pub const GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS: u32 = 0x90EB;
pub const GL_MAX_COMPUTE_WORK_GROUP_SIZE: u32 = 0x91BF;
pub const GL_MAX_CUBE_MAP_TEXTURE_SIZE: u32 = 0x851C;
pub const GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB: u32 = 0x851C;
pub const GL_MAX_DEBUG_GROUP_STACK_DEPTH: u32 = 0x826C;
pub const GL_MAX_DEBUG_LOGGED_MESSAGES: u32 = 0x9144;
pub const GL_MAX_DEBUG_LOGGED_MESSAGES_ARB: u32 = 0x9144;
pub const GL_MAX_DEBUG_MESSAGE_LENGTH: u32 = 0x9143;
pub const GL_MAX_DEBUG_MESSAGE_LENGTH_ARB: u32 = 0x9143;
pub const GL_MAX_DEPTH: u32 = 0x8280;
pub const GL_MAX_DEPTH_TEXTURE_SAMPLES: u32 = 0x910F;
pub const GL_MAX_DRAW_BUFFERS: u32 = 0x8824;
pub const GL_MAX_DRAW_BUFFERS_ARB: u32 = 0x8824;
pub const GL_MAX_DUAL_SOURCE_DRAW_BUFFERS: u32 = 0x88FC;
pub const GL_MAX_ELEMENTS_INDICES: u32 = 0x80E9;
pub const GL_MAX_ELEMENTS_VERTICES: u32 = 0x80E8;
pub const GL_MAX_ELEMENT_INDEX: u32 = 0x8D6B;
pub const GL_MAX_FRAGMENT_ATOMIC_COUNTERS: u32 = 0x92D6;
pub const GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS: u32 = 0x92D0;
pub const GL_MAX_FRAGMENT_IMAGE_UNIFORMS: u32 = 0x90CE;
pub const GL_MAX_FRAGMENT_INPUT_COMPONENTS: u32 = 0x9125;
pub const GL_MAX_FRAGMENT_INTERPOLATION_OFFSET: u32 = 0x8E5C;
pub const GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS: u32 = 0x90DA;
pub const GL_MAX_FRAGMENT_UNIFORM_BLOCKS: u32 = 0x8A2D;
pub const GL_MAX_FRAGMENT_UNIFORM_COMPONENTS: u32 = 0x8B49;
pub const GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB: u32 = 0x8B49;
pub const GL_MAX_FRAGMENT_UNIFORM_VECTORS: u32 = 0x8DFD;
pub const GL_MAX_FRAMEBUFFER_HEIGHT: u32 = 0x9316;
pub const GL_MAX_FRAMEBUFFER_LAYERS: u32 = 0x9317;
pub const GL_MAX_FRAMEBUFFER_SAMPLES: u32 = 0x9318;
pub const GL_MAX_FRAMEBUFFER_WIDTH: u32 = 0x9315;
pub const GL_MAX_GEOMETRY_ATOMIC_COUNTERS: u32 = 0x92D5;
pub const GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS: u32 = 0x92CF;
pub const GL_MAX_GEOMETRY_IMAGE_UNIFORMS: u32 = 0x90CD;
pub const GL_MAX_GEOMETRY_INPUT_COMPONENTS: u32 = 0x9123;
pub const GL_MAX_GEOMETRY_OUTPUT_COMPONENTS: u32 = 0x9124;
pub const GL_MAX_GEOMETRY_OUTPUT_VERTICES: u32 = 0x8DE0;
pub const GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB: u32 = 0x8DE0;
pub const GL_MAX_GEOMETRY_SHADER_INVOCATIONS: u32 = 0x8E5A;
pub const GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS: u32 = 0x90D7;
pub const GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS: u32 = 0x8C29;
pub const GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB: u32 = 0x8C29;
pub const GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS: u32 = 0x8DE1;
pub const GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB: u32 = 0x8DE1;
pub const GL_MAX_GEOMETRY_UNIFORM_BLOCKS: u32 = 0x8A2C;
pub const GL_MAX_GEOMETRY_UNIFORM_COMPONENTS: u32 = 0x8DDF;
pub const GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB: u32 = 0x8DDF;
pub const GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB: u32 = 0x8DDD;
pub const GL_MAX_HEIGHT: u32 = 0x827F;
pub const GL_MAX_IMAGE_SAMPLES: u32 = 0x906D;
pub const GL_MAX_IMAGE_UNITS: u32 = 0x8F38;
pub const GL_MAX_INTEGER_SAMPLES: u32 = 0x9110;
pub const GL_MAX_LABEL_LENGTH: u32 = 0x82E8;
pub const GL_MAX_LAYERS: u32 = 0x8281;
pub const GL_MAX_NAME_LENGTH: u32 = 0x92F6;
pub const GL_MAX_NUM_ACTIVE_VARIABLES: u32 = 0x92F7;
pub const GL_MAX_NUM_COMPATIBLE_SUBROUTINES: u32 = 0x92F8;
pub const GL_MAX_PATCH_VERTICES: u32 = 0x8E7D;
pub const GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB: u32 = 0x88B1;
pub const GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB: u32 = 0x880B;
pub const GL_MAX_PROGRAM_ATTRIBS_ARB: u32 = 0x88AD;
pub const GL_MAX_PROGRAM_ENV_PARAMETERS_ARB: u32 = 0x88B5;
pub const GL_MAX_PROGRAM_INSTRUCTIONS_ARB: u32 = 0x88A1;
pub const GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB: u32 = 0x88B4;
pub const GL_MAX_PROGRAM_MATRICES_ARB: u32 = 0x862F;
pub const GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB: u32 = 0x862E;
pub const GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB: u32 = 0x88B3;
pub const GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB: u32 = 0x880E;
pub const GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB: u32 = 0x88AF;
pub const GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB: u32 = 0x88A3;
pub const GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB: u32 = 0x88AB;
pub const GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB: u32 = 0x88A7;
pub const GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB: u32 = 0x8810;
pub const GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB: u32 = 0x880F;
pub const GL_MAX_PROGRAM_PARAMETERS_ARB: u32 = 0x88A9;
pub const GL_MAX_PROGRAM_TEMPORARIES_ARB: u32 = 0x88A5;
pub const GL_MAX_PROGRAM_TEXEL_OFFSET: u32 = 0x8905;
pub const GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET: u32 = 0x8E5F;
pub const GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB: u32 = 0x880D;
pub const GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB: u32 = 0x880C;
pub const GL_MAX_RECTANGLE_TEXTURE_SIZE: u32 = 0x84F8;
pub const GL_MAX_RENDERBUFFER_SIZE: u32 = 0x84E8;
pub const GL_MAX_RENDERBUFFER_SIZE_EXT: u32 = 0x84E8;
pub const GL_MAX_SAMPLES: u32 = 0x8D57;
pub const GL_MAX_SAMPLES_EXT: u32 = 0x8D57;
pub const GL_MAX_SAMPLE_MASK_WORDS: u32 = 0x8E59;
pub const GL_MAX_SERVER_WAIT_TIMEOUT: u32 = 0x9111;
pub const GL_MAX_SHADER_STORAGE_BLOCK_SIZE: u32 = 0x90DE;
pub const GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS: u32 = 0x90DD;
pub const GL_MAX_SUBROUTINES: u32 = 0x8DE7;
pub const GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS: u32 = 0x8DE8;
pub const GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS: u32 = 0x92D3;
pub const GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS: u32 = 0x92CD;
pub const GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS: u32 = 0x90CB;
pub const GL_MAX_TESS_CONTROL_INPUT_COMPONENTS: u32 = 0x886C;
pub const GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS: u32 = 0x8E83;
pub const GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS: u32 = 0x90D8;
pub const GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS: u32 = 0x8E81;
pub const GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS: u32 = 0x8E85;
pub const GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS: u32 = 0x8E89;
pub const GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS: u32 = 0x8E7F;
pub const GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS: u32 = 0x92D4;
pub const GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS: u32 = 0x92CE;
pub const GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS: u32 = 0x90CC;
pub const GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS: u32 = 0x886D;
pub const GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS: u32 = 0x8E86;
pub const GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS: u32 = 0x90D9;
pub const GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS: u32 = 0x8E82;
pub const GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS: u32 = 0x8E8A;
pub const GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS: u32 = 0x8E80;
pub const GL_MAX_TESS_GEN_LEVEL: u32 = 0x8E7E;
pub const GL_MAX_TESS_PATCH_COMPONENTS: u32 = 0x8E84;
pub const GL_MAX_TEXTURE_BUFFER_SIZE: u32 = 0x8C2B;
pub const GL_MAX_TEXTURE_COORDS_ARB: u32 = 0x8871;
pub const GL_MAX_TEXTURE_IMAGE_UNITS: u32 = 0x8872;
pub const GL_MAX_TEXTURE_IMAGE_UNITS_ARB: u32 = 0x8872;
pub const GL_MAX_TEXTURE_LOD_BIAS: u32 = 0x84FD;
pub const GL_MAX_TEXTURE_MAX_ANISOTROPY: u32 = 0x84FF;
pub const GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT: u32 = 0x84FF;
pub const GL_MAX_TEXTURE_SIZE: u32 = 0x0D33;
pub const GL_MAX_TEXTURE_UNITS_ARB: u32 = 0x84E2;
pub const GL_MAX_TRANSFORM_FEEDBACK_BUFFERS: u32 = 0x8E70;
pub const GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS: u32 = 0x8C8A;
pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS: u32 = 0x8C8B;
pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS: u32 = 0x8C80;
pub const GL_MAX_UNIFORM_BLOCK_SIZE: u32 = 0x8A30;
pub const GL_MAX_UNIFORM_BUFFER_BINDINGS: u32 = 0x8A2F;
pub const GL_MAX_UNIFORM_LOCATIONS: u32 = 0x826E;
pub const GL_MAX_VARYING_COMPONENTS: u32 = 0x8B4B;
pub const GL_MAX_VARYING_FLOATS: u32 = 0x8B4B;
pub const GL_MAX_VARYING_FLOATS_ARB: u32 = 0x8B4B;
pub const GL_MAX_VARYING_VECTORS: u32 = 0x8DFC;
pub const GL_MAX_VERTEX_ATOMIC_COUNTERS: u32 = 0x92D2;
pub const GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS: u32 = 0x92CC;
pub const GL_MAX_VERTEX_ATTRIBS: u32 = 0x8869;
pub const GL_MAX_VERTEX_ATTRIBS_ARB: u32 = 0x8869;
pub const GL_MAX_VERTEX_ATTRIB_BINDINGS: u32 = 0x82DA;
pub const GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET: u32 = 0x82D9;
pub const GL_MAX_VERTEX_IMAGE_UNIFORMS: u32 = 0x90CA;
pub const GL_MAX_VERTEX_OUTPUT_COMPONENTS: u32 = 0x9122;
pub const GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS: u32 = 0x90D6;
pub const GL_MAX_VERTEX_STREAMS: u32 = 0x8E71;
pub const GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS: u32 = 0x8B4C;
pub const GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB: u32 = 0x8B4C;
pub const GL_MAX_VERTEX_UNIFORM_BLOCKS: u32 = 0x8A2B;
pub const GL_MAX_VERTEX_UNIFORM_COMPONENTS: u32 = 0x8B4A;
pub const GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB: u32 = 0x8B4A;
pub const GL_MAX_VERTEX_UNIFORM_VECTORS: u32 = 0x8DFB;
pub const GL_MAX_VERTEX_VARYING_COMPONENTS_ARB: u32 = 0x8DDE;
pub const GL_MAX_VIEWPORTS: u32 = 0x825B;
pub const GL_MAX_VIEWPORT_DIMS: u32 = 0x0D3A;
pub const GL_MAX_WIDTH: u32 = 0x827E;
pub const GL_MEDIUM_FLOAT: u32 = 0x8DF1;
pub const GL_MEDIUM_INT: u32 = 0x8DF4;
pub const GL_MIN: u32 = 0x8007;
pub const GL_MINOR_VERSION: u32 = 0x821C;
pub const GL_MIN_FRAGMENT_INTERPOLATION_OFFSET: u32 = 0x8E5B;
pub const GL_MIN_MAP_BUFFER_ALIGNMENT: u32 = 0x90BC;
pub const GL_MIN_PROGRAM_TEXEL_OFFSET: u32 = 0x8904;
pub const GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET: u32 = 0x8E5E;
pub const GL_MIN_SAMPLE_SHADING_VALUE: u32 = 0x8C37;
pub const GL_MIN_SAMPLE_SHADING_VALUE_ARB: u32 = 0x8C37;
pub const GL_MIPMAP: u32 = 0x8293;
pub const GL_MIRRORED_REPEAT: u32 = 0x8370;
pub const GL_MIRRORED_REPEAT_ARB: u32 = 0x8370;
pub const GL_MIRROR_CLAMP_EXT: u32 = 0x8742;
pub const GL_MIRROR_CLAMP_TO_BORDER_EXT: u32 = 0x8912;
pub const GL_MIRROR_CLAMP_TO_EDGE: u32 = 0x8743;
pub const GL_MIRROR_CLAMP_TO_EDGE_EXT: u32 = 0x8743;
pub const GL_MULTISAMPLE: u32 = 0x809D;
pub const GL_MULTISAMPLE_ARB: u32 = 0x809D;
pub const GL_MULTISAMPLE_BIT_ARB: u32 = 0x20000000;
pub const GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY_ARB: u32 = 0x9382;
pub const GL_MULTISAMPLE_LINE_WIDTH_RANGE_ARB: u32 = 0x9381;
pub const GL_NAMED_STRING_LENGTH_ARB: u32 = 0x8DE9;
pub const GL_NAMED_STRING_TYPE_ARB: u32 = 0x8DEA;
pub const GL_NAME_LENGTH: u32 = 0x92F9;
pub const GL_NAND: u32 = 0x150E;
pub const GL_NEAREST: u32 = 0x2600;
pub const GL_NEAREST_MIPMAP_LINEAR: u32 = 0x2702;
pub const GL_NEAREST_MIPMAP_NEAREST: u32 = 0x2700;
pub const GL_NEVER: u32 = 0x0200;
pub const GL_NICEST: u32 = 0x1102;
pub const GL_NONE: u32 = 0;
pub const GL_NOOP: u32 = 0x1505;
pub const GL_NOR: u32 = 0x1508;
pub const GL_NORMAL_ARRAY_BUFFER_BINDING_ARB: u32 = 0x8897;
pub const GL_NORMAL_MAP_ARB: u32 = 0x8511;
pub const GL_NOTEQUAL: u32 = 0x0205;
pub const GL_NO_ERROR: u32 = 0;
pub const GL_NUM_ACTIVE_VARIABLES: u32 = 0x9304;
pub const GL_NUM_COMPATIBLE_SUBROUTINES: u32 = 0x8E4A;
pub const GL_NUM_COMPRESSED_TEXTURE_FORMATS: u32 = 0x86A2;
pub const GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB: u32 = 0x86A2;
pub const GL_NUM_EXTENSIONS: u32 = 0x821D;
pub const GL_NUM_PROGRAM_BINARY_FORMATS: u32 = 0x87FE;
pub const GL_NUM_SAMPLE_COUNTS: u32 = 0x9380;
pub const GL_NUM_SHADER_BINARY_FORMATS: u32 = 0x8DF9;
pub const GL_NUM_SHADING_LANGUAGE_VERSIONS: u32 = 0x82E9;
pub const GL_NUM_SPIR_V_EXTENSIONS: u32 = 0x9554;
pub const GL_OBJECT_ACTIVE_ATTRIBUTES_ARB: u32 = 0x8B89;
pub const GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB: u32 = 0x8B8A;
pub const GL_OBJECT_ACTIVE_UNIFORMS_ARB: u32 = 0x8B86;
pub const GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB: u32 = 0x8B87;
pub const GL_OBJECT_ATTACHED_OBJECTS_ARB: u32 = 0x8B85;
pub const GL_OBJECT_COMPILE_STATUS_ARB: u32 = 0x8B81;
pub const GL_OBJECT_DELETE_STATUS_ARB: u32 = 0x8B80;
pub const GL_OBJECT_INFO_LOG_LENGTH_ARB: u32 = 0x8B84;
pub const GL_OBJECT_LINK_STATUS_ARB: u32 = 0x8B82;
pub const GL_OBJECT_SHADER_SOURCE_LENGTH_ARB: u32 = 0x8B88;
pub const GL_OBJECT_SUBTYPE_ARB: u32 = 0x8B4F;
pub const GL_OBJECT_TYPE: u32 = 0x9112;
pub const GL_OBJECT_TYPE_ARB: u32 = 0x8B4E;
pub const GL_OBJECT_VALIDATE_STATUS_ARB: u32 = 0x8B83;
pub const GL_OFFSET: u32 = 0x92FC;
pub const GL_ONE: u32 = 1;
pub const GL_ONE_MINUS_CONSTANT_ALPHA: u32 = 0x8004;
pub const GL_ONE_MINUS_CONSTANT_COLOR: u32 = 0x8002;
pub const GL_ONE_MINUS_DST_ALPHA: u32 = 0x0305;
pub const GL_ONE_MINUS_DST_COLOR: u32 = 0x0307;
pub const GL_ONE_MINUS_SRC1_ALPHA: u32 = 0x88FB;
pub const GL_ONE_MINUS_SRC1_COLOR: u32 = 0x88FA;
pub const GL_ONE_MINUS_SRC_ALPHA: u32 = 0x0303;
pub const GL_ONE_MINUS_SRC_COLOR: u32 = 0x0301;
pub const GL_OR: u32 = 0x1507;
pub const GL_OR_INVERTED: u32 = 0x150D;
pub const GL_OR_REVERSE: u32 = 0x150B;
pub const GL_OUT_OF_MEMORY: u32 = 0x0505;
pub const GL_PACK_ALIGNMENT: u32 = 0x0D05;
pub const GL_PACK_COMPRESSED_BLOCK_DEPTH: u32 = 0x912D;
pub const GL_PACK_COMPRESSED_BLOCK_HEIGHT: u32 = 0x912C;
pub const GL_PACK_COMPRESSED_BLOCK_SIZE: u32 = 0x912E;
pub const GL_PACK_COMPRESSED_BLOCK_WIDTH: u32 = 0x912B;
pub const GL_PACK_IMAGE_HEIGHT: u32 = 0x806C;
pub const GL_PACK_LSB_FIRST: u32 = 0x0D01;
pub const GL_PACK_ROW_LENGTH: u32 = 0x0D02;
pub const GL_PACK_SKIP_IMAGES: u32 = 0x806B;
pub const GL_PACK_SKIP_PIXELS: u32 = 0x0D04;
pub const GL_PACK_SKIP_ROWS: u32 = 0x0D03;
pub const GL_PACK_SWAP_BYTES: u32 = 0x0D00;
pub const GL_PALETTE4_R5_G6_B5_OES: u32 = 0x8B92;
pub const GL_PALETTE4_RGB5_A1_OES: u32 = 0x8B94;
pub const GL_PALETTE4_RGB8_OES: u32 = 0x8B90;
pub const GL_PALETTE4_RGBA4_OES: u32 = 0x8B93;
pub const GL_PALETTE4_RGBA8_OES: u32 = 0x8B91;
pub const GL_PALETTE8_R5_G6_B5_OES: u32 = 0x8B97;
pub const GL_PALETTE8_RGB5_A1_OES: u32 = 0x8B99;
pub const GL_PALETTE8_RGB8_OES: u32 = 0x8B95;
pub const GL_PALETTE8_RGBA4_OES: u32 = 0x8B98;
pub const GL_PALETTE8_RGBA8_OES: u32 = 0x8B96;
pub const GL_PATCHES: u32 = 0x000E;
pub const GL_PATCH_DEFAULT_INNER_LEVEL: u32 = 0x8E73;
pub const GL_PATCH_DEFAULT_OUTER_LEVEL: u32 = 0x8E74;
pub const GL_PATCH_VERTICES: u32 = 0x8E72;
pub const GL_PIXEL_BUFFER_BARRIER_BIT: u32 = 0x00000080;
pub const GL_PIXEL_PACK_BUFFER: u32 = 0x88EB;
pub const GL_PIXEL_PACK_BUFFER_BINDING: u32 = 0x88ED;
pub const GL_PIXEL_UNPACK_BUFFER: u32 = 0x88EC;
pub const GL_PIXEL_UNPACK_BUFFER_BINDING: u32 = 0x88EF;
pub const GL_POINT: u32 = 0x1B00;
pub const GL_POINTS: u32 = 0x0000;
pub const GL_POINT_FADE_THRESHOLD_SIZE: u32 = 0x8128;
pub const GL_POINT_SIZE: u32 = 0x0B11;
pub const GL_POINT_SIZE_GRANULARITY: u32 = 0x0B13;
pub const GL_POINT_SIZE_RANGE: u32 = 0x0B12;
pub const GL_POINT_SPRITE_COORD_ORIGIN: u32 = 0x8CA0;
pub const GL_POLYGON_MODE: u32 = 0x0B40;
pub const GL_POLYGON_OFFSET_FACTOR: u32 = 0x8038;
pub const GL_POLYGON_OFFSET_FILL: u32 = 0x8037;
pub const GL_POLYGON_OFFSET_LINE: u32 = 0x2A02;
pub const GL_POLYGON_OFFSET_POINT: u32 = 0x2A01;
pub const GL_POLYGON_OFFSET_UNITS: u32 = 0x2A00;
pub const GL_POLYGON_SMOOTH: u32 = 0x0B41;
pub const GL_POLYGON_SMOOTH_HINT: u32 = 0x0C53;
pub const GL_PRIMITIVES_GENERATED: u32 = 0x8C87;
pub const GL_PRIMITIVES_SUBMITTED: u32 = 0x82EF;
pub const GL_PRIMITIVES_SUBMITTED_ARB: u32 = 0x82EF;
pub const GL_PRIMITIVE_BOUNDING_BOX_ARB: u32 = 0x92BE;
pub const GL_PRIMITIVE_RESTART: u32 = 0x8F9D;
pub const GL_PRIMITIVE_RESTART_FIXED_INDEX: u32 = 0x8D69;
pub const GL_PRIMITIVE_RESTART_INDEX: u32 = 0x8F9E;
pub const GL_PROGRAM: u32 = 0x82E2;
pub const GL_PROGRAMMABLE_SAMPLE_LOCATION_ARB: u32 = 0x9341;
pub const GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_ARB: u32 = 0x9340;
pub const GL_PROGRAM_ADDRESS_REGISTERS_ARB: u32 = 0x88B0;
pub const GL_PROGRAM_ALU_INSTRUCTIONS_ARB: u32 = 0x8805;
pub const GL_PROGRAM_ATTRIBS_ARB: u32 = 0x88AC;
pub const GL_PROGRAM_BINARY_FORMATS: u32 = 0x87FF;
pub const GL_PROGRAM_BINARY_LENGTH: u32 = 0x8741;
pub const GL_PROGRAM_BINARY_RETRIEVABLE_HINT: u32 = 0x8257;
pub const GL_PROGRAM_BINDING_ARB: u32 = 0x8677;
pub const GL_PROGRAM_ERROR_POSITION_ARB: u32 = 0x864B;
pub const GL_PROGRAM_ERROR_STRING_ARB: u32 = 0x8874;
pub const GL_PROGRAM_FORMAT_ARB: u32 = 0x8876;
pub const GL_PROGRAM_FORMAT_ASCII_ARB: u32 = 0x8875;
pub const GL_PROGRAM_INPUT: u32 = 0x92E3;
pub const GL_PROGRAM_INSTRUCTIONS_ARB: u32 = 0x88A0;
pub const GL_PROGRAM_LENGTH_ARB: u32 = 0x8627;
pub const GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB: u32 = 0x88B2;
pub const GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB: u32 = 0x8808;
pub const GL_PROGRAM_NATIVE_ATTRIBS_ARB: u32 = 0x88AE;
pub const GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB: u32 = 0x88A2;
pub const GL_PROGRAM_NATIVE_PARAMETERS_ARB: u32 = 0x88AA;
pub const GL_PROGRAM_NATIVE_TEMPORARIES_ARB: u32 = 0x88A6;
pub const GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB: u32 = 0x880A;
pub const GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB: u32 = 0x8809;
pub const GL_PROGRAM_OBJECT_ARB: u32 = 0x8B40;
pub const GL_PROGRAM_OUTPUT: u32 = 0x92E4;
pub const GL_PROGRAM_PARAMETERS_ARB: u32 = 0x88A8;
pub const GL_PROGRAM_PIPELINE: u32 = 0x82E4;
pub const GL_PROGRAM_PIPELINE_BINDING: u32 = 0x825A;
pub const GL_PROGRAM_POINT_SIZE: u32 = 0x8642;
pub const GL_PROGRAM_POINT_SIZE_ARB: u32 = 0x8642;
pub const GL_PROGRAM_SEPARABLE: u32 = 0x8258;
pub const GL_PROGRAM_STRING_ARB: u32 = 0x8628;
pub const GL_PROGRAM_TEMPORARIES_ARB: u32 = 0x88A4;
pub const GL_PROGRAM_TEX_INDIRECTIONS_ARB: u32 = 0x8807;
pub const GL_PROGRAM_TEX_INSTRUCTIONS_ARB: u32 = 0x8806;
pub const GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB: u32 = 0x88B6;
pub const GL_PROVOKING_VERTEX: u32 = 0x8E4F;
pub const GL_PROXY_TEXTURE_1D: u32 = 0x8063;
pub const GL_PROXY_TEXTURE_1D_ARRAY: u32 = 0x8C19;
pub const GL_PROXY_TEXTURE_2D: u32 = 0x8064;
pub const GL_PROXY_TEXTURE_2D_ARRAY: u32 = 0x8C1B;
pub const GL_PROXY_TEXTURE_2D_MULTISAMPLE: u32 = 0x9101;
pub const GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY: u32 = 0x9103;
pub const GL_PROXY_TEXTURE_3D: u32 = 0x8070;
pub const GL_PROXY_TEXTURE_CUBE_MAP: u32 = 0x851B;
pub const GL_PROXY_TEXTURE_CUBE_MAP_ARB: u32 = 0x851B;
pub const GL_PROXY_TEXTURE_CUBE_MAP_ARRAY: u32 = 0x900B;
pub const GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB: u32 = 0x900B;
pub const GL_PROXY_TEXTURE_RECTANGLE: u32 = 0x84F7;
pub const GL_QUADS: u32 = 0x0007;
pub const GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION: u32 = 0x8E4C;
pub const GL_QUERY: u32 = 0x82E3;
pub const GL_QUERY_BUFFER: u32 = 0x9192;
pub const GL_QUERY_BUFFER_BARRIER_BIT: u32 = 0x00008000;
pub const GL_QUERY_BUFFER_BINDING: u32 = 0x9193;
pub const GL_QUERY_BY_REGION_NO_WAIT: u32 = 0x8E16;
pub const GL_QUERY_BY_REGION_WAIT: u32 = 0x8E15;
pub const GL_QUERY_COUNTER_BITS: u32 = 0x8864;
pub const GL_QUERY_COUNTER_BITS_ARB: u32 = 0x8864;
pub const GL_QUERY_NO_WAIT: u32 = 0x8E14;
pub const GL_QUERY_RESULT: u32 = 0x8866;
pub const GL_QUERY_RESULT_ARB: u32 = 0x8866;
pub const GL_QUERY_RESULT_AVAILABLE: u32 = 0x8867;
pub const GL_QUERY_RESULT_AVAILABLE_ARB: u32 = 0x8867;
pub const GL_QUERY_RESULT_NO_WAIT: u32 = 0x9194;
pub const GL_QUERY_TARGET: u32 = 0x82EA;
pub const GL_QUERY_WAIT: u32 = 0x8E13;
pub const GL_R11F_G11F_B10F: u32 = 0x8C3A;
pub const GL_R16: u32 = 0x822A;
pub const GL_R16F: u32 = 0x822D;
pub const GL_R16I: u32 = 0x8233;
pub const GL_R16UI: u32 = 0x8234;
pub const GL_R16_SNORM: u32 = 0x8F98;
pub const GL_R32F: u32 = 0x822E;
pub const GL_R32I: u32 = 0x8235;
pub const GL_R32UI: u32 = 0x8236;
pub const GL_R3_G3_B2: u32 = 0x2A10;
pub const GL_R8: u32 = 0x8229;
pub const GL_R8I: u32 = 0x8231;
pub const GL_R8UI: u32 = 0x8232;
pub const GL_R8_SNORM: u32 = 0x8F94;
pub const GL_RASTERIZER_DISCARD: u32 = 0x8C89;
pub const GL_READ_BUFFER: u32 = 0x0C02;
pub const GL_READ_FRAMEBUFFER: u32 = 0x8CA8;
pub const GL_READ_FRAMEBUFFER_BINDING: u32 = 0x8CAA;
pub const GL_READ_FRAMEBUFFER_BINDING_EXT: u32 = 0x8CAA;
pub const GL_READ_FRAMEBUFFER_EXT: u32 = 0x8CA8;
pub const GL_READ_ONLY: u32 = 0x88B8;
pub const GL_READ_ONLY_ARB: u32 = 0x88B8;
pub const GL_READ_PIXELS: u32 = 0x828C;
pub const GL_READ_PIXELS_FORMAT: u32 = 0x828D;
pub const GL_READ_PIXELS_TYPE: u32 = 0x828E;
pub const GL_READ_WRITE: u32 = 0x88BA;
pub const GL_READ_WRITE_ARB: u32 = 0x88BA;
pub const GL_RED: u32 = 0x1903;
pub const GL_RED_INTEGER: u32 = 0x8D94;
pub const GL_REFERENCED_BY_COMPUTE_SHADER: u32 = 0x930B;
pub const GL_REFERENCED_BY_FRAGMENT_SHADER: u32 = 0x930A;
pub const GL_REFERENCED_BY_GEOMETRY_SHADER: u32 = 0x9309;
pub const GL_REFERENCED_BY_TESS_CONTROL_SHADER: u32 = 0x9307;
pub const GL_REFERENCED_BY_TESS_EVALUATION_SHADER: u32 = 0x9308;
pub const GL_REFERENCED_BY_VERTEX_SHADER: u32 = 0x9306;
pub const GL_REFLECTION_MAP_ARB: u32 = 0x8512;
pub const GL_RENDERBUFFER: u32 = 0x8D41;
pub const GL_RENDERBUFFER_ALPHA_SIZE: u32 = 0x8D53;
pub const GL_RENDERBUFFER_ALPHA_SIZE_EXT: u32 = 0x8D53;
pub const GL_RENDERBUFFER_BINDING: u32 = 0x8CA7;
pub const GL_RENDERBUFFER_BINDING_EXT: u32 = 0x8CA7;
pub const GL_RENDERBUFFER_BLUE_SIZE: u32 = 0x8D52;
pub const GL_RENDERBUFFER_BLUE_SIZE_EXT: u32 = 0x8D52;
pub const GL_RENDERBUFFER_DEPTH_SIZE: u32 = 0x8D54;
pub const GL_RENDERBUFFER_DEPTH_SIZE_EXT: u32 = 0x8D54;
pub const GL_RENDERBUFFER_EXT: u32 = 0x8D41;
pub const GL_RENDERBUFFER_GREEN_SIZE: u32 = 0x8D51;
pub const GL_RENDERBUFFER_GREEN_SIZE_EXT: u32 = 0x8D51;
pub const GL_RENDERBUFFER_HEIGHT: u32 = 0x8D43;
pub const GL_RENDERBUFFER_HEIGHT_EXT: u32 = 0x8D43;
pub const GL_RENDERBUFFER_INTERNAL_FORMAT: u32 = 0x8D44;
pub const GL_RENDERBUFFER_INTERNAL_FORMAT_EXT: u32 = 0x8D44;
pub const GL_RENDERBUFFER_RED_SIZE: u32 = 0x8D50;
pub const GL_RENDERBUFFER_RED_SIZE_EXT: u32 = 0x8D50;
pub const GL_RENDERBUFFER_SAMPLES: u32 = 0x8CAB;
pub const GL_RENDERBUFFER_SAMPLES_EXT: u32 = 0x8CAB;
pub const GL_RENDERBUFFER_STENCIL_SIZE: u32 = 0x8D55;
pub const GL_RENDERBUFFER_STENCIL_SIZE_EXT: u32 = 0x8D55;
pub const GL_RENDERBUFFER_WIDTH: u32 = 0x8D42;
pub const GL_RENDERBUFFER_WIDTH_EXT: u32 = 0x8D42;
pub const GL_RENDERER: u32 = 0x1F01;
pub const GL_REPEAT: u32 = 0x2901;
pub const GL_REPLACE: u32 = 0x1E01;
pub const GL_RG: u32 = 0x8227;
pub const GL_RG16: u32 = 0x822C;
pub const GL_RG16F: u32 = 0x822F;
pub const GL_RG16I: u32 = 0x8239;
pub const GL_RG16UI: u32 = 0x823A;
pub const GL_RG16_SNORM: u32 = 0x8F99;
pub const GL_RG32F: u32 = 0x8230;
pub const GL_RG32I: u32 = 0x823B;
pub const GL_RG32UI: u32 = 0x823C;
pub const GL_RG8: u32 = 0x822B;
pub const GL_RG8I: u32 = 0x8237;
pub const GL_RG8UI: u32 = 0x8238;
pub const GL_RG8_SNORM: u32 = 0x8F95;
pub const GL_RGB: u32 = 0x1907;
pub const GL_RGB10: u32 = 0x8052;
pub const GL_RGB10_A2: u32 = 0x8059;
pub const GL_RGB10_A2UI: u32 = 0x906F;
pub const GL_RGB12: u32 = 0x8053;
pub const GL_RGB16: u32 = 0x8054;
pub const GL_RGB16F: u32 = 0x881B;
pub const GL_RGB16F_ARB: u32 = 0x881B;
pub const GL_RGB16I: u32 = 0x8D89;
pub const GL_RGB16UI: u32 = 0x8D77;
pub const GL_RGB16_SNORM: u32 = 0x8F9A;
pub const GL_RGB32F: u32 = 0x8815;
pub const GL_RGB32F_ARB: u32 = 0x8815;
pub const GL_RGB32I: u32 = 0x8D83;
pub const GL_RGB32UI: u32 = 0x8D71;
pub const GL_RGB4: u32 = 0x804F;
pub const GL_RGB5: u32 = 0x8050;
pub const GL_RGB565: u32 = 0x8D62;
pub const GL_RGB5_A1: u32 = 0x8057;
pub const GL_RGB8: u32 = 0x8051;
pub const GL_RGB8I: u32 = 0x8D8F;
pub const GL_RGB8UI: u32 = 0x8D7D;
pub const GL_RGB8_SNORM: u32 = 0x8F96;
pub const GL_RGB9_E5: u32 = 0x8C3D;
pub const GL_RGBA: u32 = 0x1908;
pub const GL_RGBA12: u32 = 0x805A;
pub const GL_RGBA16: u32 = 0x805B;
pub const GL_RGBA16F: u32 = 0x881A;
pub const GL_RGBA16F_ARB: u32 = 0x881A;
pub const GL_RGBA16I: u32 = 0x8D88;
pub const GL_RGBA16UI: u32 = 0x8D76;
pub const GL_RGBA16_SNORM: u32 = 0x8F9B;
pub const GL_RGBA2: u32 = 0x8055;
pub const GL_RGBA32F: u32 = 0x8814;
pub const GL_RGBA32F_ARB: u32 = 0x8814;
pub const GL_RGBA32I: u32 = 0x8D82;
pub const GL_RGBA32UI: u32 = 0x8D70;
pub const GL_RGBA4: u32 = 0x8056;
pub const GL_RGBA8: u32 = 0x8058;
pub const GL_RGBA8I: u32 = 0x8D8E;
pub const GL_RGBA8UI: u32 = 0x8D7C;
pub const GL_RGBA8_SNORM: u32 = 0x8F97;
pub const GL_RGBA_FLOAT_MODE_ARB: u32 = 0x8820;
pub const GL_RGBA_INTEGER: u32 = 0x8D99;
pub const GL_RGB_INTEGER: u32 = 0x8D98;
pub const GL_RG_INTEGER: u32 = 0x8228;
pub const GL_RIGHT: u32 = 0x0407;
pub const GL_SAMPLER: u32 = 0x82E6;
pub const GL_SAMPLER_1D: u32 = 0x8B5D;
pub const GL_SAMPLER_1D_ARB: u32 = 0x8B5D;
pub const GL_SAMPLER_1D_ARRAY: u32 = 0x8DC0;
pub const GL_SAMPLER_1D_ARRAY_SHADOW: u32 = 0x8DC3;
pub const GL_SAMPLER_1D_SHADOW: u32 = 0x8B61;
pub const GL_SAMPLER_1D_SHADOW_ARB: u32 = 0x8B61;
pub const GL_SAMPLER_2D: u32 = 0x8B5E;
pub const GL_SAMPLER_2D_ARB: u32 = 0x8B5E;
pub const GL_SAMPLER_2D_ARRAY: u32 = 0x8DC1;
pub const GL_SAMPLER_2D_ARRAY_SHADOW: u32 = 0x8DC4;
pub const GL_SAMPLER_2D_MULTISAMPLE: u32 = 0x9108;
pub const GL_SAMPLER_2D_MULTISAMPLE_ARRAY: u32 = 0x910B;
pub const GL_SAMPLER_2D_RECT: u32 = 0x8B63;
pub const GL_SAMPLER_2D_RECT_ARB: u32 = 0x8B63;
pub const GL_SAMPLER_2D_RECT_SHADOW: u32 = 0x8B64;
pub const GL_SAMPLER_2D_RECT_SHADOW_ARB: u32 = 0x8B64;
pub const GL_SAMPLER_2D_SHADOW: u32 = 0x8B62;
pub const GL_SAMPLER_2D_SHADOW_ARB: u32 = 0x8B62;
pub const GL_SAMPLER_3D: u32 = 0x8B5F;
pub const GL_SAMPLER_3D_ARB: u32 = 0x8B5F;
pub const GL_SAMPLER_BINDING: u32 = 0x8919;
pub const GL_SAMPLER_BUFFER: u32 = 0x8DC2;
pub const GL_SAMPLER_CUBE: u32 = 0x8B60;
pub const GL_SAMPLER_CUBE_ARB: u32 = 0x8B60;
pub const GL_SAMPLER_CUBE_MAP_ARRAY: u32 = 0x900C;
pub const GL_SAMPLER_CUBE_MAP_ARRAY_ARB: u32 = 0x900C;
pub const GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW: u32 = 0x900D;
pub const GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB: u32 = 0x900D;
pub const GL_SAMPLER_CUBE_SHADOW: u32 = 0x8DC5;
pub const GL_SAMPLES: u32 = 0x80A9;
pub const GL_SAMPLES_ARB: u32 = 0x80A9;
pub const GL_SAMPLES_PASSED: u32 = 0x8914;
pub const GL_SAMPLES_PASSED_ARB: u32 = 0x8914;
pub const GL_SAMPLE_ALPHA_TO_COVERAGE: u32 = 0x809E;
pub const GL_SAMPLE_ALPHA_TO_COVERAGE_ARB: u32 = 0x809E;
pub const GL_SAMPLE_ALPHA_TO_ONE: u32 = 0x809F;
pub const GL_SAMPLE_ALPHA_TO_ONE_ARB: u32 = 0x809F;
pub const GL_SAMPLE_BUFFERS: u32 = 0x80A8;
pub const GL_SAMPLE_BUFFERS_ARB: u32 = 0x80A8;
pub const GL_SAMPLE_COVERAGE: u32 = 0x80A0;
pub const GL_SAMPLE_COVERAGE_ARB: u32 = 0x80A0;
pub const GL_SAMPLE_COVERAGE_INVERT: u32 = 0x80AB;
pub const GL_SAMPLE_COVERAGE_INVERT_ARB: u32 = 0x80AB;
pub const GL_SAMPLE_COVERAGE_VALUE: u32 = 0x80AA;
pub const GL_SAMPLE_COVERAGE_VALUE_ARB: u32 = 0x80AA;
pub const GL_SAMPLE_LOCATION_ARB: u32 = 0x8E50;
pub const GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_ARB: u32 = 0x933F;
pub const GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_ARB: u32 = 0x933E;
pub const GL_SAMPLE_LOCATION_SUBPIXEL_BITS_ARB: u32 = 0x933D;
pub const GL_SAMPLE_MASK: u32 = 0x8E51;
pub const GL_SAMPLE_MASK_VALUE: u32 = 0x8E52;
pub const GL_SAMPLE_POSITION: u32 = 0x8E50;
pub const GL_SAMPLE_SHADING: u32 = 0x8C36;
pub const GL_SAMPLE_SHADING_ARB: u32 = 0x8C36;
pub const GL_SCISSOR_BOX: u32 = 0x0C10;
pub const GL_SCISSOR_TEST: u32 = 0x0C11;
pub const GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB: u32 = 0x889C;
pub const GL_SEPARATE_ATTRIBS: u32 = 0x8C8D;
pub const GL_SET: u32 = 0x150F;
pub const GL_SHADER: u32 = 0x82E1;
pub const GL_SHADER_BINARY_FORMATS: u32 = 0x8DF8;
pub const GL_SHADER_BINARY_FORMAT_SPIR_V: u32 = 0x9551;
pub const GL_SHADER_BINARY_FORMAT_SPIR_V_ARB: u32 = 0x9551;
pub const GL_SHADER_COMPILER: u32 = 0x8DFA;
pub const GL_SHADER_IMAGE_ACCESS_BARRIER_BIT: u32 = 0x00000020;
pub const GL_SHADER_IMAGE_ATOMIC: u32 = 0x82A6;
pub const GL_SHADER_IMAGE_LOAD: u32 = 0x82A4;
pub const GL_SHADER_IMAGE_STORE: u32 = 0x82A5;
pub const GL_SHADER_INCLUDE_ARB: u32 = 0x8DAE;
pub const GL_SHADER_OBJECT_ARB: u32 = 0x8B48;
pub const GL_SHADER_SOURCE_LENGTH: u32 = 0x8B88;
pub const GL_SHADER_STORAGE_BARRIER_BIT: u32 = 0x00002000;
pub const GL_SHADER_STORAGE_BLOCK: u32 = 0x92E6;
pub const GL_SHADER_STORAGE_BUFFER: u32 = 0x90D2;
pub const GL_SHADER_STORAGE_BUFFER_BINDING: u32 = 0x90D3;
pub const GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT: u32 = 0x90DF;
pub const GL_SHADER_STORAGE_BUFFER_SIZE: u32 = 0x90D5;
pub const GL_SHADER_STORAGE_BUFFER_START: u32 = 0x90D4;
pub const GL_SHADER_TYPE: u32 = 0x8B4F;
pub const GL_SHADING_LANGUAGE_VERSION: u32 = 0x8B8C;
pub const GL_SHADING_LANGUAGE_VERSION_ARB: u32 = 0x8B8C;
pub const GL_SHORT: u32 = 0x1402;
pub const GL_SIGNALED: u32 = 0x9119;
pub const GL_SIGNED_NORMALIZED: u32 = 0x8F9C;
pub const GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST: u32 = 0x82AC;
pub const GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE: u32 = 0x82AE;
pub const GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST: u32 = 0x82AD;
pub const GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE: u32 = 0x82AF;
pub const GL_SMOOTH_LINE_WIDTH_GRANULARITY: u32 = 0x0B23;
pub const GL_SMOOTH_LINE_WIDTH_RANGE: u32 = 0x0B22;
pub const GL_SMOOTH_POINT_SIZE_GRANULARITY: u32 = 0x0B13;
pub const GL_SMOOTH_POINT_SIZE_RANGE: u32 = 0x0B12;
pub const GL_SOURCE1_ALPHA: u32 = 0x8589;
pub const GL_SPIR_V_BINARY: u32 = 0x9552;
pub const GL_SPIR_V_BINARY_ARB: u32 = 0x9552;
pub const GL_SPIR_V_EXTENSIONS: u32 = 0x9553;
pub const GL_SRC1_ALPHA: u32 = 0x8589;
pub const GL_SRC1_COLOR: u32 = 0x88F9;
pub const GL_SRC_ALPHA: u32 = 0x0302;
pub const GL_SRC_ALPHA_SATURATE: u32 = 0x0308;
pub const GL_SRC_COLOR: u32 = 0x0300;
pub const GL_SRGB: u32 = 0x8C40;
pub const GL_SRGB8: u32 = 0x8C41;
pub const GL_SRGB8_ALPHA8: u32 = 0x8C43;
pub const GL_SRGB_ALPHA: u32 = 0x8C42;
pub const GL_SRGB_DECODE_ARB: u32 = 0x8299;
pub const GL_SRGB_READ: u32 = 0x8297;
pub const GL_SRGB_WRITE: u32 = 0x8298;
pub const GL_STACK_OVERFLOW: u32 = 0x0503;
pub const GL_STACK_UNDERFLOW: u32 = 0x0504;
pub const GL_STATIC_COPY: u32 = 0x88E6;
pub const GL_STATIC_COPY_ARB: u32 = 0x88E6;
pub const GL_STATIC_DRAW: u32 = 0x88E4;
pub const GL_STATIC_DRAW_ARB: u32 = 0x88E4;
pub const GL_STATIC_READ: u32 = 0x88E5;
pub const GL_STATIC_READ_ARB: u32 = 0x88E5;
pub const GL_STENCIL: u32 = 0x1802;
pub const GL_STENCIL_ATTACHMENT: u32 = 0x8D20;
pub const GL_STENCIL_ATTACHMENT_EXT: u32 = 0x8D20;
pub const GL_STENCIL_BACK_FAIL: u32 = 0x8801;
pub const GL_STENCIL_BACK_FUNC: u32 = 0x8800;
pub const GL_STENCIL_BACK_PASS_DEPTH_FAIL: u32 = 0x8802;
pub const GL_STENCIL_BACK_PASS_DEPTH_PASS: u32 = 0x8803;
pub const GL_STENCIL_BACK_REF: u32 = 0x8CA3;
pub const GL_STENCIL_BACK_VALUE_MASK: u32 = 0x8CA4;
pub const GL_STENCIL_BACK_WRITEMASK: u32 = 0x8CA5;
pub const GL_STENCIL_BUFFER_BIT: u32 = 0x00000400;
pub const GL_STENCIL_CLEAR_VALUE: u32 = 0x0B91;
pub const GL_STENCIL_COMPONENTS: u32 = 0x8285;
pub const GL_STENCIL_FAIL: u32 = 0x0B94;
pub const GL_STENCIL_FUNC: u32 = 0x0B92;
pub const GL_STENCIL_INDEX: u32 = 0x1901;
pub const GL_STENCIL_INDEX1: u32 = 0x8D46;
pub const GL_STENCIL_INDEX16: u32 = 0x8D49;
pub const GL_STENCIL_INDEX16_EXT: u32 = 0x8D49;
pub const GL_STENCIL_INDEX1_EXT: u32 = 0x8D46;
pub const GL_STENCIL_INDEX4: u32 = 0x8D47;
pub const GL_STENCIL_INDEX4_EXT: u32 = 0x8D47;
pub const GL_STENCIL_INDEX8: u32 = 0x8D48;
pub const GL_STENCIL_INDEX8_EXT: u32 = 0x8D48;
pub const GL_STENCIL_PASS_DEPTH_FAIL: u32 = 0x0B95;
pub const GL_STENCIL_PASS_DEPTH_PASS: u32 = 0x0B96;
pub const GL_STENCIL_REF: u32 = 0x0B97;
pub const GL_STENCIL_RENDERABLE: u32 = 0x8288;
pub const GL_STENCIL_TEST: u32 = 0x0B90;
pub const GL_STENCIL_VALUE_MASK: u32 = 0x0B93;
pub const GL_STENCIL_WRITEMASK: u32 = 0x0B98;
pub const GL_STEREO: u32 = 0x0C33;
pub const GL_STREAM_COPY: u32 = 0x88E2;
pub const GL_STREAM_COPY_ARB: u32 = 0x88E2;
pub const GL_STREAM_DRAW: u32 = 0x88E0;
pub const GL_STREAM_DRAW_ARB: u32 = 0x88E0;
pub const GL_STREAM_READ: u32 = 0x88E1;
pub const GL_STREAM_READ_ARB: u32 = 0x88E1;
pub const GL_SUBPIXEL_BITS: u32 = 0x0D50;
pub const GL_SYNC_CONDITION: u32 = 0x9113;
pub const GL_SYNC_FENCE: u32 = 0x9116;
pub const GL_SYNC_FLAGS: u32 = 0x9115;
pub const GL_SYNC_FLUSH_COMMANDS_BIT: u32 = 0x00000001;
pub const GL_SYNC_GPU_COMMANDS_COMPLETE: u32 = 0x9117;
pub const GL_SYNC_STATUS: u32 = 0x9114;
pub const GL_TESS_CONTROL_OUTPUT_VERTICES: u32 = 0x8E75;
pub const GL_TESS_CONTROL_SHADER: u32 = 0x8E88;
pub const GL_TESS_CONTROL_SHADER_BIT: u32 = 0x00000008;
pub const GL_TESS_CONTROL_SHADER_PATCHES: u32 = 0x82F1;
pub const GL_TESS_CONTROL_SHADER_PATCHES_ARB: u32 = 0x82F1;
pub const GL_TESS_CONTROL_SUBROUTINE: u32 = 0x92E9;
pub const GL_TESS_CONTROL_SUBROUTINE_UNIFORM: u32 = 0x92EF;
pub const GL_TESS_CONTROL_TEXTURE: u32 = 0x829C;
pub const GL_TESS_EVALUATION_SHADER: u32 = 0x8E87;
pub const GL_TESS_EVALUATION_SHADER_BIT: u32 = 0x00000010;
pub const GL_TESS_EVALUATION_SHADER_INVOCATIONS: u32 = 0x82F2;
pub const GL_TESS_EVALUATION_SHADER_INVOCATIONS_ARB: u32 = 0x82F2;
pub const GL_TESS_EVALUATION_SUBROUTINE: u32 = 0x92EA;
pub const GL_TESS_EVALUATION_SUBROUTINE_UNIFORM: u32 = 0x92F0;
pub const GL_TESS_EVALUATION_TEXTURE: u32 = 0x829D;
pub const GL_TESS_GEN_MODE: u32 = 0x8E76;
pub const GL_TESS_GEN_POINT_MODE: u32 = 0x8E79;
pub const GL_TESS_GEN_SPACING: u32 = 0x8E77;
pub const GL_TESS_GEN_VERTEX_ORDER: u32 = 0x8E78;
pub const GL_TEXTURE: u32 = 0x1702;
pub const GL_TEXTURE0: u32 = 0x84C0;
pub const GL_TEXTURE0_ARB: u32 = 0x84C0;
pub const GL_TEXTURE1: u32 = 0x84C1;
pub const GL_TEXTURE10: u32 = 0x84CA;
pub const GL_TEXTURE10_ARB: u32 = 0x84CA;
pub const GL_TEXTURE11: u32 = 0x84CB;
pub const GL_TEXTURE11_ARB: u32 = 0x84CB;
pub const GL_TEXTURE12: u32 = 0x84CC;
pub const GL_TEXTURE12_ARB: u32 = 0x84CC;
pub const GL_TEXTURE13: u32 = 0x84CD;
pub const GL_TEXTURE13_ARB: u32 = 0x84CD;
pub const GL_TEXTURE14: u32 = 0x84CE;
pub const GL_TEXTURE14_ARB: u32 = 0x84CE;
pub const GL_TEXTURE15: u32 = 0x84CF;
pub const GL_TEXTURE15_ARB: u32 = 0x84CF;
pub const GL_TEXTURE16: u32 = 0x84D0;
pub const GL_TEXTURE16_ARB: u32 = 0x84D0;
pub const GL_TEXTURE17: u32 = 0x84D1;
pub const GL_TEXTURE17_ARB: u32 = 0x84D1;
pub const GL_TEXTURE18: u32 = 0x84D2;
pub const GL_TEXTURE18_ARB: u32 = 0x84D2;
pub const GL_TEXTURE19: u32 = 0x84D3;
pub const GL_TEXTURE19_ARB: u32 = 0x84D3;
pub const GL_TEXTURE1_ARB: u32 = 0x84C1;
pub const GL_TEXTURE2: u32 = 0x84C2;
pub const GL_TEXTURE20: u32 = 0x84D4;
pub const GL_TEXTURE20_ARB: u32 = 0x84D4;
pub const GL_TEXTURE21: u32 = 0x84D5;
pub const GL_TEXTURE21_ARB: u32 = 0x84D5;
pub const GL_TEXTURE22: u32 = 0x84D6;
pub const GL_TEXTURE22_ARB: u32 = 0x84D6;
pub const GL_TEXTURE23: u32 = 0x84D7;
pub const GL_TEXTURE23_ARB: u32 = 0x84D7;
pub const GL_TEXTURE24: u32 = 0x84D8;
pub const GL_TEXTURE24_ARB: u32 = 0x84D8;
pub const GL_TEXTURE25: u32 = 0x84D9;
pub const GL_TEXTURE25_ARB: u32 = 0x84D9;
pub const GL_TEXTURE26: u32 = 0x84DA;
pub const GL_TEXTURE26_ARB: u32 = 0x84DA;
pub const GL_TEXTURE27: u32 = 0x84DB;
pub const GL_TEXTURE27_ARB: u32 = 0x84DB;
pub const GL_TEXTURE28: u32 = 0x84DC;
pub const GL_TEXTURE28_ARB: u32 = 0x84DC;
pub const GL_TEXTURE29: u32 = 0x84DD;
pub const GL_TEXTURE29_ARB: u32 = 0x84DD;
pub const GL_TEXTURE2_ARB: u32 = 0x84C2;
pub const GL_TEXTURE3: u32 = 0x84C3;
pub const GL_TEXTURE30: u32 = 0x84DE;
pub const GL_TEXTURE30_ARB: u32 = 0x84DE;
pub const GL_TEXTURE31: u32 = 0x84DF;
pub const GL_TEXTURE31_ARB: u32 = 0x84DF;
pub const GL_TEXTURE3_ARB: u32 = 0x84C3;
pub const GL_TEXTURE4: u32 = 0x84C4;
pub const GL_TEXTURE4_ARB: u32 = 0x84C4;
pub const GL_TEXTURE5: u32 = 0x84C5;
pub const GL_TEXTURE5_ARB: u32 = 0x84C5;
pub const GL_TEXTURE6: u32 = 0x84C6;
pub const GL_TEXTURE6_ARB: u32 = 0x84C6;
pub const GL_TEXTURE7: u32 = 0x84C7;
pub const GL_TEXTURE7_ARB: u32 = 0x84C7;
pub const GL_TEXTURE8: u32 = 0x84C8;
pub const GL_TEXTURE8_ARB: u32 = 0x84C8;
pub const GL_TEXTURE9: u32 = 0x84C9;
pub const GL_TEXTURE9_ARB: u32 = 0x84C9;
pub const GL_TEXTURE_1D: u32 = 0x0DE0;
pub const GL_TEXTURE_1D_ARRAY: u32 = 0x8C18;
pub const GL_TEXTURE_2D: u32 = 0x0DE1;
pub const GL_TEXTURE_2D_ARRAY: u32 = 0x8C1A;
pub const GL_TEXTURE_2D_MULTISAMPLE: u32 = 0x9100;
pub const GL_TEXTURE_2D_MULTISAMPLE_ARRAY: u32 = 0x9102;
pub const GL_TEXTURE_3D: u32 = 0x806F;
pub const GL_TEXTURE_ALPHA_SIZE: u32 = 0x805F;
pub const GL_TEXTURE_ALPHA_TYPE: u32 = 0x8C13;
pub const GL_TEXTURE_ALPHA_TYPE_ARB: u32 = 0x8C13;
pub const GL_TEXTURE_BASE_LEVEL: u32 = 0x813C;
pub const GL_TEXTURE_BINDING_1D: u32 = 0x8068;
pub const GL_TEXTURE_BINDING_1D_ARRAY: u32 = 0x8C1C;
pub const GL_TEXTURE_BINDING_2D: u32 = 0x8069;
pub const GL_TEXTURE_BINDING_2D_ARRAY: u32 = 0x8C1D;
pub const GL_TEXTURE_BINDING_2D_MULTISAMPLE: u32 = 0x9104;
pub const GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY: u32 = 0x9105;
pub const GL_TEXTURE_BINDING_3D: u32 = 0x806A;
pub const GL_TEXTURE_BINDING_BUFFER: u32 = 0x8C2C;
pub const GL_TEXTURE_BINDING_CUBE_MAP: u32 = 0x8514;
pub const GL_TEXTURE_BINDING_CUBE_MAP_ARB: u32 = 0x8514;
pub const GL_TEXTURE_BINDING_CUBE_MAP_ARRAY: u32 = 0x900A;
pub const GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB: u32 = 0x900A;
pub const GL_TEXTURE_BINDING_RECTANGLE: u32 = 0x84F6;
pub const GL_TEXTURE_BLUE_SIZE: u32 = 0x805E;
pub const GL_TEXTURE_BLUE_TYPE: u32 = 0x8C12;
pub const GL_TEXTURE_BLUE_TYPE_ARB: u32 = 0x8C12;
pub const GL_TEXTURE_BORDER_COLOR: u32 = 0x1004;
pub const GL_TEXTURE_BUFFER: u32 = 0x8C2A;
pub const GL_TEXTURE_BUFFER_DATA_STORE_BINDING: u32 = 0x8C2D;
pub const GL_TEXTURE_BUFFER_OFFSET: u32 = 0x919D;
pub const GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT: u32 = 0x919F;
pub const GL_TEXTURE_BUFFER_SIZE: u32 = 0x919E;
pub const GL_TEXTURE_COMPARE_FUNC: u32 = 0x884D;
pub const GL_TEXTURE_COMPARE_MODE: u32 = 0x884C;
pub const GL_TEXTURE_COMPRESSED: u32 = 0x86A1;
pub const GL_TEXTURE_COMPRESSED_ARB: u32 = 0x86A1;
pub const GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT: u32 = 0x82B2;
pub const GL_TEXTURE_COMPRESSED_BLOCK_SIZE: u32 = 0x82B3;
pub const GL_TEXTURE_COMPRESSED_BLOCK_WIDTH: u32 = 0x82B1;
pub const GL_TEXTURE_COMPRESSED_IMAGE_SIZE: u32 = 0x86A0;
pub const GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB: u32 = 0x86A0;
pub const GL_TEXTURE_COMPRESSION_HINT: u32 = 0x84EF;
pub const GL_TEXTURE_COMPRESSION_HINT_ARB: u32 = 0x84EF;
pub const GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB: u32 = 0x889A;
pub const GL_TEXTURE_CUBE_MAP: u32 = 0x8513;
pub const GL_TEXTURE_CUBE_MAP_ARB: u32 = 0x8513;
pub const GL_TEXTURE_CUBE_MAP_ARRAY: u32 = 0x9009;
pub const GL_TEXTURE_CUBE_MAP_ARRAY_ARB: u32 = 0x9009;
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_X: u32 = 0x8516;
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB: u32 = 0x8516;
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Y: u32 = 0x8518;
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB: u32 = 0x8518;
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Z: u32 = 0x851A;
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB: u32 = 0x851A;
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_X: u32 = 0x8515;
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB: u32 = 0x8515;
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Y: u32 = 0x8517;
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB: u32 = 0x8517;
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Z: u32 = 0x8519;
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB: u32 = 0x8519;
pub const GL_TEXTURE_CUBE_MAP_SEAMLESS: u32 = 0x884F;
pub const GL_TEXTURE_DEPTH: u32 = 0x8071;
pub const GL_TEXTURE_DEPTH_SIZE: u32 = 0x884A;
pub const GL_TEXTURE_DEPTH_SIZE_ARB: u32 = 0x884A;
pub const GL_TEXTURE_DEPTH_TYPE: u32 = 0x8C16;
pub const GL_TEXTURE_DEPTH_TYPE_ARB: u32 = 0x8C16;
pub const GL_TEXTURE_FETCH_BARRIER_BIT: u32 = 0x00000008;
pub const GL_TEXTURE_FIXED_SAMPLE_LOCATIONS: u32 = 0x9107;
pub const GL_TEXTURE_GATHER: u32 = 0x82A2;
pub const GL_TEXTURE_GATHER_SHADOW: u32 = 0x82A3;
pub const GL_TEXTURE_GREEN_SIZE: u32 = 0x805D;
pub const GL_TEXTURE_GREEN_TYPE: u32 = 0x8C11;
pub const GL_TEXTURE_GREEN_TYPE_ARB: u32 = 0x8C11;
pub const GL_TEXTURE_HEIGHT: u32 = 0x1001;
pub const GL_TEXTURE_IMAGE_FORMAT: u32 = 0x828F;
pub const GL_TEXTURE_IMAGE_TYPE: u32 = 0x8290;
pub const GL_TEXTURE_IMMUTABLE_FORMAT: u32 = 0x912F;
pub const GL_TEXTURE_IMMUTABLE_LEVELS: u32 = 0x82DF;
pub const GL_TEXTURE_INTENSITY_TYPE_ARB: u32 = 0x8C15;
pub const GL_TEXTURE_INTERNAL_FORMAT: u32 = 0x1003;
pub const GL_TEXTURE_LOD_BIAS: u32 = 0x8501;
pub const GL_TEXTURE_LUMINANCE_TYPE_ARB: u32 = 0x8C14;
pub const GL_TEXTURE_MAG_FILTER: u32 = 0x2800;
pub const GL_TEXTURE_MAX_ANISOTROPY: u32 = 0x84FE;
pub const GL_TEXTURE_MAX_ANISOTROPY_EXT: u32 = 0x84FE;
pub const GL_TEXTURE_MAX_LEVEL: u32 = 0x813D;
pub const GL_TEXTURE_MAX_LOD: u32 = 0x813B;
pub const GL_TEXTURE_MIN_FILTER: u32 = 0x2801;
pub const GL_TEXTURE_MIN_LOD: u32 = 0x813A;
pub const GL_TEXTURE_RECTANGLE: u32 = 0x84F5;
pub const GL_TEXTURE_REDUCTION_MODE_ARB: u32 = 0x9366;
pub const GL_TEXTURE_RED_SIZE: u32 = 0x805C;
pub const GL_TEXTURE_RED_TYPE: u32 = 0x8C10;
pub const GL_TEXTURE_RED_TYPE_ARB: u32 = 0x8C10;
pub const GL_TEXTURE_SAMPLES: u32 = 0x9106;
pub const GL_TEXTURE_SHADOW: u32 = 0x82A1;
pub const GL_TEXTURE_SHARED_SIZE: u32 = 0x8C3F;
pub const GL_TEXTURE_STENCIL_SIZE: u32 = 0x88F1;
pub const GL_TEXTURE_SWIZZLE_A: u32 = 0x8E45;
pub const GL_TEXTURE_SWIZZLE_B: u32 = 0x8E44;
pub const GL_TEXTURE_SWIZZLE_G: u32 = 0x8E43;
pub const GL_TEXTURE_SWIZZLE_R: u32 = 0x8E42;
pub const GL_TEXTURE_SWIZZLE_RGBA: u32 = 0x8E46;
pub const GL_TEXTURE_TARGET: u32 = 0x1006;
pub const GL_TEXTURE_UPDATE_BARRIER_BIT: u32 = 0x00000100;
pub const GL_TEXTURE_VIEW: u32 = 0x82B5;
pub const GL_TEXTURE_VIEW_MIN_LAYER: u32 = 0x82DD;
pub const GL_TEXTURE_VIEW_MIN_LEVEL: u32 = 0x82DB;
pub const GL_TEXTURE_VIEW_NUM_LAYERS: u32 = 0x82DE;
pub const GL_TEXTURE_VIEW_NUM_LEVELS: u32 = 0x82DC;
pub const GL_TEXTURE_WIDTH: u32 = 0x1000;
pub const GL_TEXTURE_WRAP_R: u32 = 0x8072;
pub const GL_TEXTURE_WRAP_S: u32 = 0x2802;
pub const GL_TEXTURE_WRAP_T: u32 = 0x2803;
pub const GL_TIMEOUT_EXPIRED: u32 = 0x911B;
pub const GL_TIMEOUT_IGNORED: u32 = 0xFFFFFFFFFFFFFFFF;
pub const GL_TIMESTAMP: u32 = 0x8E28;
pub const GL_TIME_ELAPSED: u32 = 0x88BF;
pub const GL_TOP_LEVEL_ARRAY_SIZE: u32 = 0x930C;
pub const GL_TOP_LEVEL_ARRAY_STRIDE: u32 = 0x930D;
pub const GL_TRANSFORM_FEEDBACK: u32 = 0x8E22;
pub const GL_TRANSFORM_FEEDBACK_ACTIVE: u32 = 0x8E24;
pub const GL_TRANSFORM_FEEDBACK_BARRIER_BIT: u32 = 0x00000800;
pub const GL_TRANSFORM_FEEDBACK_BINDING: u32 = 0x8E25;
pub const GL_TRANSFORM_FEEDBACK_BUFFER: u32 = 0x8C8E;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE: u32 = 0x8E24;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_BINDING: u32 = 0x8C8F;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_INDEX: u32 = 0x934B;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_MODE: u32 = 0x8C7F;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED: u32 = 0x8E23;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_SIZE: u32 = 0x8C85;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_START: u32 = 0x8C84;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE: u32 = 0x934C;
pub const GL_TRANSFORM_FEEDBACK_PAUSED: u32 = 0x8E23;
pub const GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN: u32 = 0x8C88;
pub const GL_TRANSFORM_FEEDBACK_VARYING: u32 = 0x92F4;
pub const GL_TRANSFORM_FEEDBACK_VARYINGS: u32 = 0x8C83;
pub const GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH: u32 = 0x8C76;
pub const GL_TRANSPOSE_COLOR_MATRIX_ARB: u32 = 0x84E6;
pub const GL_TRANSPOSE_CURRENT_MATRIX_ARB: u32 = 0x88B7;
pub const GL_TRANSPOSE_MODELVIEW_MATRIX_ARB: u32 = 0x84E3;
pub const GL_TRANSPOSE_PROJECTION_MATRIX_ARB: u32 = 0x84E4;
pub const GL_TRANSPOSE_TEXTURE_MATRIX_ARB: u32 = 0x84E5;
pub const GL_TRIANGLES: u32 = 0x0004;
pub const GL_TRIANGLES_ADJACENCY: u32 = 0x000C;
pub const GL_TRIANGLES_ADJACENCY_ARB: u32 = 0x000C;
pub const GL_TRIANGLE_FAN: u32 = 0x0006;
pub const GL_TRIANGLE_STRIP: u32 = 0x0005;
pub const GL_TRIANGLE_STRIP_ADJACENCY: u32 = 0x000D;
pub const GL_TRIANGLE_STRIP_ADJACENCY_ARB: u32 = 0x000D;
pub const GL_TRUE: u32 = 1;
pub const GL_TYPE: u32 = 0x92FA;
pub const GL_UNDEFINED_VERTEX: u32 = 0x8260;
pub const GL_UNIFORM: u32 = 0x92E1;
pub const GL_UNIFORM_ARRAY_STRIDE: u32 = 0x8A3C;
pub const GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX: u32 = 0x92DA;
pub const GL_UNIFORM_BARRIER_BIT: u32 = 0x00000004;
pub const GL_UNIFORM_BLOCK: u32 = 0x92E2;
pub const GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS: u32 = 0x8A42;
pub const GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES: u32 = 0x8A43;
pub const GL_UNIFORM_BLOCK_BINDING: u32 = 0x8A3F;
pub const GL_UNIFORM_BLOCK_DATA_SIZE: u32 = 0x8A40;
pub const GL_UNIFORM_BLOCK_INDEX: u32 = 0x8A3A;
pub const GL_UNIFORM_BLOCK_NAME_LENGTH: u32 = 0x8A41;
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER: u32 = 0x90EC;
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER: u32 = 0x8A46;
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER: u32 = 0x8A45;
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER: u32 = 0x84F0;
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER: u32 = 0x84F1;
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER: u32 = 0x8A44;
pub const GL_UNIFORM_BUFFER: u32 = 0x8A11;
pub const GL_UNIFORM_BUFFER_BINDING: u32 = 0x8A28;
pub const GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT: u32 = 0x8A34;
pub const GL_UNIFORM_BUFFER_SIZE: u32 = 0x8A2A;
pub const GL_UNIFORM_BUFFER_START: u32 = 0x8A29;
pub const GL_UNIFORM_IS_ROW_MAJOR: u32 = 0x8A3E;
pub const GL_UNIFORM_MATRIX_STRIDE: u32 = 0x8A3D;
pub const GL_UNIFORM_NAME_LENGTH: u32 = 0x8A39;
pub const GL_UNIFORM_OFFSET: u32 = 0x8A3B;
pub const GL_UNIFORM_SIZE: u32 = 0x8A38;
pub const GL_UNIFORM_TYPE: u32 = 0x8A37;
pub const GL_UNPACK_ALIGNMENT: u32 = 0x0CF5;
pub const GL_UNPACK_COMPRESSED_BLOCK_DEPTH: u32 = 0x9129;
pub const GL_UNPACK_COMPRESSED_BLOCK_HEIGHT: u32 = 0x9128;
pub const GL_UNPACK_COMPRESSED_BLOCK_SIZE: u32 = 0x912A;
pub const GL_UNPACK_COMPRESSED_BLOCK_WIDTH: u32 = 0x9127;
pub const GL_UNPACK_IMAGE_HEIGHT: u32 = 0x806E;
pub const GL_UNPACK_LSB_FIRST: u32 = 0x0CF1;
pub const GL_UNPACK_ROW_LENGTH: u32 = 0x0CF2;
pub const GL_UNPACK_SKIP_IMAGES: u32 = 0x806D;
pub const GL_UNPACK_SKIP_PIXELS: u32 = 0x0CF4;
pub const GL_UNPACK_SKIP_ROWS: u32 = 0x0CF3;
pub const GL_UNPACK_SWAP_BYTES: u32 = 0x0CF0;
pub const GL_UNSIGNALED: u32 = 0x9118;
pub const GL_UNSIGNED_BYTE: u32 = 0x1401;
pub const GL_UNSIGNED_BYTE_2_3_3_REV: u32 = 0x8362;
pub const GL_UNSIGNED_BYTE_3_3_2: u32 = 0x8032;
pub const GL_UNSIGNED_INT: u32 = 0x1405;
pub const GL_UNSIGNED_INT64_ARB: u32 = 0x140F;
pub const GL_UNSIGNED_INT64_VEC2_ARB: u32 = 0x8FF5;
pub const GL_UNSIGNED_INT64_VEC3_ARB: u32 = 0x8FF6;
pub const GL_UNSIGNED_INT64_VEC4_ARB: u32 = 0x8FF7;
pub const GL_UNSIGNED_INT_10F_11F_11F_REV: u32 = 0x8C3B;
pub const GL_UNSIGNED_INT_10_10_10_2: u32 = 0x8036;
pub const GL_UNSIGNED_INT_24_8: u32 = 0x84FA;
pub const GL_UNSIGNED_INT_2_10_10_10_REV: u32 = 0x8368;
pub const GL_UNSIGNED_INT_5_9_9_9_REV: u32 = 0x8C3E;
pub const GL_UNSIGNED_INT_8_8_8_8: u32 = 0x8035;
pub const GL_UNSIGNED_INT_8_8_8_8_REV: u32 = 0x8367;
pub const GL_UNSIGNED_INT_ATOMIC_COUNTER: u32 = 0x92DB;
pub const GL_UNSIGNED_INT_IMAGE_1D: u32 = 0x9062;
pub const GL_UNSIGNED_INT_IMAGE_1D_ARRAY: u32 = 0x9068;
pub const GL_UNSIGNED_INT_IMAGE_2D: u32 = 0x9063;
pub const GL_UNSIGNED_INT_IMAGE_2D_ARRAY: u32 = 0x9069;
pub const GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE: u32 = 0x906B;
pub const GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY: u32 = 0x906C;
pub const GL_UNSIGNED_INT_IMAGE_2D_RECT: u32 = 0x9065;
pub const GL_UNSIGNED_INT_IMAGE_3D: u32 = 0x9064;
pub const GL_UNSIGNED_INT_IMAGE_BUFFER: u32 = 0x9067;
pub const GL_UNSIGNED_INT_IMAGE_CUBE: u32 = 0x9066;
pub const GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY: u32 = 0x906A;
pub const GL_UNSIGNED_INT_SAMPLER_1D: u32 = 0x8DD1;
pub const GL_UNSIGNED_INT_SAMPLER_1D_ARRAY: u32 = 0x8DD6;
pub const GL_UNSIGNED_INT_SAMPLER_2D: u32 = 0x8DD2;
pub const GL_UNSIGNED_INT_SAMPLER_2D_ARRAY: u32 = 0x8DD7;
pub const GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE: u32 = 0x910A;
pub const GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY: u32 = 0x910D;
pub const GL_UNSIGNED_INT_SAMPLER_2D_RECT: u32 = 0x8DD5;
pub const GL_UNSIGNED_INT_SAMPLER_3D: u32 = 0x8DD3;
pub const GL_UNSIGNED_INT_SAMPLER_BUFFER: u32 = 0x8DD8;
pub const GL_UNSIGNED_INT_SAMPLER_CUBE: u32 = 0x8DD4;
pub const GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY: u32 = 0x900F;
pub const GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB: u32 = 0x900F;
pub const GL_UNSIGNED_INT_VEC2: u32 = 0x8DC6;
pub const GL_UNSIGNED_INT_VEC3: u32 = 0x8DC7;
pub const GL_UNSIGNED_INT_VEC4: u32 = 0x8DC8;
pub const GL_UNSIGNED_NORMALIZED: u32 = 0x8C17;
pub const GL_UNSIGNED_NORMALIZED_ARB: u32 = 0x8C17;
pub const GL_UNSIGNED_SHORT: u32 = 0x1403;
pub const GL_UNSIGNED_SHORT_1_5_5_5_REV: u32 = 0x8366;
pub const GL_UNSIGNED_SHORT_4_4_4_4: u32 = 0x8033;
pub const GL_UNSIGNED_SHORT_4_4_4_4_REV: u32 = 0x8365;
pub const GL_UNSIGNED_SHORT_5_5_5_1: u32 = 0x8034;
pub const GL_UNSIGNED_SHORT_5_6_5: u32 = 0x8363;
pub const GL_UNSIGNED_SHORT_5_6_5_REV: u32 = 0x8364;
pub const GL_UPPER_LEFT: u32 = 0x8CA2;
pub const GL_VALIDATE_STATUS: u32 = 0x8B83;
pub const GL_VENDOR: u32 = 0x1F00;
pub const GL_VERSION: u32 = 0x1F02;
pub const GL_VERTEX_ARRAY: u32 = 0x8074;
pub const GL_VERTEX_ARRAY_BINDING: u32 = 0x85B5;
pub const GL_VERTEX_ARRAY_BUFFER_BINDING_ARB: u32 = 0x8896;
pub const GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT: u32 = 0x00000001;
pub const GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: u32 = 0x889F;
pub const GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB: u32 = 0x889F;
pub const GL_VERTEX_ATTRIB_ARRAY_DIVISOR: u32 = 0x88FE;
pub const GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB: u32 = 0x88FE;
pub const GL_VERTEX_ATTRIB_ARRAY_ENABLED: u32 = 0x8622;
pub const GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB: u32 = 0x8622;
pub const GL_VERTEX_ATTRIB_ARRAY_INTEGER: u32 = 0x88FD;
pub const GL_VERTEX_ATTRIB_ARRAY_LONG: u32 = 0x874E;
pub const GL_VERTEX_ATTRIB_ARRAY_NORMALIZED: u32 = 0x886A;
pub const GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB: u32 = 0x886A;
pub const GL_VERTEX_ATTRIB_ARRAY_POINTER: u32 = 0x8645;
pub const GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB: u32 = 0x8645;
pub const GL_VERTEX_ATTRIB_ARRAY_SIZE: u32 = 0x8623;
pub const GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB: u32 = 0x8623;
pub const GL_VERTEX_ATTRIB_ARRAY_STRIDE: u32 = 0x8624;
pub const GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB: u32 = 0x8624;
pub const GL_VERTEX_ATTRIB_ARRAY_TYPE: u32 = 0x8625;
pub const GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB: u32 = 0x8625;
pub const GL_VERTEX_ATTRIB_BINDING: u32 = 0x82D4;
pub const GL_VERTEX_ATTRIB_RELATIVE_OFFSET: u32 = 0x82D5;
pub const GL_VERTEX_BINDING_BUFFER: u32 = 0x8F4F;
pub const GL_VERTEX_BINDING_DIVISOR: u32 = 0x82D6;
pub const GL_VERTEX_BINDING_OFFSET: u32 = 0x82D7;
pub const GL_VERTEX_BINDING_STRIDE: u32 = 0x82D8;
pub const GL_VERTEX_PROGRAM_ARB: u32 = 0x8620;
pub const GL_VERTEX_PROGRAM_POINT_SIZE: u32 = 0x8642;
pub const GL_VERTEX_PROGRAM_POINT_SIZE_ARB: u32 = 0x8642;
pub const GL_VERTEX_PROGRAM_TWO_SIDE_ARB: u32 = 0x8643;
pub const GL_VERTEX_SHADER: u32 = 0x8B31;
pub const GL_VERTEX_SHADER_ARB: u32 = 0x8B31;
pub const GL_VERTEX_SHADER_BIT: u32 = 0x00000001;
pub const GL_VERTEX_SHADER_INVOCATIONS: u32 = 0x82F0;
pub const GL_VERTEX_SHADER_INVOCATIONS_ARB: u32 = 0x82F0;
pub const GL_VERTEX_SUBROUTINE: u32 = 0x92E8;
pub const GL_VERTEX_SUBROUTINE_UNIFORM: u32 = 0x92EE;
pub const GL_VERTEX_TEXTURE: u32 = 0x829B;
pub const GL_VERTICES_SUBMITTED: u32 = 0x82EE;
pub const GL_VERTICES_SUBMITTED_ARB: u32 = 0x82EE;
pub const GL_VIEWPORT: u32 = 0x0BA2;
pub const GL_VIEWPORT_BOUNDS_RANGE: u32 = 0x825D;
pub const GL_VIEWPORT_INDEX_PROVOKING_VERTEX: u32 = 0x825F;
pub const GL_VIEWPORT_SUBPIXEL_BITS: u32 = 0x825C;
pub const GL_VIEW_CLASS_128_BITS: u32 = 0x82C4;
pub const GL_VIEW_CLASS_16_BITS: u32 = 0x82CA;
pub const GL_VIEW_CLASS_24_BITS: u32 = 0x82C9;
pub const GL_VIEW_CLASS_32_BITS: u32 = 0x82C8;
pub const GL_VIEW_CLASS_48_BITS: u32 = 0x82C7;
pub const GL_VIEW_CLASS_64_BITS: u32 = 0x82C6;
pub const GL_VIEW_CLASS_8_BITS: u32 = 0x82CB;
pub const GL_VIEW_CLASS_96_BITS: u32 = 0x82C5;
pub const GL_VIEW_CLASS_ASTC_10x10_RGBA: u32 = 0x9393;
pub const GL_VIEW_CLASS_ASTC_10x5_RGBA: u32 = 0x9390;
pub const GL_VIEW_CLASS_ASTC_10x6_RGBA: u32 = 0x9391;
pub const GL_VIEW_CLASS_ASTC_10x8_RGBA: u32 = 0x9392;
pub const GL_VIEW_CLASS_ASTC_12x10_RGBA: u32 = 0x9394;
pub const GL_VIEW_CLASS_ASTC_12x12_RGBA: u32 = 0x9395;
pub const GL_VIEW_CLASS_ASTC_4x4_RGBA: u32 = 0x9388;
pub const GL_VIEW_CLASS_ASTC_5x4_RGBA: u32 = 0x9389;
pub const GL_VIEW_CLASS_ASTC_5x5_RGBA: u32 = 0x938A;
pub const GL_VIEW_CLASS_ASTC_6x5_RGBA: u32 = 0x938B;
pub const GL_VIEW_CLASS_ASTC_6x6_RGBA: u32 = 0x938C;
pub const GL_VIEW_CLASS_ASTC_8x5_RGBA: u32 = 0x938D;
pub const GL_VIEW_CLASS_ASTC_8x6_RGBA: u32 = 0x938E;
pub const GL_VIEW_CLASS_ASTC_8x8_RGBA: u32 = 0x938F;
pub const GL_VIEW_CLASS_BPTC_FLOAT: u32 = 0x82D3;
pub const GL_VIEW_CLASS_BPTC_UNORM: u32 = 0x82D2;
pub const GL_VIEW_CLASS_EAC_R11: u32 = 0x9383;
pub const GL_VIEW_CLASS_EAC_RG11: u32 = 0x9384;
pub const GL_VIEW_CLASS_ETC2_EAC_RGBA: u32 = 0x9387;
pub const GL_VIEW_CLASS_ETC2_RGB: u32 = 0x9385;
pub const GL_VIEW_CLASS_ETC2_RGBA: u32 = 0x9386;
pub const GL_VIEW_CLASS_RGTC1_RED: u32 = 0x82D0;
pub const GL_VIEW_CLASS_RGTC2_RG: u32 = 0x82D1;
pub const GL_VIEW_CLASS_S3TC_DXT1_RGB: u32 = 0x82CC;
pub const GL_VIEW_CLASS_S3TC_DXT1_RGBA: u32 = 0x82CD;
pub const GL_VIEW_CLASS_S3TC_DXT3_RGBA: u32 = 0x82CE;
pub const GL_VIEW_CLASS_S3TC_DXT5_RGBA: u32 = 0x82CF;
pub const GL_VIEW_COMPATIBILITY_CLASS: u32 = 0x82B6;
pub const GL_WAIT_FAILED: u32 = 0x911D;
pub const GL_WEIGHTED_AVERAGE_ARB: u32 = 0x9367;
pub const GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB: u32 = 0x889E;
pub const GL_WRITE_ONLY: u32 = 0x88B9;
pub const GL_WRITE_ONLY_ARB: u32 = 0x88B9;
pub const GL_XOR: u32 = 0x1506;
pub const GL_ZERO: u32 = 0;

unsafe extern "C" {
    pub fn glad_glAccumxOES(op: GLenum, value: GLfixed);
    pub fn glad_glActiveShaderProgram(pipeline: GLuint, program: GLuint);
    pub fn glad_glActiveTexture(texture: GLenum);
    pub fn glad_glActiveTextureARB(texture: GLenum);
    pub fn glad_glAlphaFuncxOES(func: GLenum, r#ref: GLfixed);
    pub fn glad_glAttachObjectARB(containerObj: GLhandleARB, obj: GLhandleARB);
    pub fn glad_glAttachShader(program: GLuint, shader: GLuint);
    pub fn glad_glBeginConditionalRender(id: GLuint, mode: GLenum);
    pub fn glad_glBeginQuery(target: GLenum, id: GLuint);
    pub fn glad_glBeginQueryARB(target: GLenum, id: GLuint);
    pub fn glad_glBeginQueryIndexed(target: GLenum, index: GLuint, id: GLuint);
    pub fn glad_glBeginTransformFeedback(primitiveMode: GLenum);
    pub fn glad_glBindAttribLocation(program: GLuint, index: GLuint, name: *const GLchar);
    pub fn glad_glBindAttribLocationARB(programObj: GLhandleARB, index: GLuint, name: *const GLcharARB);
    pub fn glad_glBindBuffer(target: GLenum, buffer: GLuint);
    pub fn glad_glBindBufferARB(target: GLenum, buffer: GLuint);
    pub fn glad_glBindBufferBase(target: GLenum, index: GLuint, buffer: GLuint);
    pub fn glad_glBindBufferRange(target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr);
    pub fn glad_glBindBuffersBase(target: GLenum, first: GLuint, count: GLsizei, buffers: *const GLuint);
    pub fn glad_glBindBuffersRange(target: GLenum, first: GLuint, count: GLsizei, buffers: *const GLuint, offsets: *const GLintptr, sizes: *const GLsizeiptr);
    pub fn glad_glBindFragDataLocation(program: GLuint, color: GLuint, name: *const GLchar);
    pub fn glad_glBindFragDataLocationIndexed(program: GLuint, colorNumber: GLuint, index: GLuint, name: *const GLchar);
    pub fn glad_glBindFramebuffer(target: GLenum, framebuffer: GLuint);
    pub fn glad_glBindFramebufferEXT(target: GLenum, framebuffer: GLuint);
    pub fn glad_glBindImageTexture(unit: GLuint, texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, access: GLenum, format: GLenum);
    pub fn glad_glBindImageTextures(first: GLuint, count: GLsizei, textures: *const GLuint);
    pub fn glad_glBindProgramARB(target: GLenum, program: GLuint);
    pub fn glad_glBindProgramPipeline(pipeline: GLuint);
    pub fn glad_glBindRenderbuffer(target: GLenum, renderbuffer: GLuint);
    pub fn glad_glBindRenderbufferEXT(target: GLenum, renderbuffer: GLuint);
    pub fn glad_glBindSampler(unit: GLuint, sampler: GLuint);
    pub fn glad_glBindSamplers(first: GLuint, count: GLsizei, samplers: *const GLuint);
    pub fn glad_glBindTexture(target: GLenum, texture: GLuint);
    pub fn glad_glBindTextureUnit(unit: GLuint, texture: GLuint);
    pub fn glad_glBindTextures(first: GLuint, count: GLsizei, textures: *const GLuint);
    pub fn glad_glBindTransformFeedback(target: GLenum, id: GLuint);
    pub fn glad_glBindVertexArray(array: GLuint);
    pub fn glad_glBindVertexBuffer(bindingindex: GLuint, buffer: GLuint, offset: GLintptr, stride: GLsizei);
    pub fn glad_glBindVertexBuffers(first: GLuint, count: GLsizei, buffers: *const GLuint, offsets: *const GLintptr, strides: *const GLsizei);
    pub fn glad_glBitmapxOES(width: GLsizei, height: GLsizei, xorig: GLfixed, yorig: GLfixed, xmove: GLfixed, ymove: GLfixed, bitmap: *const GLubyte);
    pub fn glad_glBlendColor(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat);
    pub fn glad_glBlendColorxOES(red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed);
    pub fn glad_glBlendEquation(mode: GLenum);
    pub fn glad_glBlendEquationSeparate(modeRGB: GLenum, modeAlpha: GLenum);
    pub fn glad_glBlendEquationSeparatei(buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum);
    pub fn glad_glBlendEquationSeparateiARB(buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum);
    pub fn glad_glBlendEquationi(buf: GLuint, mode: GLenum);
    pub fn glad_glBlendEquationiARB(buf: GLuint, mode: GLenum);
    pub fn glad_glBlendFunc(sfactor: GLenum, dfactor: GLenum);
    pub fn glad_glBlendFuncSeparate(sfactorRGB: GLenum, dfactorRGB: GLenum, sfactorAlpha: GLenum, dfactorAlpha: GLenum);
    pub fn glad_glBlendFuncSeparatei(buf: GLuint, srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum);
    pub fn glad_glBlendFuncSeparateiARB(buf: GLuint, srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum);
    pub fn glad_glBlendFunci(buf: GLuint, src: GLenum, dst: GLenum);
    pub fn glad_glBlendFunciARB(buf: GLuint, src: GLenum, dst: GLenum);
    pub fn glad_glBlitFramebuffer(srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum);
    pub fn glad_glBlitFramebufferEXT(srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum);
    pub fn glad_glBlitNamedFramebuffer(readFramebuffer: GLuint, drawFramebuffer: GLuint, srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum);
    pub fn glad_glBufferData(target: GLenum, size: GLsizeiptr, data: *const c_void, usage: GLenum);
    pub fn glad_glBufferDataARB(target: GLenum, size: GLsizeiptrARB, data: *const c_void, usage: GLenum);
    pub fn glad_glBufferStorage(target: GLenum, size: GLsizeiptr, data: *const c_void, flags: GLbitfield);
    pub fn glad_glBufferSubData(target: GLenum, offset: GLintptr, size: GLsizeiptr, data: *const c_void);
    pub fn glad_glBufferSubDataARB(target: GLenum, offset: GLintptrARB, size: GLsizeiptrARB, data: *const c_void);
    pub fn glad_glCheckFramebufferStatus(target: GLenum) -> GLenum;
    pub fn glad_glCheckFramebufferStatusEXT(target: GLenum) -> GLenum;
    pub fn glad_glCheckNamedFramebufferStatus(framebuffer: GLuint, target: GLenum) -> GLenum;
    pub fn glad_glClampColor(target: GLenum, clamp: GLenum);
    pub fn glad_glClampColorARB(target: GLenum, clamp: GLenum);
    pub fn glad_glClear(mask: GLbitfield);
    pub fn glad_glClearAccumxOES(red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed);
    pub fn glad_glClearBufferData(target: GLenum, internalformat: GLenum, format: GLenum, r#type: GLenum, data: *const c_void);
    pub fn glad_glClearBufferSubData(target: GLenum, internalformat: GLenum, offset: GLintptr, size: GLsizeiptr, format: GLenum, r#type: GLenum, data: *const c_void);
    pub fn glad_glClearBufferfi(buffer: GLenum, drawbuffer: GLint, depth: GLfloat, stencil: GLint);
    pub fn glad_glClearBufferfv(buffer: GLenum, drawbuffer: GLint, value: *const GLfloat);
    pub fn glad_glClearBufferiv(buffer: GLenum, drawbuffer: GLint, value: *const GLint);
    pub fn glad_glClearBufferuiv(buffer: GLenum, drawbuffer: GLint, value: *const GLuint);
    pub fn glad_glClearColor(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat);
    pub fn glad_glClearColorxOES(red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed);
    pub fn glad_glClearDepth(depth: GLdouble);
    pub fn glad_glClearDepthf(d: GLfloat);
    pub fn glad_glClearDepthxOES(depth: GLfixed);
    pub fn glad_glClearNamedBufferData(buffer: GLuint, internalformat: GLenum, format: GLenum, r#type: GLenum, data: *const c_void);
    pub fn glad_glClearNamedBufferSubData(buffer: GLuint, internalformat: GLenum, offset: GLintptr, size: GLsizeiptr, format: GLenum, r#type: GLenum, data: *const c_void);
    pub fn glad_glClearNamedFramebufferfi(framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, depth: GLfloat, stencil: GLint);
    pub fn glad_glClearNamedFramebufferfv(framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, value: *const GLfloat);
    pub fn glad_glClearNamedFramebufferiv(framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, value: *const GLint);
    pub fn glad_glClearNamedFramebufferuiv(framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, value: *const GLuint);
    pub fn glad_glClearStencil(s: GLint);
    pub fn glad_glClearTexImage(texture: GLuint, level: GLint, format: GLenum, r#type: GLenum, data: *const c_void);
    pub fn glad_glClearTexSubImage(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, r#type: GLenum, data: *const c_void);
    pub fn glad_glClientActiveTextureARB(texture: GLenum);
    pub fn glad_glClientWaitSync(sync: GLsync, flags: GLbitfield, timeout: GLuint64) -> GLenum;
    pub fn glad_glClipPlanexOES(plane: GLenum, equation: *const GLfixed);
    pub fn glad_glColor3xOES(red: GLfixed, green: GLfixed, blue: GLfixed);
    pub fn glad_glColor3xvOES(components: *const GLfixed);
    pub fn glad_glColor4xOES(red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed);
    pub fn glad_glColor4xvOES(components: *const GLfixed);
    pub fn glad_glColorMask(red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean);
    pub fn glad_glColorMaski(index: GLuint, r: GLboolean, g: GLboolean, b: GLboolean, a: GLboolean);
    pub fn glad_glCompileShader(shader: GLuint);
    pub fn glad_glCompileShaderARB(shaderObj: GLhandleARB);
    pub fn glad_glCompileShaderIncludeARB(shader: GLuint, count: GLsizei, path: *const *const GLchar, length: *const GLint);
    pub fn glad_glCompressedTexImage1D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, data: *const c_void);
    pub fn glad_glCompressedTexImage1DARB(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, data: *const c_void);
    pub fn glad_glCompressedTexImage2D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, data: *const c_void);
    pub fn glad_glCompressedTexImage2DARB(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, data: *const c_void);
    pub fn glad_glCompressedTexImage3D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, data: *const c_void);
    pub fn glad_glCompressedTexImage3DARB(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, data: *const c_void);
    pub fn glad_glCompressedTexSubImage1D(target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, data: *const c_void);
    pub fn glad_glCompressedTexSubImage1DARB(target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, data: *const c_void);
    pub fn glad_glCompressedTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: *const c_void);
    pub fn glad_glCompressedTexSubImage2DARB(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: *const c_void);
    pub fn glad_glCompressedTexSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: *const c_void);
    pub fn glad_glCompressedTexSubImage3DARB(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: *const c_void);
    pub fn glad_glCompressedTextureSubImage1D(texture: GLuint, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, data: *const c_void);
    pub fn glad_glCompressedTextureSubImage2D(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: *const c_void);
    pub fn glad_glCompressedTextureSubImage3D(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: *const c_void);
    pub fn glad_glConvolutionParameterxOES(target: GLenum, pname: GLenum, param: GLfixed);
    pub fn glad_glConvolutionParameterxvOES(target: GLenum, pname: GLenum, params: *const GLfixed);
    pub fn glad_glCopyBufferSubData(readTarget: GLenum, writeTarget: GLenum, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr);
    pub fn glad_glCopyImageSubData(srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srcY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, srcWidth: GLsizei, srcHeight: GLsizei, srcDepth: GLsizei);
    pub fn glad_glCopyNamedBufferSubData(readBuffer: GLuint, writeBuffer: GLuint, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr);
    pub fn glad_glCopyTexImage1D(target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint);
    pub fn glad_glCopyTexImage2D(target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint);
    pub fn glad_glCopyTexSubImage1D(target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei);
    pub fn glad_glCopyTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei);
    pub fn glad_glCopyTexSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei);
    pub fn glad_glCopyTextureSubImage1D(texture: GLuint, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei);
    pub fn glad_glCopyTextureSubImage2D(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei);
    pub fn glad_glCopyTextureSubImage3D(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei);
    pub fn glad_glCreateBuffers(n: GLsizei, buffers: *mut GLuint);
    pub fn glad_glCreateFramebuffers(n: GLsizei, framebuffers: *mut GLuint);
    pub fn glad_glCreateProgram() -> GLuint;
    pub fn glad_glCreateProgramObjectARB() -> GLhandleARB;
    pub fn glad_glCreateProgramPipelines(n: GLsizei, pipelines: *mut GLuint);
    pub fn glad_glCreateQueries(target: GLenum, n: GLsizei, ids: *mut GLuint);
    pub fn glad_glCreateRenderbuffers(n: GLsizei, renderbuffers: *mut GLuint);
    pub fn glad_glCreateSamplers(n: GLsizei, samplers: *mut GLuint);
    pub fn glad_glCreateShader(r#type: GLenum) -> GLuint;
    pub fn glad_glCreateShaderObjectARB(shaderType: GLenum) -> GLhandleARB;
    pub fn glad_glCreateShaderProgramv(r#type: GLenum, count: GLsizei, strings: *const *const GLchar) -> GLuint;
    pub fn glad_glCreateTextures(target: GLenum, n: GLsizei, textures: *mut GLuint);
    pub fn glad_glCreateTransformFeedbacks(n: GLsizei, ids: *mut GLuint);
    pub fn glad_glCreateVertexArrays(n: GLsizei, arrays: *mut GLuint);
    pub fn glad_glCullFace(mode: GLenum);
    pub fn glad_glDebugMessageCallback(callback: GLDEBUGPROC, userParam: *const c_void);
    pub fn glad_glDebugMessageCallbackARB(callback: GLDEBUGPROCARB, userParam: *const c_void);
    pub fn glad_glDebugMessageControl(source: GLenum, r#type: GLenum, severity: GLenum, count: GLsizei, ids: *const GLuint, enabled: GLboolean);
    pub fn glad_glDebugMessageControlARB(source: GLenum, r#type: GLenum, severity: GLenum, count: GLsizei, ids: *const GLuint, enabled: GLboolean);
    pub fn glad_glDebugMessageInsert(source: GLenum, r#type: GLenum, id: GLuint, severity: GLenum, length: GLsizei, buf: *const GLchar);
    pub fn glad_glDebugMessageInsertARB(source: GLenum, r#type: GLenum, id: GLuint, severity: GLenum, length: GLsizei, buf: *const GLchar);
    pub fn glad_glDeleteBuffers(n: GLsizei, buffers: *const GLuint);
    pub fn glad_glDeleteBuffersARB(n: GLsizei, buffers: *const GLuint);
    pub fn glad_glDeleteFramebuffers(n: GLsizei, framebuffers: *const GLuint);
    pub fn glad_glDeleteFramebuffersEXT(n: GLsizei, framebuffers: *const GLuint);
    pub fn glad_glDeleteNamedStringARB(namelen: GLint, name: *const GLchar);
    pub fn glad_glDeleteObjectARB(obj: GLhandleARB);
    pub fn glad_glDeleteProgram(program: GLuint);
    pub fn glad_glDeleteProgramPipelines(n: GLsizei, pipelines: *const GLuint);
    pub fn glad_glDeleteProgramsARB(n: GLsizei, programs: *const GLuint);
    pub fn glad_glDeleteQueries(n: GLsizei, ids: *const GLuint);
    pub fn glad_glDeleteQueriesARB(n: GLsizei, ids: *const GLuint);
    pub fn glad_glDeleteRenderbuffers(n: GLsizei, renderbuffers: *const GLuint);
    pub fn glad_glDeleteRenderbuffersEXT(n: GLsizei, renderbuffers: *const GLuint);
    pub fn glad_glDeleteSamplers(count: GLsizei, samplers: *const GLuint);
    pub fn glad_glDeleteShader(shader: GLuint);
    pub fn glad_glDeleteSync(sync: GLsync);
    pub fn glad_glDeleteTextures(n: GLsizei, textures: *const GLuint);
    pub fn glad_glDeleteTransformFeedbacks(n: GLsizei, ids: *const GLuint);
    pub fn glad_glDeleteVertexArrays(n: GLsizei, arrays: *const GLuint);
    pub fn glad_glDepthFunc(func: GLenum);
    pub fn glad_glDepthMask(flag: GLboolean);
    pub fn glad_glDepthRange(n: GLdouble, f: GLdouble);
    pub fn glad_glDepthRangeArrayv(first: GLuint, count: GLsizei, v: *const GLdouble);
    pub fn glad_glDepthRangeIndexed(index: GLuint, n: GLdouble, f: GLdouble);
    pub fn glad_glDepthRangef(n: GLfloat, f: GLfloat);
    pub fn glad_glDepthRangexOES(n: GLfixed, f: GLfixed);
    pub fn glad_glDetachObjectARB(containerObj: GLhandleARB, attachedObj: GLhandleARB);
    pub fn glad_glDetachShader(program: GLuint, shader: GLuint);
    pub fn glad_glDisable(cap: GLenum);
    pub fn glad_glDisableVertexArrayAttrib(vaobj: GLuint, index: GLuint);
    pub fn glad_glDisableVertexAttribArray(index: GLuint);
    pub fn glad_glDisableVertexAttribArrayARB(index: GLuint);
    pub fn glad_glDisablei(target: GLenum, index: GLuint);
    pub fn glad_glDispatchCompute(num_groups_x: GLuint, num_groups_y: GLuint, num_groups_z: GLuint);
    pub fn glad_glDispatchComputeGroupSizeARB(num_groups_x: GLuint, num_groups_y: GLuint, num_groups_z: GLuint, group_size_x: GLuint, group_size_y: GLuint, group_size_z: GLuint);
    pub fn glad_glDispatchComputeIndirect(indirect: GLintptr);
    pub fn glad_glDrawArrays(mode: GLenum, first: GLint, count: GLsizei);
    pub fn glad_glDrawArraysIndirect(mode: GLenum, indirect: *const c_void);
    pub fn glad_glDrawArraysInstanced(mode: GLenum, first: GLint, count: GLsizei, instancecount: GLsizei);
    pub fn glad_glDrawArraysInstancedARB(mode: GLenum, first: GLint, count: GLsizei, primcount: GLsizei);
    pub fn glad_glDrawArraysInstancedBaseInstance(mode: GLenum, first: GLint, count: GLsizei, instancecount: GLsizei, baseinstance: GLuint);
    pub fn glad_glDrawArraysInstancedEXT(mode: GLenum, start: GLint, count: GLsizei, primcount: GLsizei);
    pub fn glad_glDrawBuffer(buf: GLenum);
    pub fn glad_glDrawBuffers(n: GLsizei, bufs: *const GLenum);
    pub fn glad_glDrawBuffersARB(n: GLsizei, bufs: *const GLenum);
    pub fn glad_glDrawElements(mode: GLenum, count: GLsizei, r#type: GLenum, indices: *const c_void);
    pub fn glad_glDrawElementsBaseVertex(mode: GLenum, count: GLsizei, r#type: GLenum, indices: *const c_void, basevertex: GLint);
    pub fn glad_glDrawElementsIndirect(mode: GLenum, r#type: GLenum, indirect: *const c_void);
    pub fn glad_glDrawElementsInstanced(mode: GLenum, count: GLsizei, r#type: GLenum, indices: *const c_void, instancecount: GLsizei);
    pub fn glad_glDrawElementsInstancedARB(mode: GLenum, count: GLsizei, r#type: GLenum, indices: *const c_void, primcount: GLsizei);
    pub fn glad_glDrawElementsInstancedBaseInstance(mode: GLenum, count: GLsizei, r#type: GLenum, indices: *const c_void, instancecount: GLsizei, baseinstance: GLuint);
    pub fn glad_glDrawElementsInstancedBaseVertex(mode: GLenum, count: GLsizei, r#type: GLenum, indices: *const c_void, instancecount: GLsizei, basevertex: GLint);
    pub fn glad_glDrawElementsInstancedBaseVertexBaseInstance(mode: GLenum, count: GLsizei, r#type: GLenum, indices: *const c_void, instancecount: GLsizei, basevertex: GLint, baseinstance: GLuint);
    pub fn glad_glDrawElementsInstancedEXT(mode: GLenum, count: GLsizei, r#type: GLenum, indices: *const c_void, primcount: GLsizei);
    pub fn glad_glDrawRangeElements(mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, r#type: GLenum, indices: *const c_void);
    pub fn glad_glDrawRangeElementsBaseVertex(mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, r#type: GLenum, indices: *const c_void, basevertex: GLint);
    pub fn glad_glDrawTransformFeedback(mode: GLenum, id: GLuint);
    pub fn glad_glDrawTransformFeedbackInstanced(mode: GLenum, id: GLuint, instancecount: GLsizei);
    pub fn glad_glDrawTransformFeedbackStream(mode: GLenum, id: GLuint, stream: GLuint);
    pub fn glad_glDrawTransformFeedbackStreamInstanced(mode: GLenum, id: GLuint, stream: GLuint, instancecount: GLsizei);
    pub fn glad_glEnable(cap: GLenum);
    pub fn glad_glEnableVertexArrayAttrib(vaobj: GLuint, index: GLuint);
    pub fn glad_glEnableVertexAttribArray(index: GLuint);
    pub fn glad_glEnableVertexAttribArrayARB(index: GLuint);
    pub fn glad_glEnablei(target: GLenum, index: GLuint);
    pub fn glad_glEndConditionalRender();
    pub fn glad_glEndQuery(target: GLenum);
    pub fn glad_glEndQueryARB(target: GLenum);
    pub fn glad_glEndQueryIndexed(target: GLenum, index: GLuint);
    pub fn glad_glEndTransformFeedback();
    pub fn glad_glEvalCoord1xOES(u: GLfixed);
    pub fn glad_glEvalCoord1xvOES(coords: *const GLfixed);
    pub fn glad_glEvalCoord2xOES(u: GLfixed, v: GLfixed);
    pub fn glad_glEvalCoord2xvOES(coords: *const GLfixed);
    pub fn glad_glEvaluateDepthValuesARB();
    pub fn glad_glFeedbackBufferxOES(n: GLsizei, r#type: GLenum, buffer: *const GLfixed);
    pub fn glad_glFenceSync(condition: GLenum, flags: GLbitfield) -> GLsync;
    pub fn glad_glFinish();
    pub fn glad_glFlush();
    pub fn glad_glFlushMappedBufferRange(target: GLenum, offset: GLintptr, length: GLsizeiptr);
    pub fn glad_glFlushMappedNamedBufferRange(buffer: GLuint, offset: GLintptr, length: GLsizeiptr);
    pub fn glad_glFogCoordPointerEXT(r#type: GLenum, stride: GLsizei, pointer: *const c_void);
    pub fn glad_glFogCoorddEXT(coord: GLdouble);
    pub fn glad_glFogCoorddvEXT(coord: *const GLdouble);
    pub fn glad_glFogCoordfEXT(coord: GLfloat);
    pub fn glad_glFogCoordfvEXT(coord: *const GLfloat);
    pub fn glad_glFogxOES(pname: GLenum, param: GLfixed);
    pub fn glad_glFogxvOES(pname: GLenum, param: *const GLfixed);
    pub fn glad_glFramebufferParameteri(target: GLenum, pname: GLenum, param: GLint);
    pub fn glad_glFramebufferRenderbuffer(target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint);
    pub fn glad_glFramebufferRenderbufferEXT(target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint);
    pub fn glad_glFramebufferSampleLocationsfvARB(target: GLenum, start: GLuint, count: GLsizei, v: *const GLfloat);
    pub fn glad_glFramebufferTexture(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint);
    pub fn glad_glFramebufferTexture1D(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint);
    pub fn glad_glFramebufferTexture1DEXT(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint);
    pub fn glad_glFramebufferTexture2D(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint);
    pub fn glad_glFramebufferTexture2DEXT(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint);
    pub fn glad_glFramebufferTexture3D(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, zoffset: GLint);
    pub fn glad_glFramebufferTexture3DEXT(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, zoffset: GLint);
    pub fn glad_glFramebufferTextureARB(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint);
    pub fn glad_glFramebufferTextureFaceARB(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, face: GLenum);
    pub fn glad_glFramebufferTextureLayer(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint);
    pub fn glad_glFramebufferTextureLayerARB(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint);
    pub fn glad_glFrontFace(mode: GLenum);
    pub fn glad_glFrustumxOES(l: GLfixed, r: GLfixed, b: GLfixed, t: GLfixed, n: GLfixed, f: GLfixed);
    pub fn glad_glGenBuffers(n: GLsizei, buffers: *mut GLuint);
    pub fn glad_glGenBuffersARB(n: GLsizei, buffers: *mut GLuint);
    pub fn glad_glGenFramebuffers(n: GLsizei, framebuffers: *mut GLuint);
    pub fn glad_glGenFramebuffersEXT(n: GLsizei, framebuffers: *mut GLuint);
    pub fn glad_glGenProgramPipelines(n: GLsizei, pipelines: *mut GLuint);
    pub fn glad_glGenProgramsARB(n: GLsizei, programs: *mut GLuint);
    pub fn glad_glGenQueries(n: GLsizei, ids: *mut GLuint);
    pub fn glad_glGenQueriesARB(n: GLsizei, ids: *mut GLuint);
    pub fn glad_glGenRenderbuffers(n: GLsizei, renderbuffers: *mut GLuint);
    pub fn glad_glGenRenderbuffersEXT(n: GLsizei, renderbuffers: *mut GLuint);
    pub fn glad_glGenSamplers(count: GLsizei, samplers: *mut GLuint);
    pub fn glad_glGenTextures(n: GLsizei, textures: *mut GLuint);
    pub fn glad_glGenTransformFeedbacks(n: GLsizei, ids: *mut GLuint);
    pub fn glad_glGenVertexArrays(n: GLsizei, arrays: *mut GLuint);
    pub fn glad_glGenerateMipmap(target: GLenum);
    pub fn glad_glGenerateMipmapEXT(target: GLenum);
    pub fn glad_glGenerateTextureMipmap(texture: GLuint);
    pub fn glad_glGetActiveAtomicCounterBufferiv(program: GLuint, bufferIndex: GLuint, pname: GLenum, params: *mut GLint);
    pub fn glad_glGetActiveAttrib(program: GLuint, index: GLuint, bufSize: GLsizei, length: *mut GLsizei, size: *mut GLint, r#type: *mut GLenum, name: *mut GLchar);
    pub fn glad_glGetActiveAttribARB(programObj: GLhandleARB, index: GLuint, maxLength: GLsizei, length: *mut GLsizei, size: *mut GLint, r#type: *mut GLenum, name: *mut GLcharARB);
    pub fn glad_glGetActiveSubroutineName(program: GLuint, shadertype: GLenum, index: GLuint, bufSize: GLsizei, length: *mut GLsizei, name: *mut GLchar);
    pub fn glad_glGetActiveSubroutineUniformName(program: GLuint, shadertype: GLenum, index: GLuint, bufSize: GLsizei, length: *mut GLsizei, name: *mut GLchar);
    pub fn glad_glGetActiveSubroutineUniformiv(program: GLuint, shadertype: GLenum, index: GLuint, pname: GLenum, values: *mut GLint);
    pub fn glad_glGetActiveUniform(program: GLuint, index: GLuint, bufSize: GLsizei, length: *mut GLsizei, size: *mut GLint, r#type: *mut GLenum, name: *mut GLchar);
    pub fn glad_glGetActiveUniformARB(programObj: GLhandleARB, index: GLuint, maxLength: GLsizei, length: *mut GLsizei, size: *mut GLint, r#type: *mut GLenum, name: *mut GLcharARB);
    pub fn glad_glGetActiveUniformBlockName(program: GLuint, uniformBlockIndex: GLuint, bufSize: GLsizei, length: *mut GLsizei, uniformBlockName: *mut GLchar);
    pub fn glad_glGetActiveUniformBlockiv(program: GLuint, uniformBlockIndex: GLuint, pname: GLenum, params: *mut GLint);
    pub fn glad_glGetActiveUniformName(program: GLuint, uniformIndex: GLuint, bufSize: GLsizei, length: *mut GLsizei, uniformName: *mut GLchar);
    pub fn glad_glGetActiveUniformsiv(program: GLuint, uniformCount: GLsizei, uniformIndices: *const GLuint, pname: GLenum, params: *mut GLint);
    pub fn glad_glGetAttachedObjectsARB(containerObj: GLhandleARB, maxCount: GLsizei, count: *mut GLsizei, obj: *mut GLhandleARB);
    pub fn glad_glGetAttachedShaders(program: GLuint, maxCount: GLsizei, count: *mut GLsizei, shaders: *mut GLuint);
    pub fn glad_glGetAttribLocation(program: GLuint, name: *const GLchar) -> GLint;
    pub fn glad_glGetAttribLocationARB(programObj: GLhandleARB, name: *const GLcharARB) -> GLint;
    pub fn glad_glGetBooleani_v(target: GLenum, index: GLuint, data: *mut GLboolean);
    pub fn glad_glGetBooleanv(pname: GLenum, data: *mut GLboolean);
    pub fn glad_glGetBufferParameteri64v(target: GLenum, pname: GLenum, params: *mut GLint64);
    pub fn glad_glGetBufferParameteriv(target: GLenum, pname: GLenum, params: *mut GLint);
    pub fn glad_glGetBufferParameterivARB(target: GLenum, pname: GLenum, params: *mut GLint);
    pub fn glad_glGetBufferPointerv(target: GLenum, pname: GLenum, params: *mut *mut c_void);
    pub fn glad_glGetBufferPointervARB(target: GLenum, pname: GLenum, params: *mut *mut c_void);
    pub fn glad_glGetBufferSubData(target: GLenum, offset: GLintptr, size: GLsizeiptr, data: *mut c_void);
    pub fn glad_glGetBufferSubDataARB(target: GLenum, offset: GLintptrARB, size: GLsizeiptrARB, data: *mut c_void);
    pub fn glad_glGetClipPlanexOES(plane: GLenum, equation: *mut GLfixed);
    pub fn glad_glGetCompressedTexImage(target: GLenum, level: GLint, img: *mut c_void);
    pub fn glad_glGetCompressedTexImageARB(target: GLenum, level: GLint, img: *mut c_void);
    pub fn glad_glGetCompressedTextureImage(texture: GLuint, level: GLint, bufSize: GLsizei, pixels: *mut c_void);
    pub fn glad_glGetCompressedTextureSubImage(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, bufSize: GLsizei, pixels: *mut c_void);
    pub fn glad_glGetConvolutionParameterxvOES(target: GLenum, pname: GLenum, params: *mut GLfixed);
    pub fn glad_glGetDebugMessageLog(count: GLuint, bufSize: GLsizei, sources: *mut GLenum, types: *mut GLenum, ids: *mut GLuint, severities: *mut GLenum, lengths: *mut GLsizei, messageLog: *mut GLchar) -> GLuint;
    pub fn glad_glGetDebugMessageLogARB(count: GLuint, bufSize: GLsizei, sources: *mut GLenum, types: *mut GLenum, ids: *mut GLuint, severities: *mut GLenum, lengths: *mut GLsizei, messageLog: *mut GLchar) -> GLuint;
    pub fn glad_glGetDoublei_v(target: GLenum, index: GLuint, data: *mut GLdouble);
    pub fn glad_glGetDoublev(pname: GLenum, data: *mut GLdouble);
    pub fn glad_glGetError() -> GLenum;
    pub fn glad_glGetFixedvOES(pname: GLenum, params: *mut GLfixed);
    pub fn glad_glGetFloati_v(target: GLenum, index: GLuint, data: *mut GLfloat);
    pub fn glad_glGetFloatv(pname: GLenum, data: *mut GLfloat);
    pub fn glad_glGetFragDataIndex(program: GLuint, name: *const GLchar) -> GLint;
    pub fn glad_glGetFragDataLocation(program: GLuint, name: *const GLchar) -> GLint;
    pub fn glad_glGetFramebufferAttachmentParameteriv(target: GLenum, attachment: GLenum, pname: GLenum, params: *mut GLint);
    pub fn glad_glGetFramebufferAttachmentParameterivEXT(target: GLenum, attachment: GLenum, pname: GLenum, params: *mut GLint);
    pub fn glad_glGetFramebufferParameteriv(target: GLenum, pname: GLenum, params: *mut GLint);
    pub fn glad_glGetHandleARB(pname: GLenum) -> GLhandleARB;
    pub fn glad_glGetHistogramParameterxvOES(target: GLenum, pname: GLenum, params: *mut GLfixed);
    pub fn glad_glGetInfoLogARB(obj: GLhandleARB, maxLength: GLsizei, length: *mut GLsizei, infoLog: *mut GLcharARB);
    pub fn glad_glGetInteger64i_v(target: GLenum, index: GLuint, data: *mut GLint64);
    pub fn glad_glGetInteger64v(pname: GLenum, data: *mut GLint64);
    pub fn glad_glGetIntegeri_v(target: GLenum, index: GLuint, data: *mut GLint);
    pub fn glad_glGetIntegerv(pname: GLenum, data: *mut GLint);
    pub fn glad_glGetInternalformati64v(target: GLenum, internalformat: GLenum, pname: GLenum, count: GLsizei, params: *mut GLint64);
    pub fn glad_glGetInternalformativ(target: GLenum, internalformat: GLenum, pname: GLenum, count: GLsizei, params: *mut GLint);
    pub fn glad_glGetLightxOES(light: GLenum, pname: GLenum, params: *mut GLfixed);
    pub fn glad_glGetMapxvOES(target: GLenum, query: GLenum, v: *mut GLfixed);
    pub fn glad_glGetMaterialxOES(face: GLenum, pname: GLenum, param: GLfixed);
    pub fn glad_glGetMultisamplefv(pname: GLenum, index: GLuint, val: *mut GLfloat);
    pub fn glad_glGetNamedBufferParameteri64v(buffer: GLuint, pname: GLenum, params: *mut GLint64);
    pub fn glad_glGetNamedBufferParameteriv(buffer: GLuint, pname: GLenum, params: *mut GLint);
    pub fn glad_glGetNamedBufferPointerv(buffer: GLuint, pname: GLenum, params: *mut *mut c_void);
    pub fn glad_glGetNamedBufferSubData(buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: *mut c_void);
    pub fn glad_glGetNamedFramebufferAttachmentParameteriv(framebuffer: GLuint, attachment: GLenum, pname: GLenum, params: *mut GLint);
    pub fn glad_glGetNamedFramebufferParameteriv(framebuffer: GLuint, pname: GLenum, param: *mut GLint);
    pub fn glad_glGetNamedRenderbufferParameteriv(renderbuffer: GLuint, pname: GLenum, params: *mut GLint);
    pub fn glad_glGetNamedStringARB(namelen: GLint, name: *const GLchar, bufSize: GLsizei, stringlen: *mut GLint, string: *mut GLchar);
    pub fn glad_glGetNamedStringivARB(namelen: GLint, name: *const GLchar, pname: GLenum, params: *mut GLint);
    pub fn glad_glGetObjectLabel(identifier: GLenum, name: GLuint, bufSize: GLsizei, length: *mut GLsizei, label: *mut GLchar);
    pub fn glad_glGetObjectParameterfvARB(obj: GLhandleARB, pname: GLenum, params: *mut GLfloat);
    pub fn glad_glGetObjectParameterivARB(obj: GLhandleARB, pname: GLenum, params: *mut GLint);
    pub fn glad_glGetObjectPtrLabel(ptr: *const c_void, bufSize: GLsizei, length: *mut GLsizei, label: *mut GLchar);
    pub fn glad_glGetPixelMapxv(map: GLenum, size: GLint, values: *mut GLfixed);
    pub fn glad_glGetPointerv(pname: GLenum, params: *mut *mut c_void);
    pub fn glad_glGetProgramBinary(program: GLuint, bufSize: GLsizei, length: *mut GLsizei, binaryFormat: *mut GLenum, binary: *mut c_void);
    pub fn glad_glGetProgramEnvParameterdvARB(target: GLenum, index: GLuint, params: *mut GLdouble);
    pub fn glad_glGetProgramEnvParameterfvARB(target: GLenum, index: GLuint, params: *mut GLfloat);
    pub fn glad_glGetProgramInfoLog(program: GLuint, bufSize: GLsizei, length: *mut GLsizei, infoLog: *mut GLchar);
    pub fn glad_glGetProgramInterfaceiv(program: GLuint, programInterface: GLenum, pname: GLenum, params: *mut GLint);
    pub fn glad_glGetProgramLocalParameterdvARB(target: GLenum, index: GLuint, params: *mut GLdouble);
    pub fn glad_glGetProgramLocalParameterfvARB(target: GLenum, index: GLuint, params: *mut GLfloat);
    pub fn glad_glGetProgramPipelineInfoLog(pipeline: GLuint, bufSize: GLsizei, length: *mut GLsizei, infoLog: *mut GLchar);
    pub fn glad_glGetProgramPipelineiv(pipeline: GLuint, pname: GLenum, params: *mut GLint);
    pub fn glad_glGetProgramResourceIndex(program: GLuint, programInterface: GLenum, name: *const GLchar) -> GLuint;
    pub fn glad_glGetProgramResourceLocation(program: GLuint, programInterface: GLenum, name: *const GLchar) -> GLint;
    pub fn glad_glGetProgramResourceLocationIndex(program: GLuint, programInterface: GLenum, name: *const GLchar) -> GLint;
    pub fn glad_glGetProgramResourceName(program: GLuint, programInterface: GLenum, index: GLuint, bufSize: GLsizei, length: *mut GLsizei, name: *mut GLchar);
    pub fn glad_glGetProgramResourceiv(program: GLuint, programInterface: GLenum, index: GLuint, propCount: GLsizei, props: *const GLenum, count: GLsizei, length: *mut GLsizei, params: *mut GLint);
    pub fn glad_glGetProgramStageiv(program: GLuint, shadertype: GLenum, pname: GLenum, values: *mut GLint);
    pub fn glad_glGetProgramStringARB(target: GLenum, pname: GLenum, string: *mut c_void);
    pub fn glad_glGetProgramiv(program: GLuint, pname: GLenum, params: *mut GLint);
    pub fn glad_glGetProgramivARB(target: GLenum, pname: GLenum, params: *mut GLint);
    pub fn glad_glGetQueryBufferObjecti64v(id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr);
    pub fn glad_glGetQueryBufferObjectiv(id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr);
    pub fn glad_glGetQueryBufferObjectui64v(id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr);
    pub fn glad_glGetQueryBufferObjectuiv(id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr);
    pub fn glad_glGetQueryIndexediv(target: GLenum, index: GLuint, pname: GLenum, params: *mut GLint);
    pub fn glad_glGetQueryObjecti64v(id: GLuint, pname: GLenum, params: *mut GLint64);
    pub fn glad_glGetQueryObjectiv(id: GLuint, pname: GLenum, params: *mut GLint);
    pub fn glad_glGetQueryObjectivARB(id: GLuint, pname: GLenum, params: *mut GLint);
    pub fn glad_glGetQueryObjectui64v(id: GLuint, pname: GLenum, params: *mut GLuint64);
    pub fn glad_glGetQueryObjectuiv(id: GLuint, pname: GLenum, params: *mut GLuint);
    pub fn glad_glGetQueryObjectuivARB(id: GLuint, pname: GLenum, params: *mut GLuint);
    pub fn glad_glGetQueryiv(target: GLenum, pname: GLenum, params: *mut GLint);
    pub fn glad_glGetQueryivARB(target: GLenum, pname: GLenum, params: *mut GLint);
    pub fn glad_glGetRenderbufferParameteriv(target: GLenum, pname: GLenum, params: *mut GLint);
    pub fn glad_glGetRenderbufferParameterivEXT(target: GLenum, pname: GLenum, params: *mut GLint);
    pub fn glad_glGetSamplerParameterIiv(sampler: GLuint, pname: GLenum, params: *mut GLint);
    pub fn glad_glGetSamplerParameterIuiv(sampler: GLuint, pname: GLenum, params: *mut GLuint);
    pub fn glad_glGetSamplerParameterfv(sampler: GLuint, pname: GLenum, params: *mut GLfloat);
    pub fn glad_glGetSamplerParameteriv(sampler: GLuint, pname: GLenum, params: *mut GLint);
    pub fn glad_glGetShaderInfoLog(shader: GLuint, bufSize: GLsizei, length: *mut GLsizei, infoLog: *mut GLchar);
    pub fn glad_glGetShaderPrecisionFormat(shadertype: GLenum, precisiontype: GLenum, range: *mut GLint, precision: *mut GLint);
    pub fn glad_glGetShaderSource(shader: GLuint, bufSize: GLsizei, length: *mut GLsizei, source: *mut GLchar);
    pub fn glad_glGetShaderSourceARB(obj: GLhandleARB, maxLength: GLsizei, length: *mut GLsizei, source: *mut GLcharARB);
    pub fn glad_glGetShaderiv(shader: GLuint, pname: GLenum, params: *mut GLint);
    pub fn glad_glGetString(name: GLenum) -> *const GLubyte;
    pub fn glad_glGetStringi(name: GLenum, index: GLuint) -> *const GLubyte;
    pub fn glad_glGetSubroutineIndex(program: GLuint, shadertype: GLenum, name: *const GLchar) -> GLuint;
    pub fn glad_glGetSubroutineUniformLocation(program: GLuint, shadertype: GLenum, name: *const GLchar) -> GLint;
    pub fn glad_glGetSynciv(sync: GLsync, pname: GLenum, count: GLsizei, length: *mut GLsizei, values: *mut GLint);
    pub fn glad_glGetTexEnvxvOES(target: GLenum, pname: GLenum, params: *mut GLfixed);
    pub fn glad_glGetTexGenxvOES(coord: GLenum, pname: GLenum, params: *mut GLfixed);
    pub fn glad_glGetTexImage(target: GLenum, level: GLint, format: GLenum, r#type: GLenum, pixels: *mut c_void);
    pub fn glad_glGetTexLevelParameterfv(target: GLenum, level: GLint, pname: GLenum, params: *mut GLfloat);
    pub fn glad_glGetTexLevelParameteriv(target: GLenum, level: GLint, pname: GLenum, params: *mut GLint);
    pub fn glad_glGetTexLevelParameterxvOES(target: GLenum, level: GLint, pname: GLenum, params: *mut GLfixed);
    pub fn glad_glGetTexParameterIiv(target: GLenum, pname: GLenum, params: *mut GLint);
    pub fn glad_glGetTexParameterIuiv(target: GLenum, pname: GLenum, params: *mut GLuint);
    pub fn glad_glGetTexParameterfv(target: GLenum, pname: GLenum, params: *mut GLfloat);
    pub fn glad_glGetTexParameteriv(target: GLenum, pname: GLenum, params: *mut GLint);
    pub fn glad_glGetTexParameterxvOES(target: GLenum, pname: GLenum, params: *mut GLfixed);
    pub fn glad_glGetTextureImage(texture: GLuint, level: GLint, format: GLenum, r#type: GLenum, bufSize: GLsizei, pixels: *mut c_void);
    pub fn glad_glGetTextureLevelParameterfv(texture: GLuint, level: GLint, pname: GLenum, params: *mut GLfloat);
    pub fn glad_glGetTextureLevelParameteriv(texture: GLuint, level: GLint, pname: GLenum, params: *mut GLint);
    pub fn glad_glGetTextureParameterIiv(texture: GLuint, pname: GLenum, params: *mut GLint);
    pub fn glad_glGetTextureParameterIuiv(texture: GLuint, pname: GLenum, params: *mut GLuint);
    pub fn glad_glGetTextureParameterfv(texture: GLuint, pname: GLenum, params: *mut GLfloat);
    pub fn glad_glGetTextureParameteriv(texture: GLuint, pname: GLenum, params: *mut GLint);
    pub fn glad_glGetTextureSubImage(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, r#type: GLenum, bufSize: GLsizei, pixels: *mut c_void);
    pub fn glad_glGetTransformFeedbackVarying(program: GLuint, index: GLuint, bufSize: GLsizei, length: *mut GLsizei, size: *mut GLsizei, r#type: *mut GLenum, name: *mut GLchar);
    pub fn glad_glGetTransformFeedbacki64_v(xfb: GLuint, pname: GLenum, index: GLuint, param: *mut GLint64);
    pub fn glad_glGetTransformFeedbacki_v(xfb: GLuint, pname: GLenum, index: GLuint, param: *mut GLint);
    pub fn glad_glGetTransformFeedbackiv(xfb: GLuint, pname: GLenum, param: *mut GLint);
    pub fn glad_glGetUniformBlockIndex(program: GLuint, uniformBlockName: *const GLchar) -> GLuint;
    pub fn glad_glGetUniformIndices(program: GLuint, uniformCount: GLsizei, uniformNames: *const *const GLchar, uniformIndices: *mut GLuint);
    pub fn glad_glGetUniformLocation(program: GLuint, name: *const GLchar) -> GLint;
    pub fn glad_glGetUniformLocationARB(programObj: GLhandleARB, name: *const GLcharARB) -> GLint;
    pub fn glad_glGetUniformSubroutineuiv(shadertype: GLenum, location: GLint, params: *mut GLuint);
    pub fn glad_glGetUniformdv(program: GLuint, location: GLint, params: *mut GLdouble);
    pub fn glad_glGetUniformfv(program: GLuint, location: GLint, params: *mut GLfloat);
    pub fn glad_glGetUniformfvARB(programObj: GLhandleARB, location: GLint, params: *mut GLfloat);
    pub fn glad_glGetUniformi64vARB(program: GLuint, location: GLint, params: *mut GLint64);
    pub fn glad_glGetUniformiv(program: GLuint, location: GLint, params: *mut GLint);
    pub fn glad_glGetUniformivARB(programObj: GLhandleARB, location: GLint, params: *mut GLint);
    pub fn glad_glGetUniformui64vARB(program: GLuint, location: GLint, params: *mut GLuint64);
    pub fn glad_glGetUniformuiv(program: GLuint, location: GLint, params: *mut GLuint);
    pub fn glad_glGetVertexArrayIndexed64iv(vaobj: GLuint, index: GLuint, pname: GLenum, param: *mut GLint64);
    pub fn glad_glGetVertexArrayIndexediv(vaobj: GLuint, index: GLuint, pname: GLenum, param: *mut GLint);
    pub fn glad_glGetVertexArrayiv(vaobj: GLuint, pname: GLenum, param: *mut GLint);
    pub fn glad_glGetVertexAttribIiv(index: GLuint, pname: GLenum, params: *mut GLint);
    pub fn glad_glGetVertexAttribIuiv(index: GLuint, pname: GLenum, params: *mut GLuint);
    pub fn glad_glGetVertexAttribLdv(index: GLuint, pname: GLenum, params: *mut GLdouble);
    pub fn glad_glGetVertexAttribPointerv(index: GLuint, pname: GLenum, pointer: *mut *mut c_void);
    pub fn glad_glGetVertexAttribPointervARB(index: GLuint, pname: GLenum, pointer: *mut *mut c_void);
    pub fn glad_glGetVertexAttribdv(index: GLuint, pname: GLenum, params: *mut GLdouble);
    pub fn glad_glGetVertexAttribdvARB(index: GLuint, pname: GLenum, params: *mut GLdouble);
    pub fn glad_glGetVertexAttribfv(index: GLuint, pname: GLenum, params: *mut GLfloat);
    pub fn glad_glGetVertexAttribfvARB(index: GLuint, pname: GLenum, params: *mut GLfloat);
    pub fn glad_glGetVertexAttribiv(index: GLuint, pname: GLenum, params: *mut GLint);
    pub fn glad_glGetVertexAttribivARB(index: GLuint, pname: GLenum, params: *mut GLint);
    pub fn glad_glGetnUniformi64vARB(program: GLuint, location: GLint, bufSize: GLsizei, params: *mut GLint64);
    pub fn glad_glGetnUniformui64vARB(program: GLuint, location: GLint, bufSize: GLsizei, params: *mut GLuint64);
    pub fn glad_glHint(target: GLenum, mode: GLenum);
    pub fn glad_glIndexxOES(component: GLfixed);
    pub fn glad_glIndexxvOES(component: *const GLfixed);
    pub fn glad_glInvalidateBufferData(buffer: GLuint);
    pub fn glad_glInvalidateBufferSubData(buffer: GLuint, offset: GLintptr, length: GLsizeiptr);
    pub fn glad_glInvalidateFramebuffer(target: GLenum, numAttachments: GLsizei, attachments: *const GLenum);
    pub fn glad_glInvalidateNamedFramebufferData(framebuffer: GLuint, numAttachments: GLsizei, attachments: *const GLenum);
    pub fn glad_glInvalidateNamedFramebufferSubData(framebuffer: GLuint, numAttachments: GLsizei, attachments: *const GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei);
    pub fn glad_glInvalidateSubFramebuffer(target: GLenum, numAttachments: GLsizei, attachments: *const GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei);
    pub fn glad_glInvalidateTexImage(texture: GLuint, level: GLint);
    pub fn glad_glInvalidateTexSubImage(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei);
    pub fn glad_glIsBuffer(buffer: GLuint) -> GLboolean;
    pub fn glad_glIsBufferARB(buffer: GLuint) -> GLboolean;
    pub fn glad_glIsEnabled(cap: GLenum) -> GLboolean;
    pub fn glad_glIsEnabledi(target: GLenum, index: GLuint) -> GLboolean;
    pub fn glad_glIsFramebuffer(framebuffer: GLuint) -> GLboolean;
    pub fn glad_glIsFramebufferEXT(framebuffer: GLuint) -> GLboolean;
    pub fn glad_glIsNamedStringARB(namelen: GLint, name: *const GLchar) -> GLboolean;
    pub fn glad_glIsProgram(program: GLuint) -> GLboolean;
    pub fn glad_glIsProgramARB(program: GLuint) -> GLboolean;
    pub fn glad_glIsProgramPipeline(pipeline: GLuint) -> GLboolean;
    pub fn glad_glIsQuery(id: GLuint) -> GLboolean;
    pub fn glad_glIsQueryARB(id: GLuint) -> GLboolean;
    pub fn glad_glIsRenderbuffer(renderbuffer: GLuint) -> GLboolean;
    pub fn glad_glIsRenderbufferEXT(renderbuffer: GLuint) -> GLboolean;
    pub fn glad_glIsSampler(sampler: GLuint) -> GLboolean;
    pub fn glad_glIsShader(shader: GLuint) -> GLboolean;
    pub fn glad_glIsSync(sync: GLsync) -> GLboolean;
    pub fn glad_glIsTexture(texture: GLuint) -> GLboolean;
    pub fn glad_glIsTransformFeedback(id: GLuint) -> GLboolean;
    pub fn glad_glIsVertexArray(array: GLuint) -> GLboolean;
    pub fn glad_glLightModelxOES(pname: GLenum, param: GLfixed);
    pub fn glad_glLightModelxvOES(pname: GLenum, param: *const GLfixed);
    pub fn glad_glLightxOES(light: GLenum, pname: GLenum, param: GLfixed);
    pub fn glad_glLightxvOES(light: GLenum, pname: GLenum, params: *const GLfixed);
    pub fn glad_glLineWidth(width: GLfloat);
    pub fn glad_glLineWidthxOES(width: GLfixed);
    pub fn glad_glLinkProgram(program: GLuint);
    pub fn glad_glLinkProgramARB(programObj: GLhandleARB);
    pub fn glad_glLoadMatrixxOES(m: *const GLfixed);
    pub fn glad_glLoadTransposeMatrixdARB(m: *const GLdouble);
    pub fn glad_glLoadTransposeMatrixfARB(m: *const GLfloat);
    pub fn glad_glLoadTransposeMatrixxOES(m: *const GLfixed);
    pub fn glad_glLogicOp(opcode: GLenum);
    pub fn glad_glMap1xOES(target: GLenum, u1: GLfixed, u2: GLfixed, stride: GLint, order: GLint, points: GLfixed);
    pub fn glad_glMap2xOES(target: GLenum, u1: GLfixed, u2: GLfixed, ustride: GLint, uorder: GLint, v1: GLfixed, v2: GLfixed, vstride: GLint, vorder: GLint, points: GLfixed);
    pub fn glad_glMapBuffer(target: GLenum, access: GLenum) -> *mut c_void;
    pub fn glad_glMapBufferARB(target: GLenum, access: GLenum) -> *mut c_void;
    pub fn glad_glMapBufferRange(target: GLenum, offset: GLintptr, length: GLsizeiptr, access: GLbitfield) -> *mut c_void;
    pub fn glad_glMapGrid1xOES(n: GLint, u1: GLfixed, u2: GLfixed);
    pub fn glad_glMapGrid2xOES(n: GLint, u1: GLfixed, u2: GLfixed, v1: GLfixed, v2: GLfixed);
    pub fn glad_glMapNamedBuffer(buffer: GLuint, access: GLenum) -> *mut c_void;
    pub fn glad_glMapNamedBufferRange(buffer: GLuint, offset: GLintptr, length: GLsizeiptr, access: GLbitfield) -> *mut c_void;
    pub fn glad_glMaterialxOES(face: GLenum, pname: GLenum, param: GLfixed);
    pub fn glad_glMaterialxvOES(face: GLenum, pname: GLenum, param: *const GLfixed);
    pub fn glad_glMemoryBarrier(barriers: GLbitfield);
    pub fn glad_glMemoryBarrierByRegion(barriers: GLbitfield);
    pub fn glad_glMinSampleShading(value: GLfloat);
    pub fn glad_glMinSampleShadingARB(value: GLfloat);
    pub fn glad_glMultMatrixxOES(m: *const GLfixed);
    pub fn glad_glMultTransposeMatrixdARB(m: *const GLdouble);
    pub fn glad_glMultTransposeMatrixfARB(m: *const GLfloat);
    pub fn glad_glMultTransposeMatrixxOES(m: *const GLfixed);
    pub fn glad_glMultiDrawArrays(mode: GLenum, first: *const GLint, count: *const GLsizei, drawcount: GLsizei);
    pub fn glad_glMultiDrawArraysIndirect(mode: GLenum, indirect: *const c_void, drawcount: GLsizei, stride: GLsizei);
    pub fn glad_glMultiDrawElements(mode: GLenum, count: *const GLsizei, r#type: GLenum, indices: *const *const c_void, drawcount: GLsizei);
    pub fn glad_glMultiDrawElementsBaseVertex(mode: GLenum, count: *const GLsizei, r#type: GLenum, indices: *const *const c_void, drawcount: GLsizei, basevertex: *const GLint);
    pub fn glad_glMultiDrawElementsIndirect(mode: GLenum, r#type: GLenum, indirect: *const c_void, drawcount: GLsizei, stride: GLsizei);
    pub fn glad_glMultiTexCoord1dARB(target: GLenum, s: GLdouble);
    pub fn glad_glMultiTexCoord1dvARB(target: GLenum, v: *const GLdouble);
    pub fn glad_glMultiTexCoord1fARB(target: GLenum, s: GLfloat);
    pub fn glad_glMultiTexCoord1fvARB(target: GLenum, v: *const GLfloat);
    pub fn glad_glMultiTexCoord1iARB(target: GLenum, s: GLint);
    pub fn glad_glMultiTexCoord1ivARB(target: GLenum, v: *const GLint);
    pub fn glad_glMultiTexCoord1sARB(target: GLenum, s: GLshort);
    pub fn glad_glMultiTexCoord1svARB(target: GLenum, v: *const GLshort);
    pub fn glad_glMultiTexCoord1xOES(texture: GLenum, s: GLfixed);
    pub fn glad_glMultiTexCoord1xvOES(texture: GLenum, coords: *const GLfixed);
    pub fn glad_glMultiTexCoord2dARB(target: GLenum, s: GLdouble, t: GLdouble);
    pub fn glad_glMultiTexCoord2dvARB(target: GLenum, v: *const GLdouble);
    pub fn glad_glMultiTexCoord2fARB(target: GLenum, s: GLfloat, t: GLfloat);
    pub fn glad_glMultiTexCoord2fvARB(target: GLenum, v: *const GLfloat);
    pub fn glad_glMultiTexCoord2iARB(target: GLenum, s: GLint, t: GLint);
    pub fn glad_glMultiTexCoord2ivARB(target: GLenum, v: *const GLint);
    pub fn glad_glMultiTexCoord2sARB(target: GLenum, s: GLshort, t: GLshort);
    pub fn glad_glMultiTexCoord2svARB(target: GLenum, v: *const GLshort);
    pub fn glad_glMultiTexCoord2xOES(texture: GLenum, s: GLfixed, t: GLfixed);
    pub fn glad_glMultiTexCoord2xvOES(texture: GLenum, coords: *const GLfixed);
    pub fn glad_glMultiTexCoord3dARB(target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble);
    pub fn glad_glMultiTexCoord3dvARB(target: GLenum, v: *const GLdouble);
    pub fn glad_glMultiTexCoord3fARB(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat);
    pub fn glad_glMultiTexCoord3fvARB(target: GLenum, v: *const GLfloat);
    pub fn glad_glMultiTexCoord3iARB(target: GLenum, s: GLint, t: GLint, r: GLint);
    pub fn glad_glMultiTexCoord3ivARB(target: GLenum, v: *const GLint);
    pub fn glad_glMultiTexCoord3sARB(target: GLenum, s: GLshort, t: GLshort, r: GLshort);
    pub fn glad_glMultiTexCoord3svARB(target: GLenum, v: *const GLshort);
    pub fn glad_glMultiTexCoord3xOES(texture: GLenum, s: GLfixed, t: GLfixed, r: GLfixed);
    pub fn glad_glMultiTexCoord3xvOES(texture: GLenum, coords: *const GLfixed);
    pub fn glad_glMultiTexCoord4dARB(target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble);
    pub fn glad_glMultiTexCoord4dvARB(target: GLenum, v: *const GLdouble);
    pub fn glad_glMultiTexCoord4fARB(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat);
    pub fn glad_glMultiTexCoord4fvARB(target: GLenum, v: *const GLfloat);
    pub fn glad_glMultiTexCoord4iARB(target: GLenum, s: GLint, t: GLint, r: GLint, q: GLint);
    pub fn glad_glMultiTexCoord4ivARB(target: GLenum, v: *const GLint);
    pub fn glad_glMultiTexCoord4sARB(target: GLenum, s: GLshort, t: GLshort, r: GLshort, q: GLshort);
    pub fn glad_glMultiTexCoord4svARB(target: GLenum, v: *const GLshort);
    pub fn glad_glMultiTexCoord4xOES(texture: GLenum, s: GLfixed, t: GLfixed, r: GLfixed, q: GLfixed);
    pub fn glad_glMultiTexCoord4xvOES(texture: GLenum, coords: *const GLfixed);
    pub fn glad_glNamedBufferData(buffer: GLuint, size: GLsizeiptr, data: *const c_void, usage: GLenum);
    pub fn glad_glNamedBufferStorage(buffer: GLuint, size: GLsizeiptr, data: *const c_void, flags: GLbitfield);
    pub fn glad_glNamedBufferSubData(buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: *const c_void);
    pub fn glad_glNamedFramebufferDrawBuffer(framebuffer: GLuint, buf: GLenum);
    pub fn glad_glNamedFramebufferDrawBuffers(framebuffer: GLuint, n: GLsizei, bufs: *const GLenum);
    pub fn glad_glNamedFramebufferParameteri(framebuffer: GLuint, pname: GLenum, param: GLint);
    pub fn glad_glNamedFramebufferReadBuffer(framebuffer: GLuint, src: GLenum);
    pub fn glad_glNamedFramebufferRenderbuffer(framebuffer: GLuint, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint);
    pub fn glad_glNamedFramebufferSampleLocationsfvARB(framebuffer: GLuint, start: GLuint, count: GLsizei, v: *const GLfloat);
    pub fn glad_glNamedFramebufferTexture(framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint);
    pub fn glad_glNamedFramebufferTextureLayer(framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint);
    pub fn glad_glNamedRenderbufferStorage(renderbuffer: GLuint, internalformat: GLenum, width: GLsizei, height: GLsizei);
    pub fn glad_glNamedRenderbufferStorageMultisample(renderbuffer: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei);
    pub fn glad_glNamedStringARB(r#type: GLenum, namelen: GLint, name: *const GLchar, stringlen: GLint, string: *const GLchar);
    pub fn glad_glNormal3xOES(nx: GLfixed, ny: GLfixed, nz: GLfixed);
    pub fn glad_glNormal3xvOES(coords: *const GLfixed);
    pub fn glad_glObjectLabel(identifier: GLenum, name: GLuint, length: GLsizei, label: *const GLchar);
    pub fn glad_glObjectPtrLabel(ptr: *const c_void, length: GLsizei, label: *const GLchar);
    pub fn glad_glOrthoxOES(l: GLfixed, r: GLfixed, b: GLfixed, t: GLfixed, n: GLfixed, f: GLfixed);
    pub fn glad_glPassThroughxOES(token: GLfixed);
    pub fn glad_glPatchParameterfv(pname: GLenum, values: *const GLfloat);
    pub fn glad_glPatchParameteri(pname: GLenum, value: GLint);
    pub fn glad_glPauseTransformFeedback();
    pub fn glad_glPixelMapx(map: GLenum, size: GLint, values: *const GLfixed);
    pub fn glad_glPixelStoref(pname: GLenum, param: GLfloat);
    pub fn glad_glPixelStorei(pname: GLenum, param: GLint);
    pub fn glad_glPixelStorex(pname: GLenum, param: GLfixed);
    pub fn glad_glPixelTransferxOES(pname: GLenum, param: GLfixed);
    pub fn glad_glPixelZoomxOES(xfactor: GLfixed, yfactor: GLfixed);
    pub fn glad_glPointParameterf(pname: GLenum, param: GLfloat);
    pub fn glad_glPointParameterfv(pname: GLenum, params: *const GLfloat);
    pub fn glad_glPointParameteri(pname: GLenum, param: GLint);
    pub fn glad_glPointParameteriv(pname: GLenum, params: *const GLint);
    pub fn glad_glPointParameterxvOES(pname: GLenum, params: *const GLfixed);
    pub fn glad_glPointSize(size: GLfloat);
    pub fn glad_glPointSizexOES(size: GLfixed);
    pub fn glad_glPolygonMode(face: GLenum, mode: GLenum);
    pub fn glad_glPolygonOffset(factor: GLfloat, units: GLfloat);
    pub fn glad_glPolygonOffsetxOES(factor: GLfixed, units: GLfixed);
    pub fn glad_glPopDebugGroup();
    pub fn glad_glPrimitiveBoundingBoxARB(minX: GLfloat, minY: GLfloat, minZ: GLfloat, minW: GLfloat, maxX: GLfloat, maxY: GLfloat, maxZ: GLfloat, maxW: GLfloat);
    pub fn glad_glPrimitiveRestartIndex(index: GLuint);
    pub fn glad_glPrioritizeTexturesxOES(n: GLsizei, textures: *const GLuint, priorities: *const GLfixed);
    pub fn glad_glProgramBinary(program: GLuint, binaryFormat: GLenum, binary: *const c_void, length: GLsizei);
    pub fn glad_glProgramEnvParameter4dARB(target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble);
    pub fn glad_glProgramEnvParameter4dvARB(target: GLenum, index: GLuint, params: *const GLdouble);
    pub fn glad_glProgramEnvParameter4fARB(target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat);
    pub fn glad_glProgramEnvParameter4fvARB(target: GLenum, index: GLuint, params: *const GLfloat);
    pub fn glad_glProgramLocalParameter4dARB(target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble);
    pub fn glad_glProgramLocalParameter4dvARB(target: GLenum, index: GLuint, params: *const GLdouble);
    pub fn glad_glProgramLocalParameter4fARB(target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat);
    pub fn glad_glProgramLocalParameter4fvARB(target: GLenum, index: GLuint, params: *const GLfloat);
    pub fn glad_glProgramParameteri(program: GLuint, pname: GLenum, value: GLint);
    pub fn glad_glProgramParameteriARB(program: GLuint, pname: GLenum, value: GLint);
    pub fn glad_glProgramStringARB(target: GLenum, format: GLenum, len: GLsizei, string: *const c_void);
    pub fn glad_glProgramUniform1d(program: GLuint, location: GLint, v0: GLdouble);
    pub fn glad_glProgramUniform1dv(program: GLuint, location: GLint, count: GLsizei, value: *const GLdouble);
    pub fn glad_glProgramUniform1f(program: GLuint, location: GLint, v0: GLfloat);
    pub fn glad_glProgramUniform1fv(program: GLuint, location: GLint, count: GLsizei, value: *const GLfloat);
    pub fn glad_glProgramUniform1i(program: GLuint, location: GLint, v0: GLint);
    pub fn glad_glProgramUniform1i64ARB(program: GLuint, location: GLint, x: GLint64);
    pub fn glad_glProgramUniform1i64vARB(program: GLuint, location: GLint, count: GLsizei, value: *const GLint64);
    pub fn glad_glProgramUniform1iv(program: GLuint, location: GLint, count: GLsizei, value: *const GLint);
    pub fn glad_glProgramUniform1ui(program: GLuint, location: GLint, v0: GLuint);
    pub fn glad_glProgramUniform1ui64ARB(program: GLuint, location: GLint, x: GLuint64);
    pub fn glad_glProgramUniform1ui64vARB(program: GLuint, location: GLint, count: GLsizei, value: *const GLuint64);
    pub fn glad_glProgramUniform1uiv(program: GLuint, location: GLint, count: GLsizei, value: *const GLuint);
    pub fn glad_glProgramUniform2d(program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble);
    pub fn glad_glProgramUniform2dv(program: GLuint, location: GLint, count: GLsizei, value: *const GLdouble);
    pub fn glad_glProgramUniform2f(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat);
    pub fn glad_glProgramUniform2fv(program: GLuint, location: GLint, count: GLsizei, value: *const GLfloat);
    pub fn glad_glProgramUniform2i(program: GLuint, location: GLint, v0: GLint, v1: GLint);
    pub fn glad_glProgramUniform2i64ARB(program: GLuint, location: GLint, x: GLint64, y: GLint64);
    pub fn glad_glProgramUniform2i64vARB(program: GLuint, location: GLint, count: GLsizei, value: *const GLint64);
    pub fn glad_glProgramUniform2iv(program: GLuint, location: GLint, count: GLsizei, value: *const GLint);
    pub fn glad_glProgramUniform2ui(program: GLuint, location: GLint, v0: GLuint, v1: GLuint);
    pub fn glad_glProgramUniform2ui64ARB(program: GLuint, location: GLint, x: GLuint64, y: GLuint64);
    pub fn glad_glProgramUniform2ui64vARB(program: GLuint, location: GLint, count: GLsizei, value: *const GLuint64);
    pub fn glad_glProgramUniform2uiv(program: GLuint, location: GLint, count: GLsizei, value: *const GLuint);
    pub fn glad_glProgramUniform3d(program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble, v2: GLdouble);
    pub fn glad_glProgramUniform3dv(program: GLuint, location: GLint, count: GLsizei, value: *const GLdouble);
    pub fn glad_glProgramUniform3f(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat);
    pub fn glad_glProgramUniform3fv(program: GLuint, location: GLint, count: GLsizei, value: *const GLfloat);
    pub fn glad_glProgramUniform3i(program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint);
    pub fn glad_glProgramUniform3i64ARB(program: GLuint, location: GLint, x: GLint64, y: GLint64, z: GLint64);
    pub fn glad_glProgramUniform3i64vARB(program: GLuint, location: GLint, count: GLsizei, value: *const GLint64);
    pub fn glad_glProgramUniform3iv(program: GLuint, location: GLint, count: GLsizei, value: *const GLint);
    pub fn glad_glProgramUniform3ui(program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint);
    pub fn glad_glProgramUniform3ui64ARB(program: GLuint, location: GLint, x: GLuint64, y: GLuint64, z: GLuint64);
    pub fn glad_glProgramUniform3ui64vARB(program: GLuint, location: GLint, count: GLsizei, value: *const GLuint64);
    pub fn glad_glProgramUniform3uiv(program: GLuint, location: GLint, count: GLsizei, value: *const GLuint);
    pub fn glad_glProgramUniform4d(program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble, v2: GLdouble, v3: GLdouble);
    pub fn glad_glProgramUniform4dv(program: GLuint, location: GLint, count: GLsizei, value: *const GLdouble);
    pub fn glad_glProgramUniform4f(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat);
    pub fn glad_glProgramUniform4fv(program: GLuint, location: GLint, count: GLsizei, value: *const GLfloat);
    pub fn glad_glProgramUniform4i(program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint);
    pub fn glad_glProgramUniform4i64ARB(program: GLuint, location: GLint, x: GLint64, y: GLint64, z: GLint64, w: GLint64);
    pub fn glad_glProgramUniform4i64vARB(program: GLuint, location: GLint, count: GLsizei, value: *const GLint64);
    pub fn glad_glProgramUniform4iv(program: GLuint, location: GLint, count: GLsizei, value: *const GLint);
    pub fn glad_glProgramUniform4ui(program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint);
    pub fn glad_glProgramUniform4ui64ARB(program: GLuint, location: GLint, x: GLuint64, y: GLuint64, z: GLuint64, w: GLuint64);
    pub fn glad_glProgramUniform4ui64vARB(program: GLuint, location: GLint, count: GLsizei, value: *const GLuint64);
    pub fn glad_glProgramUniform4uiv(program: GLuint, location: GLint, count: GLsizei, value: *const GLuint);
    pub fn glad_glProgramUniformMatrix2dv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble);
    pub fn glad_glProgramUniformMatrix2fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat);
    pub fn glad_glProgramUniformMatrix2x3dv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble);
    pub fn glad_glProgramUniformMatrix2x3fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat);
    pub fn glad_glProgramUniformMatrix2x4dv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble);
    pub fn glad_glProgramUniformMatrix2x4fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat);
    pub fn glad_glProgramUniformMatrix3dv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble);
    pub fn glad_glProgramUniformMatrix3fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat);
    pub fn glad_glProgramUniformMatrix3x2dv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble);
    pub fn glad_glProgramUniformMatrix3x2fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat);
    pub fn glad_glProgramUniformMatrix3x4dv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble);
    pub fn glad_glProgramUniformMatrix3x4fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat);
    pub fn glad_glProgramUniformMatrix4dv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble);
    pub fn glad_glProgramUniformMatrix4fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat);
    pub fn glad_glProgramUniformMatrix4x2dv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble);
    pub fn glad_glProgramUniformMatrix4x2fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat);
    pub fn glad_glProgramUniformMatrix4x3dv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble);
    pub fn glad_glProgramUniformMatrix4x3fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat);
    pub fn glad_glProvokingVertex(mode: GLenum);
    pub fn glad_glPushDebugGroup(source: GLenum, id: GLuint, length: GLsizei, message: *const GLchar);
    pub fn glad_glQueryCounter(id: GLuint, target: GLenum);
    pub fn glad_glRasterPos2xOES(x: GLfixed, y: GLfixed);
    pub fn glad_glRasterPos2xvOES(coords: *const GLfixed);
    pub fn glad_glRasterPos3xOES(x: GLfixed, y: GLfixed, z: GLfixed);
    pub fn glad_glRasterPos3xvOES(coords: *const GLfixed);
    pub fn glad_glRasterPos4xOES(x: GLfixed, y: GLfixed, z: GLfixed, w: GLfixed);
    pub fn glad_glRasterPos4xvOES(coords: *const GLfixed);
    pub fn glad_glReadBuffer(src: GLenum);
    pub fn glad_glReadPixels(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, r#type: GLenum, pixels: *mut c_void);
    pub fn glad_glRectxOES(x1: GLfixed, y1: GLfixed, x2: GLfixed, y2: GLfixed);
    pub fn glad_glRectxvOES(v1: *const GLfixed, v2: *const GLfixed);
    pub fn glad_glReleaseShaderCompiler();
    pub fn glad_glRenderbufferStorage(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei);
    pub fn glad_glRenderbufferStorageEXT(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei);
    pub fn glad_glRenderbufferStorageMultisample(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei);
    pub fn glad_glRenderbufferStorageMultisampleEXT(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei);
    pub fn glad_glResumeTransformFeedback();
    pub fn glad_glRotatexOES(angle: GLfixed, x: GLfixed, y: GLfixed, z: GLfixed);
    pub fn glad_glSampleCoverage(value: GLfloat, invert: GLboolean);
    pub fn glad_glSampleCoverageARB(value: GLfloat, invert: GLboolean);
    pub fn glad_glSampleMaski(maskNumber: GLuint, mask: GLbitfield);
    pub fn glad_glSamplerParameterIiv(sampler: GLuint, pname: GLenum, param: *const GLint);
    pub fn glad_glSamplerParameterIuiv(sampler: GLuint, pname: GLenum, param: *const GLuint);
    pub fn glad_glSamplerParameterf(sampler: GLuint, pname: GLenum, param: GLfloat);
    pub fn glad_glSamplerParameterfv(sampler: GLuint, pname: GLenum, param: *const GLfloat);
    pub fn glad_glSamplerParameteri(sampler: GLuint, pname: GLenum, param: GLint);
    pub fn glad_glSamplerParameteriv(sampler: GLuint, pname: GLenum, param: *const GLint);
    pub fn glad_glScalexOES(x: GLfixed, y: GLfixed, z: GLfixed);
    pub fn glad_glScissor(x: GLint, y: GLint, width: GLsizei, height: GLsizei);
    pub fn glad_glScissorArrayv(first: GLuint, count: GLsizei, v: *const GLint);
    pub fn glad_glScissorIndexed(index: GLuint, left: GLint, bottom: GLint, width: GLsizei, height: GLsizei);
    pub fn glad_glScissorIndexedv(index: GLuint, v: *const GLint);
    pub fn glad_glShaderBinary(count: GLsizei, shaders: *const GLuint, binaryFormat: GLenum, binary: *const c_void, length: GLsizei);
    pub fn glad_glShaderSource(shader: GLuint, count: GLsizei, string: *const *const GLchar, length: *const GLint);
    pub fn glad_glShaderSourceARB(shaderObj: GLhandleARB, count: GLsizei, string: *mut *const GLcharARB, length: *const GLint);
    pub fn glad_glShaderStorageBlockBinding(program: GLuint, storageBlockIndex: GLuint, storageBlockBinding: GLuint);
    pub fn glad_glSpecializeShaderARB(shader: GLuint, pEntryPoint: *const GLchar, numSpecializationConstants: GLuint, pConstantIndex: *const GLuint, pConstantValue: *const GLuint);
    pub fn glad_glStencilFunc(func: GLenum, r#ref: GLint, mask: GLuint);
    pub fn glad_glStencilFuncSeparate(face: GLenum, func: GLenum, r#ref: GLint, mask: GLuint);
    pub fn glad_glStencilMask(mask: GLuint);
    pub fn glad_glStencilMaskSeparate(face: GLenum, mask: GLuint);
    pub fn glad_glStencilOp(fail: GLenum, zfail: GLenum, zpass: GLenum);
    pub fn glad_glStencilOpSeparate(face: GLenum, sfail: GLenum, dpfail: GLenum, dppass: GLenum);
    pub fn glad_glTexBuffer(target: GLenum, internalformat: GLenum, buffer: GLuint);
    pub fn glad_glTexBufferRange(target: GLenum, internalformat: GLenum, buffer: GLuint, offset: GLintptr, size: GLsizeiptr);
    pub fn glad_glTexCoord1xOES(s: GLfixed);
    pub fn glad_glTexCoord1xvOES(coords: *const GLfixed);
    pub fn glad_glTexCoord2xOES(s: GLfixed, t: GLfixed);
    pub fn glad_glTexCoord2xvOES(coords: *const GLfixed);
    pub fn glad_glTexCoord3xOES(s: GLfixed, t: GLfixed, r: GLfixed);
    pub fn glad_glTexCoord3xvOES(coords: *const GLfixed);
    pub fn glad_glTexCoord4xOES(s: GLfixed, t: GLfixed, r: GLfixed, q: GLfixed);
    pub fn glad_glTexCoord4xvOES(coords: *const GLfixed);
    pub fn glad_glTexEnvxOES(target: GLenum, pname: GLenum, param: GLfixed);
    pub fn glad_glTexEnvxvOES(target: GLenum, pname: GLenum, params: *const GLfixed);
    pub fn glad_glTexGenxOES(coord: GLenum, pname: GLenum, param: GLfixed);
    pub fn glad_glTexGenxvOES(coord: GLenum, pname: GLenum, params: *const GLfixed);
    pub fn glad_glTexImage1D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, border: GLint, format: GLenum, r#type: GLenum, pixels: *const c_void);
    pub fn glad_glTexImage2D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, r#type: GLenum, pixels: *const c_void);
    pub fn glad_glTexImage2DMultisample(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean);
    pub fn glad_glTexImage3D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, r#type: GLenum, pixels: *const c_void);
    pub fn glad_glTexImage3DMultisample(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean);
    pub fn glad_glTexParameterIiv(target: GLenum, pname: GLenum, params: *const GLint);
    pub fn glad_glTexParameterIuiv(target: GLenum, pname: GLenum, params: *const GLuint);
    pub fn glad_glTexParameterf(target: GLenum, pname: GLenum, param: GLfloat);
    pub fn glad_glTexParameterfv(target: GLenum, pname: GLenum, params: *const GLfloat);
    pub fn glad_glTexParameteri(target: GLenum, pname: GLenum, param: GLint);
    pub fn glad_glTexParameteriv(target: GLenum, pname: GLenum, params: *const GLint);
    pub fn glad_glTexParameterxOES(target: GLenum, pname: GLenum, param: GLfixed);
    pub fn glad_glTexParameterxvOES(target: GLenum, pname: GLenum, params: *const GLfixed);
    pub fn glad_glTexStorage1D(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei);
    pub fn glad_glTexStorage2D(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei);
    pub fn glad_glTexStorage2DMultisample(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean);
    pub fn glad_glTexStorage3D(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei);
    pub fn glad_glTexStorage3DMultisample(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean);
    pub fn glad_glTexSubImage1D(target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, r#type: GLenum, pixels: *const c_void);
    pub fn glad_glTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, r#type: GLenum, pixels: *const c_void);
    pub fn glad_glTexSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, r#type: GLenum, pixels: *const c_void);
    pub fn glad_glTextureBuffer(texture: GLuint, internalformat: GLenum, buffer: GLuint);
    pub fn glad_glTextureBufferRange(texture: GLuint, internalformat: GLenum, buffer: GLuint, offset: GLintptr, size: GLsizeiptr);
    pub fn glad_glTextureParameterIiv(texture: GLuint, pname: GLenum, params: *const GLint);
    pub fn glad_glTextureParameterIuiv(texture: GLuint, pname: GLenum, params: *const GLuint);
    pub fn glad_glTextureParameterf(texture: GLuint, pname: GLenum, param: GLfloat);
    pub fn glad_glTextureParameterfv(texture: GLuint, pname: GLenum, param: *const GLfloat);
    pub fn glad_glTextureParameteri(texture: GLuint, pname: GLenum, param: GLint);
    pub fn glad_glTextureParameteriv(texture: GLuint, pname: GLenum, param: *const GLint);
    pub fn glad_glTextureStorage1D(texture: GLuint, levels: GLsizei, internalformat: GLenum, width: GLsizei);
    pub fn glad_glTextureStorage2D(texture: GLuint, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei);
    pub fn glad_glTextureStorage2DMultisample(texture: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean);
    pub fn glad_glTextureStorage3D(texture: GLuint, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei);
    pub fn glad_glTextureStorage3DMultisample(texture: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean);
    pub fn glad_glTextureSubImage1D(texture: GLuint, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, r#type: GLenum, pixels: *const c_void);
    pub fn glad_glTextureSubImage2D(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, r#type: GLenum, pixels: *const c_void);
    pub fn glad_glTextureSubImage3D(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, r#type: GLenum, pixels: *const c_void);
    pub fn glad_glTextureView(texture: GLuint, target: GLenum, origtexture: GLuint, internalformat: GLenum, minlevel: GLuint, numlevels: GLuint, minlayer: GLuint, numlayers: GLuint);
    pub fn glad_glTransformFeedbackBufferBase(xfb: GLuint, index: GLuint, buffer: GLuint);
    pub fn glad_glTransformFeedbackBufferRange(xfb: GLuint, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr);
    pub fn glad_glTransformFeedbackVaryings(program: GLuint, count: GLsizei, varyings: *const *const GLchar, bufferMode: GLenum);
    pub fn glad_glTranslatexOES(x: GLfixed, y: GLfixed, z: GLfixed);
    pub fn glad_glUniform1d(location: GLint, x: GLdouble);
    pub fn glad_glUniform1dv(location: GLint, count: GLsizei, value: *const GLdouble);
    pub fn glad_glUniform1f(location: GLint, v0: GLfloat);
    pub fn glad_glUniform1fARB(location: GLint, v0: GLfloat);
    pub fn glad_glUniform1fv(location: GLint, count: GLsizei, value: *const GLfloat);
    pub fn glad_glUniform1fvARB(location: GLint, count: GLsizei, value: *const GLfloat);
    pub fn glad_glUniform1i(location: GLint, v0: GLint);
    pub fn glad_glUniform1i64ARB(location: GLint, x: GLint64);
    pub fn glad_glUniform1i64vARB(location: GLint, count: GLsizei, value: *const GLint64);
    pub fn glad_glUniform1iARB(location: GLint, v0: GLint);
    pub fn glad_glUniform1iv(location: GLint, count: GLsizei, value: *const GLint);
    pub fn glad_glUniform1ivARB(location: GLint, count: GLsizei, value: *const GLint);
    pub fn glad_glUniform1ui(location: GLint, v0: GLuint);
    pub fn glad_glUniform1ui64ARB(location: GLint, x: GLuint64);
    pub fn glad_glUniform1ui64vARB(location: GLint, count: GLsizei, value: *const GLuint64);
    pub fn glad_glUniform1uiv(location: GLint, count: GLsizei, value: *const GLuint);
    pub fn glad_glUniform2d(location: GLint, x: GLdouble, y: GLdouble);
    pub fn glad_glUniform2dv(location: GLint, count: GLsizei, value: *const GLdouble);
    pub fn glad_glUniform2f(location: GLint, v0: GLfloat, v1: GLfloat);
    pub fn glad_glUniform2fARB(location: GLint, v0: GLfloat, v1: GLfloat);
    pub fn glad_glUniform2fv(location: GLint, count: GLsizei, value: *const GLfloat);
    pub fn glad_glUniform2fvARB(location: GLint, count: GLsizei, value: *const GLfloat);
    pub fn glad_glUniform2i(location: GLint, v0: GLint, v1: GLint);
    pub fn glad_glUniform2i64ARB(location: GLint, x: GLint64, y: GLint64);
    pub fn glad_glUniform2i64vARB(location: GLint, count: GLsizei, value: *const GLint64);
    pub fn glad_glUniform2iARB(location: GLint, v0: GLint, v1: GLint);
    pub fn glad_glUniform2iv(location: GLint, count: GLsizei, value: *const GLint);
    pub fn glad_glUniform2ivARB(location: GLint, count: GLsizei, value: *const GLint);
    pub fn glad_glUniform2ui(location: GLint, v0: GLuint, v1: GLuint);
    pub fn glad_glUniform2ui64ARB(location: GLint, x: GLuint64, y: GLuint64);
    pub fn glad_glUniform2ui64vARB(location: GLint, count: GLsizei, value: *const GLuint64);
    pub fn glad_glUniform2uiv(location: GLint, count: GLsizei, value: *const GLuint);
    pub fn glad_glUniform3d(location: GLint, x: GLdouble, y: GLdouble, z: GLdouble);
    pub fn glad_glUniform3dv(location: GLint, count: GLsizei, value: *const GLdouble);
    pub fn glad_glUniform3f(location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat);
    pub fn glad_glUniform3fARB(location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat);
    pub fn glad_glUniform3fv(location: GLint, count: GLsizei, value: *const GLfloat);
    pub fn glad_glUniform3fvARB(location: GLint, count: GLsizei, value: *const GLfloat);
    pub fn glad_glUniform3i(location: GLint, v0: GLint, v1: GLint, v2: GLint);
    pub fn glad_glUniform3i64ARB(location: GLint, x: GLint64, y: GLint64, z: GLint64);
    pub fn glad_glUniform3i64vARB(location: GLint, count: GLsizei, value: *const GLint64);
    pub fn glad_glUniform3iARB(location: GLint, v0: GLint, v1: GLint, v2: GLint);
    pub fn glad_glUniform3iv(location: GLint, count: GLsizei, value: *const GLint);
    pub fn glad_glUniform3ivARB(location: GLint, count: GLsizei, value: *const GLint);
    pub fn glad_glUniform3ui(location: GLint, v0: GLuint, v1: GLuint, v2: GLuint);
    pub fn glad_glUniform3ui64ARB(location: GLint, x: GLuint64, y: GLuint64, z: GLuint64);
    pub fn glad_glUniform3ui64vARB(location: GLint, count: GLsizei, value: *const GLuint64);
    pub fn glad_glUniform3uiv(location: GLint, count: GLsizei, value: *const GLuint);
    pub fn glad_glUniform4d(location: GLint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble);
    pub fn glad_glUniform4dv(location: GLint, count: GLsizei, value: *const GLdouble);
    pub fn glad_glUniform4f(location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat);
    pub fn glad_glUniform4fARB(location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat);
    pub fn glad_glUniform4fv(location: GLint, count: GLsizei, value: *const GLfloat);
    pub fn glad_glUniform4fvARB(location: GLint, count: GLsizei, value: *const GLfloat);
    pub fn glad_glUniform4i(location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint);
    pub fn glad_glUniform4i64ARB(location: GLint, x: GLint64, y: GLint64, z: GLint64, w: GLint64);
    pub fn glad_glUniform4i64vARB(location: GLint, count: GLsizei, value: *const GLint64);
    pub fn glad_glUniform4iARB(location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint);
    pub fn glad_glUniform4iv(location: GLint, count: GLsizei, value: *const GLint);
    pub fn glad_glUniform4ivARB(location: GLint, count: GLsizei, value: *const GLint);
    pub fn glad_glUniform4ui(location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint);
    pub fn glad_glUniform4ui64ARB(location: GLint, x: GLuint64, y: GLuint64, z: GLuint64, w: GLuint64);
    pub fn glad_glUniform4ui64vARB(location: GLint, count: GLsizei, value: *const GLuint64);
    pub fn glad_glUniform4uiv(location: GLint, count: GLsizei, value: *const GLuint);
    pub fn glad_glUniformBlockBinding(program: GLuint, uniformBlockIndex: GLuint, uniformBlockBinding: GLuint);
    pub fn glad_glUniformMatrix2dv(location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble);
    pub fn glad_glUniformMatrix2fv(location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat);
    pub fn glad_glUniformMatrix2fvARB(location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat);
    pub fn glad_glUniformMatrix2x3dv(location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble);
    pub fn glad_glUniformMatrix2x3fv(location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat);
    pub fn glad_glUniformMatrix2x4dv(location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble);
    pub fn glad_glUniformMatrix2x4fv(location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat);
    pub fn glad_glUniformMatrix3dv(location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble);
    pub fn glad_glUniformMatrix3fv(location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat);
    pub fn glad_glUniformMatrix3fvARB(location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat);
    pub fn glad_glUniformMatrix3x2dv(location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble);
    pub fn glad_glUniformMatrix3x2fv(location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat);
    pub fn glad_glUniformMatrix3x4dv(location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble);
    pub fn glad_glUniformMatrix3x4fv(location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat);
    pub fn glad_glUniformMatrix4dv(location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble);
    pub fn glad_glUniformMatrix4fv(location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat);
    pub fn glad_glUniformMatrix4fvARB(location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat);
    pub fn glad_glUniformMatrix4x2dv(location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble);
    pub fn glad_glUniformMatrix4x2fv(location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat);
    pub fn glad_glUniformMatrix4x3dv(location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble);
    pub fn glad_glUniformMatrix4x3fv(location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat);
    pub fn glad_glUniformSubroutinesuiv(shadertype: GLenum, count: GLsizei, indices: *const GLuint);
    pub fn glad_glUnmapBuffer(target: GLenum) -> GLboolean;
    pub fn glad_glUnmapBufferARB(target: GLenum) -> GLboolean;
    pub fn glad_glUnmapNamedBuffer(buffer: GLuint) -> GLboolean;
    pub fn glad_glUseProgram(program: GLuint);
    pub fn glad_glUseProgramObjectARB(programObj: GLhandleARB);
    pub fn glad_glUseProgramStages(pipeline: GLuint, stages: GLbitfield, program: GLuint);
    pub fn glad_glValidateProgram(program: GLuint);
    pub fn glad_glValidateProgramARB(programObj: GLhandleARB);
    pub fn glad_glValidateProgramPipeline(pipeline: GLuint);
    pub fn glad_glVertex2xOES(x: GLfixed);
    pub fn glad_glVertex2xvOES(coords: *const GLfixed);
    pub fn glad_glVertex3xOES(x: GLfixed, y: GLfixed);
    pub fn glad_glVertex3xvOES(coords: *const GLfixed);
    pub fn glad_glVertex4xOES(x: GLfixed, y: GLfixed, z: GLfixed);
    pub fn glad_glVertex4xvOES(coords: *const GLfixed);
    pub fn glad_glVertexArrayAttribBinding(vaobj: GLuint, attribindex: GLuint, bindingindex: GLuint);
    pub fn glad_glVertexArrayAttribFormat(vaobj: GLuint, attribindex: GLuint, size: GLint, r#type: GLenum, normalized: GLboolean, relativeoffset: GLuint);
    pub fn glad_glVertexArrayAttribIFormat(vaobj: GLuint, attribindex: GLuint, size: GLint, r#type: GLenum, relativeoffset: GLuint);
    pub fn glad_glVertexArrayAttribLFormat(vaobj: GLuint, attribindex: GLuint, size: GLint, r#type: GLenum, relativeoffset: GLuint);
    pub fn glad_glVertexArrayBindingDivisor(vaobj: GLuint, bindingindex: GLuint, divisor: GLuint);
    pub fn glad_glVertexArrayElementBuffer(vaobj: GLuint, buffer: GLuint);
    pub fn glad_glVertexArrayVertexBuffer(vaobj: GLuint, bindingindex: GLuint, buffer: GLuint, offset: GLintptr, stride: GLsizei);
    pub fn glad_glVertexArrayVertexBuffers(vaobj: GLuint, first: GLuint, count: GLsizei, buffers: *const GLuint, offsets: *const GLintptr, strides: *const GLsizei);
    pub fn glad_glVertexAttrib1d(index: GLuint, x: GLdouble);
    pub fn glad_glVertexAttrib1dARB(index: GLuint, x: GLdouble);
    pub fn glad_glVertexAttrib1dv(index: GLuint, v: *const GLdouble);
    pub fn glad_glVertexAttrib1dvARB(index: GLuint, v: *const GLdouble);
    pub fn glad_glVertexAttrib1f(index: GLuint, x: GLfloat);
    pub fn glad_glVertexAttrib1fARB(index: GLuint, x: GLfloat);
    pub fn glad_glVertexAttrib1fv(index: GLuint, v: *const GLfloat);
    pub fn glad_glVertexAttrib1fvARB(index: GLuint, v: *const GLfloat);
    pub fn glad_glVertexAttrib1s(index: GLuint, x: GLshort);
    pub fn glad_glVertexAttrib1sARB(index: GLuint, x: GLshort);
    pub fn glad_glVertexAttrib1sv(index: GLuint, v: *const GLshort);
    pub fn glad_glVertexAttrib1svARB(index: GLuint, v: *const GLshort);
    pub fn glad_glVertexAttrib2d(index: GLuint, x: GLdouble, y: GLdouble);
    pub fn glad_glVertexAttrib2dARB(index: GLuint, x: GLdouble, y: GLdouble);
    pub fn glad_glVertexAttrib2dv(index: GLuint, v: *const GLdouble);
    pub fn glad_glVertexAttrib2dvARB(index: GLuint, v: *const GLdouble);
    pub fn glad_glVertexAttrib2f(index: GLuint, x: GLfloat, y: GLfloat);
    pub fn glad_glVertexAttrib2fARB(index: GLuint, x: GLfloat, y: GLfloat);
    pub fn glad_glVertexAttrib2fv(index: GLuint, v: *const GLfloat);
    pub fn glad_glVertexAttrib2fvARB(index: GLuint, v: *const GLfloat);
    pub fn glad_glVertexAttrib2s(index: GLuint, x: GLshort, y: GLshort);
    pub fn glad_glVertexAttrib2sARB(index: GLuint, x: GLshort, y: GLshort);
    pub fn glad_glVertexAttrib2sv(index: GLuint, v: *const GLshort);
    pub fn glad_glVertexAttrib2svARB(index: GLuint, v: *const GLshort);
    pub fn glad_glVertexAttrib3d(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble);
    pub fn glad_glVertexAttrib3dARB(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble);
    pub fn glad_glVertexAttrib3dv(index: GLuint, v: *const GLdouble);
    pub fn glad_glVertexAttrib3dvARB(index: GLuint, v: *const GLdouble);
    pub fn glad_glVertexAttrib3f(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat);
    pub fn glad_glVertexAttrib3fARB(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat);
    pub fn glad_glVertexAttrib3fv(index: GLuint, v: *const GLfloat);
    pub fn glad_glVertexAttrib3fvARB(index: GLuint, v: *const GLfloat);
    pub fn glad_glVertexAttrib3s(index: GLuint, x: GLshort, y: GLshort, z: GLshort);
    pub fn glad_glVertexAttrib3sARB(index: GLuint, x: GLshort, y: GLshort, z: GLshort);
    pub fn glad_glVertexAttrib3sv(index: GLuint, v: *const GLshort);
    pub fn glad_glVertexAttrib3svARB(index: GLuint, v: *const GLshort);
    pub fn glad_glVertexAttrib4Nbv(index: GLuint, v: *const GLbyte);
    pub fn glad_glVertexAttrib4NbvARB(index: GLuint, v: *const GLbyte);
    pub fn glad_glVertexAttrib4Niv(index: GLuint, v: *const GLint);
    pub fn glad_glVertexAttrib4NivARB(index: GLuint, v: *const GLint);
    pub fn glad_glVertexAttrib4Nsv(index: GLuint, v: *const GLshort);
    pub fn glad_glVertexAttrib4NsvARB(index: GLuint, v: *const GLshort);
    pub fn glad_glVertexAttrib4Nub(index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte);
    pub fn glad_glVertexAttrib4NubARB(index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte);
    pub fn glad_glVertexAttrib4Nubv(index: GLuint, v: *const GLubyte);
    pub fn glad_glVertexAttrib4NubvARB(index: GLuint, v: *const GLubyte);
    pub fn glad_glVertexAttrib4Nuiv(index: GLuint, v: *const GLuint);
    pub fn glad_glVertexAttrib4NuivARB(index: GLuint, v: *const GLuint);
    pub fn glad_glVertexAttrib4Nusv(index: GLuint, v: *const GLushort);
    pub fn glad_glVertexAttrib4NusvARB(index: GLuint, v: *const GLushort);
    pub fn glad_glVertexAttrib4bv(index: GLuint, v: *const GLbyte);
    pub fn glad_glVertexAttrib4bvARB(index: GLuint, v: *const GLbyte);
    pub fn glad_glVertexAttrib4d(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble);
    pub fn glad_glVertexAttrib4dARB(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble);
    pub fn glad_glVertexAttrib4dv(index: GLuint, v: *const GLdouble);
    pub fn glad_glVertexAttrib4dvARB(index: GLuint, v: *const GLdouble);
    pub fn glad_glVertexAttrib4f(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat);
    pub fn glad_glVertexAttrib4fARB(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat);
    pub fn glad_glVertexAttrib4fv(index: GLuint, v: *const GLfloat);
    pub fn glad_glVertexAttrib4fvARB(index: GLuint, v: *const GLfloat);
    pub fn glad_glVertexAttrib4iv(index: GLuint, v: *const GLint);
    pub fn glad_glVertexAttrib4ivARB(index: GLuint, v: *const GLint);
    pub fn glad_glVertexAttrib4s(index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort);
    pub fn glad_glVertexAttrib4sARB(index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort);
    pub fn glad_glVertexAttrib4sv(index: GLuint, v: *const GLshort);
    pub fn glad_glVertexAttrib4svARB(index: GLuint, v: *const GLshort);
    pub fn glad_glVertexAttrib4ubv(index: GLuint, v: *const GLubyte);
    pub fn glad_glVertexAttrib4ubvARB(index: GLuint, v: *const GLubyte);
    pub fn glad_glVertexAttrib4uiv(index: GLuint, v: *const GLuint);
    pub fn glad_glVertexAttrib4uivARB(index: GLuint, v: *const GLuint);
    pub fn glad_glVertexAttrib4usv(index: GLuint, v: *const GLushort);
    pub fn glad_glVertexAttrib4usvARB(index: GLuint, v: *const GLushort);
    pub fn glad_glVertexAttribBinding(attribindex: GLuint, bindingindex: GLuint);
    pub fn glad_glVertexAttribDivisor(index: GLuint, divisor: GLuint);
    pub fn glad_glVertexAttribDivisorARB(index: GLuint, divisor: GLuint);
    pub fn glad_glVertexAttribFormat(attribindex: GLuint, size: GLint, r#type: GLenum, normalized: GLboolean, relativeoffset: GLuint);
    pub fn glad_glVertexAttribI1i(index: GLuint, x: GLint);
    pub fn glad_glVertexAttribI1iv(index: GLuint, v: *const GLint);
    pub fn glad_glVertexAttribI1ui(index: GLuint, x: GLuint);
    pub fn glad_glVertexAttribI1uiv(index: GLuint, v: *const GLuint);
    pub fn glad_glVertexAttribI2i(index: GLuint, x: GLint, y: GLint);
    pub fn glad_glVertexAttribI2iv(index: GLuint, v: *const GLint);
    pub fn glad_glVertexAttribI2ui(index: GLuint, x: GLuint, y: GLuint);
    pub fn glad_glVertexAttribI2uiv(index: GLuint, v: *const GLuint);
    pub fn glad_glVertexAttribI3i(index: GLuint, x: GLint, y: GLint, z: GLint);
    pub fn glad_glVertexAttribI3iv(index: GLuint, v: *const GLint);
    pub fn glad_glVertexAttribI3ui(index: GLuint, x: GLuint, y: GLuint, z: GLuint);
    pub fn glad_glVertexAttribI3uiv(index: GLuint, v: *const GLuint);
    pub fn glad_glVertexAttribI4bv(index: GLuint, v: *const GLbyte);
    pub fn glad_glVertexAttribI4i(index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint);
    pub fn glad_glVertexAttribI4iv(index: GLuint, v: *const GLint);
    pub fn glad_glVertexAttribI4sv(index: GLuint, v: *const GLshort);
    pub fn glad_glVertexAttribI4ubv(index: GLuint, v: *const GLubyte);
    pub fn glad_glVertexAttribI4ui(index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint);
    pub fn glad_glVertexAttribI4uiv(index: GLuint, v: *const GLuint);
    pub fn glad_glVertexAttribI4usv(index: GLuint, v: *const GLushort);
    pub fn glad_glVertexAttribIFormat(attribindex: GLuint, size: GLint, r#type: GLenum, relativeoffset: GLuint);
    pub fn glad_glVertexAttribIPointer(index: GLuint, size: GLint, r#type: GLenum, stride: GLsizei, pointer: *const c_void);
    pub fn glad_glVertexAttribL1d(index: GLuint, x: GLdouble);
    pub fn glad_glVertexAttribL1dv(index: GLuint, v: *const GLdouble);
    pub fn glad_glVertexAttribL2d(index: GLuint, x: GLdouble, y: GLdouble);
    pub fn glad_glVertexAttribL2dv(index: GLuint, v: *const GLdouble);
    pub fn glad_glVertexAttribL3d(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble);
    pub fn glad_glVertexAttribL3dv(index: GLuint, v: *const GLdouble);
    pub fn glad_glVertexAttribL4d(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble);
    pub fn glad_glVertexAttribL4dv(index: GLuint, v: *const GLdouble);
    pub fn glad_glVertexAttribLFormat(attribindex: GLuint, size: GLint, r#type: GLenum, relativeoffset: GLuint);
    pub fn glad_glVertexAttribLPointer(index: GLuint, size: GLint, r#type: GLenum, stride: GLsizei, pointer: *const c_void);
    pub fn glad_glVertexAttribP1ui(index: GLuint, r#type: GLenum, normalized: GLboolean, value: GLuint);
    pub fn glad_glVertexAttribP1uiv(index: GLuint, r#type: GLenum, normalized: GLboolean, value: *const GLuint);
    pub fn glad_glVertexAttribP2ui(index: GLuint, r#type: GLenum, normalized: GLboolean, value: GLuint);
    pub fn glad_glVertexAttribP2uiv(index: GLuint, r#type: GLenum, normalized: GLboolean, value: *const GLuint);
    pub fn glad_glVertexAttribP3ui(index: GLuint, r#type: GLenum, normalized: GLboolean, value: GLuint);
    pub fn glad_glVertexAttribP3uiv(index: GLuint, r#type: GLenum, normalized: GLboolean, value: *const GLuint);
    pub fn glad_glVertexAttribP4ui(index: GLuint, r#type: GLenum, normalized: GLboolean, value: GLuint);
    pub fn glad_glVertexAttribP4uiv(index: GLuint, r#type: GLenum, normalized: GLboolean, value: *const GLuint);
    pub fn glad_glVertexAttribPointer(index: GLuint, size: GLint, r#type: GLenum, normalized: GLboolean, stride: GLsizei, pointer: *const c_void);
    pub fn glad_glVertexAttribPointerARB(index: GLuint, size: GLint, r#type: GLenum, normalized: GLboolean, stride: GLsizei, pointer: *const c_void);
    pub fn glad_glVertexBindingDivisor(bindingindex: GLuint, divisor: GLuint);
    pub fn glad_glViewport(x: GLint, y: GLint, width: GLsizei, height: GLsizei);
    pub fn glad_glViewportArrayv(first: GLuint, count: GLsizei, v: *const GLfloat);
    pub fn glad_glViewportIndexedf(index: GLuint, x: GLfloat, y: GLfloat, w: GLfloat, h: GLfloat);
    pub fn glad_glViewportIndexedfv(index: GLuint, v: *const GLfloat);
    pub fn glad_glWaitSync(sync: GLsync, flags: GLbitfield, timeout: GLuint64);
}
pub use glad_glAccumxOES as glAccumxOES;
pub use glad_glActiveShaderProgram as glActiveShaderProgram;
pub use glad_glActiveTexture as glActiveTexture;
pub use glad_glActiveTextureARB as glActiveTextureARB;
pub use glad_glAlphaFuncxOES as glAlphaFuncxOES;
pub use glad_glAttachObjectARB as glAttachObjectARB;
pub use glad_glAttachShader as glAttachShader;
pub use glad_glBeginConditionalRender as glBeginConditionalRender;
pub use glad_glBeginQuery as glBeginQuery;
pub use glad_glBeginQueryARB as glBeginQueryARB;
pub use glad_glBeginQueryIndexed as glBeginQueryIndexed;
pub use glad_glBeginTransformFeedback as glBeginTransformFeedback;
pub use glad_glBindAttribLocation as glBindAttribLocation;
pub use glad_glBindAttribLocationARB as glBindAttribLocationARB;
pub use glad_glBindBuffer as glBindBuffer;
pub use glad_glBindBufferARB as glBindBufferARB;
pub use glad_glBindBufferBase as glBindBufferBase;
pub use glad_glBindBufferRange as glBindBufferRange;
pub use glad_glBindBuffersBase as glBindBuffersBase;
pub use glad_glBindBuffersRange as glBindBuffersRange;
pub use glad_glBindFragDataLocation as glBindFragDataLocation;
pub use glad_glBindFragDataLocationIndexed as glBindFragDataLocationIndexed;
pub use glad_glBindFramebuffer as glBindFramebuffer;
pub use glad_glBindFramebufferEXT as glBindFramebufferEXT;
pub use glad_glBindImageTexture as glBindImageTexture;
pub use glad_glBindImageTextures as glBindImageTextures;
pub use glad_glBindProgramARB as glBindProgramARB;
pub use glad_glBindProgramPipeline as glBindProgramPipeline;
pub use glad_glBindRenderbuffer as glBindRenderbuffer;
pub use glad_glBindRenderbufferEXT as glBindRenderbufferEXT;
pub use glad_glBindSampler as glBindSampler;
pub use glad_glBindSamplers as glBindSamplers;
pub use glad_glBindTexture as glBindTexture;
pub use glad_glBindTextureUnit as glBindTextureUnit;
pub use glad_glBindTextures as glBindTextures;
pub use glad_glBindTransformFeedback as glBindTransformFeedback;
pub use glad_glBindVertexArray as glBindVertexArray;
pub use glad_glBindVertexBuffer as glBindVertexBuffer;
pub use glad_glBindVertexBuffers as glBindVertexBuffers;
pub use glad_glBitmapxOES as glBitmapxOES;
pub use glad_glBlendColor as glBlendColor;
pub use glad_glBlendColorxOES as glBlendColorxOES;
pub use glad_glBlendEquation as glBlendEquation;
pub use glad_glBlendEquationSeparate as glBlendEquationSeparate;
pub use glad_glBlendEquationSeparatei as glBlendEquationSeparatei;
pub use glad_glBlendEquationSeparateiARB as glBlendEquationSeparateiARB;
pub use glad_glBlendEquationi as glBlendEquationi;
pub use glad_glBlendEquationiARB as glBlendEquationiARB;
pub use glad_glBlendFunc as glBlendFunc;
pub use glad_glBlendFuncSeparate as glBlendFuncSeparate;
pub use glad_glBlendFuncSeparatei as glBlendFuncSeparatei;
pub use glad_glBlendFuncSeparateiARB as glBlendFuncSeparateiARB;
pub use glad_glBlendFunci as glBlendFunci;
pub use glad_glBlendFunciARB as glBlendFunciARB;
pub use glad_glBlitFramebuffer as glBlitFramebuffer;
pub use glad_glBlitFramebufferEXT as glBlitFramebufferEXT;
pub use glad_glBlitNamedFramebuffer as glBlitNamedFramebuffer;
pub use glad_glBufferData as glBufferData;
pub use glad_glBufferDataARB as glBufferDataARB;
pub use glad_glBufferStorage as glBufferStorage;
pub use glad_glBufferSubData as glBufferSubData;
pub use glad_glBufferSubDataARB as glBufferSubDataARB;
pub use glad_glCheckFramebufferStatus as glCheckFramebufferStatus;
pub use glad_glCheckFramebufferStatusEXT as glCheckFramebufferStatusEXT;
pub use glad_glCheckNamedFramebufferStatus as glCheckNamedFramebufferStatus;
pub use glad_glClampColor as glClampColor;
pub use glad_glClampColorARB as glClampColorARB;
pub use glad_glClear as glClear;
pub use glad_glClearAccumxOES as glClearAccumxOES;
pub use glad_glClearBufferData as glClearBufferData;
pub use glad_glClearBufferSubData as glClearBufferSubData;
pub use glad_glClearBufferfi as glClearBufferfi;
pub use glad_glClearBufferfv as glClearBufferfv;
pub use glad_glClearBufferiv as glClearBufferiv;
pub use glad_glClearBufferuiv as glClearBufferuiv;
pub use glad_glClearColor as glClearColor;
pub use glad_glClearColorxOES as glClearColorxOES;
pub use glad_glClearDepth as glClearDepth;
pub use glad_glClearDepthf as glClearDepthf;
pub use glad_glClearDepthxOES as glClearDepthxOES;
pub use glad_glClearNamedBufferData as glClearNamedBufferData;
pub use glad_glClearNamedBufferSubData as glClearNamedBufferSubData;
pub use glad_glClearNamedFramebufferfi as glClearNamedFramebufferfi;
pub use glad_glClearNamedFramebufferfv as glClearNamedFramebufferfv;
pub use glad_glClearNamedFramebufferiv as glClearNamedFramebufferiv;
pub use glad_glClearNamedFramebufferuiv as glClearNamedFramebufferuiv;
pub use glad_glClearStencil as glClearStencil;
pub use glad_glClearTexImage as glClearTexImage;
pub use glad_glClearTexSubImage as glClearTexSubImage;
pub use glad_glClientActiveTextureARB as glClientActiveTextureARB;
pub use glad_glClientWaitSync as glClientWaitSync;
pub use glad_glClipPlanexOES as glClipPlanexOES;
pub use glad_glColor3xOES as glColor3xOES;
pub use glad_glColor3xvOES as glColor3xvOES;
pub use glad_glColor4xOES as glColor4xOES;
pub use glad_glColor4xvOES as glColor4xvOES;
pub use glad_glColorMask as glColorMask;
pub use glad_glColorMaski as glColorMaski;
pub use glad_glCompileShader as glCompileShader;
pub use glad_glCompileShaderARB as glCompileShaderARB;
pub use glad_glCompileShaderIncludeARB as glCompileShaderIncludeARB;
pub use glad_glCompressedTexImage1D as glCompressedTexImage1D;
pub use glad_glCompressedTexImage1DARB as glCompressedTexImage1DARB;
pub use glad_glCompressedTexImage2D as glCompressedTexImage2D;
pub use glad_glCompressedTexImage2DARB as glCompressedTexImage2DARB;
pub use glad_glCompressedTexImage3D as glCompressedTexImage3D;
pub use glad_glCompressedTexImage3DARB as glCompressedTexImage3DARB;
pub use glad_glCompressedTexSubImage1D as glCompressedTexSubImage1D;
pub use glad_glCompressedTexSubImage1DARB as glCompressedTexSubImage1DARB;
pub use glad_glCompressedTexSubImage2D as glCompressedTexSubImage2D;
pub use glad_glCompressedTexSubImage2DARB as glCompressedTexSubImage2DARB;
pub use glad_glCompressedTexSubImage3D as glCompressedTexSubImage3D;
pub use glad_glCompressedTexSubImage3DARB as glCompressedTexSubImage3DARB;
pub use glad_glCompressedTextureSubImage1D as glCompressedTextureSubImage1D;
pub use glad_glCompressedTextureSubImage2D as glCompressedTextureSubImage2D;
pub use glad_glCompressedTextureSubImage3D as glCompressedTextureSubImage3D;
pub use glad_glConvolutionParameterxOES as glConvolutionParameterxOES;
pub use glad_glConvolutionParameterxvOES as glConvolutionParameterxvOES;
pub use glad_glCopyBufferSubData as glCopyBufferSubData;
pub use glad_glCopyImageSubData as glCopyImageSubData;
pub use glad_glCopyNamedBufferSubData as glCopyNamedBufferSubData;
pub use glad_glCopyTexImage1D as glCopyTexImage1D;
pub use glad_glCopyTexImage2D as glCopyTexImage2D;
pub use glad_glCopyTexSubImage1D as glCopyTexSubImage1D;
pub use glad_glCopyTexSubImage2D as glCopyTexSubImage2D;
pub use glad_glCopyTexSubImage3D as glCopyTexSubImage3D;
pub use glad_glCopyTextureSubImage1D as glCopyTextureSubImage1D;
pub use glad_glCopyTextureSubImage2D as glCopyTextureSubImage2D;
pub use glad_glCopyTextureSubImage3D as glCopyTextureSubImage3D;
pub use glad_glCreateBuffers as glCreateBuffers;
pub use glad_glCreateFramebuffers as glCreateFramebuffers;
pub use glad_glCreateProgram as glCreateProgram;
pub use glad_glCreateProgramObjectARB as glCreateProgramObjectARB;
pub use glad_glCreateProgramPipelines as glCreateProgramPipelines;
pub use glad_glCreateQueries as glCreateQueries;
pub use glad_glCreateRenderbuffers as glCreateRenderbuffers;
pub use glad_glCreateSamplers as glCreateSamplers;
pub use glad_glCreateShader as glCreateShader;
pub use glad_glCreateShaderObjectARB as glCreateShaderObjectARB;
pub use glad_glCreateShaderProgramv as glCreateShaderProgramv;
pub use glad_glCreateTextures as glCreateTextures;
pub use glad_glCreateTransformFeedbacks as glCreateTransformFeedbacks;
pub use glad_glCreateVertexArrays as glCreateVertexArrays;
pub use glad_glCullFace as glCullFace;
pub use glad_glDebugMessageCallback as glDebugMessageCallback;
pub use glad_glDebugMessageCallbackARB as glDebugMessageCallbackARB;
pub use glad_glDebugMessageControl as glDebugMessageControl;
pub use glad_glDebugMessageControlARB as glDebugMessageControlARB;
pub use glad_glDebugMessageInsert as glDebugMessageInsert;
pub use glad_glDebugMessageInsertARB as glDebugMessageInsertARB;
pub use glad_glDeleteBuffers as glDeleteBuffers;
pub use glad_glDeleteBuffersARB as glDeleteBuffersARB;
pub use glad_glDeleteFramebuffers as glDeleteFramebuffers;
pub use glad_glDeleteFramebuffersEXT as glDeleteFramebuffersEXT;
pub use glad_glDeleteNamedStringARB as glDeleteNamedStringARB;
pub use glad_glDeleteObjectARB as glDeleteObjectARB;
pub use glad_glDeleteProgram as glDeleteProgram;
pub use glad_glDeleteProgramPipelines as glDeleteProgramPipelines;
pub use glad_glDeleteProgramsARB as glDeleteProgramsARB;
pub use glad_glDeleteQueries as glDeleteQueries;
pub use glad_glDeleteQueriesARB as glDeleteQueriesARB;
pub use glad_glDeleteRenderbuffers as glDeleteRenderbuffers;
pub use glad_glDeleteRenderbuffersEXT as glDeleteRenderbuffersEXT;
pub use glad_glDeleteSamplers as glDeleteSamplers;
pub use glad_glDeleteShader as glDeleteShader;
pub use glad_glDeleteSync as glDeleteSync;
pub use glad_glDeleteTextures as glDeleteTextures;
pub use glad_glDeleteTransformFeedbacks as glDeleteTransformFeedbacks;
pub use glad_glDeleteVertexArrays as glDeleteVertexArrays;
pub use glad_glDepthFunc as glDepthFunc;
pub use glad_glDepthMask as glDepthMask;
pub use glad_glDepthRange as glDepthRange;
pub use glad_glDepthRangeArrayv as glDepthRangeArrayv;
pub use glad_glDepthRangeIndexed as glDepthRangeIndexed;
pub use glad_glDepthRangef as glDepthRangef;
pub use glad_glDepthRangexOES as glDepthRangexOES;
pub use glad_glDetachObjectARB as glDetachObjectARB;
pub use glad_glDetachShader as glDetachShader;
pub use glad_glDisable as glDisable;
pub use glad_glDisableVertexArrayAttrib as glDisableVertexArrayAttrib;
pub use glad_glDisableVertexAttribArray as glDisableVertexAttribArray;
pub use glad_glDisableVertexAttribArrayARB as glDisableVertexAttribArrayARB;
pub use glad_glDisablei as glDisablei;
pub use glad_glDispatchCompute as glDispatchCompute;
pub use glad_glDispatchComputeGroupSizeARB as glDispatchComputeGroupSizeARB;
pub use glad_glDispatchComputeIndirect as glDispatchComputeIndirect;
pub use glad_glDrawArrays as glDrawArrays;
pub use glad_glDrawArraysIndirect as glDrawArraysIndirect;
pub use glad_glDrawArraysInstanced as glDrawArraysInstanced;
pub use glad_glDrawArraysInstancedARB as glDrawArraysInstancedARB;
pub use glad_glDrawArraysInstancedBaseInstance as glDrawArraysInstancedBaseInstance;
pub use glad_glDrawArraysInstancedEXT as glDrawArraysInstancedEXT;
pub use glad_glDrawBuffer as glDrawBuffer;
pub use glad_glDrawBuffers as glDrawBuffers;
pub use glad_glDrawBuffersARB as glDrawBuffersARB;
pub use glad_glDrawElements as glDrawElements;
pub use glad_glDrawElementsBaseVertex as glDrawElementsBaseVertex;
pub use glad_glDrawElementsIndirect as glDrawElementsIndirect;
pub use glad_glDrawElementsInstanced as glDrawElementsInstanced;
pub use glad_glDrawElementsInstancedARB as glDrawElementsInstancedARB;
pub use glad_glDrawElementsInstancedBaseInstance as glDrawElementsInstancedBaseInstance;
pub use glad_glDrawElementsInstancedBaseVertex as glDrawElementsInstancedBaseVertex;
pub use glad_glDrawElementsInstancedBaseVertexBaseInstance as glDrawElementsInstancedBaseVertexBaseInstance;
pub use glad_glDrawElementsInstancedEXT as glDrawElementsInstancedEXT;
pub use glad_glDrawRangeElements as glDrawRangeElements;
pub use glad_glDrawRangeElementsBaseVertex as glDrawRangeElementsBaseVertex;
pub use glad_glDrawTransformFeedback as glDrawTransformFeedback;
pub use glad_glDrawTransformFeedbackInstanced as glDrawTransformFeedbackInstanced;
pub use glad_glDrawTransformFeedbackStream as glDrawTransformFeedbackStream;
pub use glad_glDrawTransformFeedbackStreamInstanced as glDrawTransformFeedbackStreamInstanced;
pub use glad_glEnable as glEnable;
pub use glad_glEnableVertexArrayAttrib as glEnableVertexArrayAttrib;
pub use glad_glEnableVertexAttribArray as glEnableVertexAttribArray;
pub use glad_glEnableVertexAttribArrayARB as glEnableVertexAttribArrayARB;
pub use glad_glEnablei as glEnablei;
pub use glad_glEndConditionalRender as glEndConditionalRender;
pub use glad_glEndQuery as glEndQuery;
pub use glad_glEndQueryARB as glEndQueryARB;
pub use glad_glEndQueryIndexed as glEndQueryIndexed;
pub use glad_glEndTransformFeedback as glEndTransformFeedback;
pub use glad_glEvalCoord1xOES as glEvalCoord1xOES;
pub use glad_glEvalCoord1xvOES as glEvalCoord1xvOES;
pub use glad_glEvalCoord2xOES as glEvalCoord2xOES;
pub use glad_glEvalCoord2xvOES as glEvalCoord2xvOES;
pub use glad_glEvaluateDepthValuesARB as glEvaluateDepthValuesARB;
pub use glad_glFeedbackBufferxOES as glFeedbackBufferxOES;
pub use glad_glFenceSync as glFenceSync;
pub use glad_glFinish as glFinish;
pub use glad_glFlush as glFlush;
pub use glad_glFlushMappedBufferRange as glFlushMappedBufferRange;
pub use glad_glFlushMappedNamedBufferRange as glFlushMappedNamedBufferRange;
pub use glad_glFogCoordPointerEXT as glFogCoordPointerEXT;
pub use glad_glFogCoorddEXT as glFogCoorddEXT;
pub use glad_glFogCoorddvEXT as glFogCoorddvEXT;
pub use glad_glFogCoordfEXT as glFogCoordfEXT;
pub use glad_glFogCoordfvEXT as glFogCoordfvEXT;
pub use glad_glFogxOES as glFogxOES;
pub use glad_glFogxvOES as glFogxvOES;
pub use glad_glFramebufferParameteri as glFramebufferParameteri;
pub use glad_glFramebufferRenderbuffer as glFramebufferRenderbuffer;
pub use glad_glFramebufferRenderbufferEXT as glFramebufferRenderbufferEXT;
pub use glad_glFramebufferSampleLocationsfvARB as glFramebufferSampleLocationsfvARB;
pub use glad_glFramebufferTexture as glFramebufferTexture;
pub use glad_glFramebufferTexture1D as glFramebufferTexture1D;
pub use glad_glFramebufferTexture1DEXT as glFramebufferTexture1DEXT;
pub use glad_glFramebufferTexture2D as glFramebufferTexture2D;
pub use glad_glFramebufferTexture2DEXT as glFramebufferTexture2DEXT;
pub use glad_glFramebufferTexture3D as glFramebufferTexture3D;
pub use glad_glFramebufferTexture3DEXT as glFramebufferTexture3DEXT;
pub use glad_glFramebufferTextureARB as glFramebufferTextureARB;
pub use glad_glFramebufferTextureFaceARB as glFramebufferTextureFaceARB;
pub use glad_glFramebufferTextureLayer as glFramebufferTextureLayer;
pub use glad_glFramebufferTextureLayerARB as glFramebufferTextureLayerARB;
pub use glad_glFrontFace as glFrontFace;
pub use glad_glFrustumxOES as glFrustumxOES;
pub use glad_glGenBuffers as glGenBuffers;
pub use glad_glGenBuffersARB as glGenBuffersARB;
pub use glad_glGenFramebuffers as glGenFramebuffers;
pub use glad_glGenFramebuffersEXT as glGenFramebuffersEXT;
pub use glad_glGenProgramPipelines as glGenProgramPipelines;
pub use glad_glGenProgramsARB as glGenProgramsARB;
pub use glad_glGenQueries as glGenQueries;
pub use glad_glGenQueriesARB as glGenQueriesARB;
pub use glad_glGenRenderbuffers as glGenRenderbuffers;
pub use glad_glGenRenderbuffersEXT as glGenRenderbuffersEXT;
pub use glad_glGenSamplers as glGenSamplers;
pub use glad_glGenTextures as glGenTextures;
pub use glad_glGenTransformFeedbacks as glGenTransformFeedbacks;
pub use glad_glGenVertexArrays as glGenVertexArrays;
pub use glad_glGenerateMipmap as glGenerateMipmap;
pub use glad_glGenerateMipmapEXT as glGenerateMipmapEXT;
pub use glad_glGenerateTextureMipmap as glGenerateTextureMipmap;
pub use glad_glGetActiveAtomicCounterBufferiv as glGetActiveAtomicCounterBufferiv;
pub use glad_glGetActiveAttrib as glGetActiveAttrib;
pub use glad_glGetActiveAttribARB as glGetActiveAttribARB;
pub use glad_glGetActiveSubroutineName as glGetActiveSubroutineName;
pub use glad_glGetActiveSubroutineUniformName as glGetActiveSubroutineUniformName;
pub use glad_glGetActiveSubroutineUniformiv as glGetActiveSubroutineUniformiv;
pub use glad_glGetActiveUniform as glGetActiveUniform;
pub use glad_glGetActiveUniformARB as glGetActiveUniformARB;
pub use glad_glGetActiveUniformBlockName as glGetActiveUniformBlockName;
pub use glad_glGetActiveUniformBlockiv as glGetActiveUniformBlockiv;
pub use glad_glGetActiveUniformName as glGetActiveUniformName;
pub use glad_glGetActiveUniformsiv as glGetActiveUniformsiv;
pub use glad_glGetAttachedObjectsARB as glGetAttachedObjectsARB;
pub use glad_glGetAttachedShaders as glGetAttachedShaders;
pub use glad_glGetAttribLocation as glGetAttribLocation;
pub use glad_glGetAttribLocationARB as glGetAttribLocationARB;
pub use glad_glGetBooleani_v as glGetBooleani_v;
pub use glad_glGetBooleanv as glGetBooleanv;
pub use glad_glGetBufferParameteri64v as glGetBufferParameteri64v;
pub use glad_glGetBufferParameteriv as glGetBufferParameteriv;
pub use glad_glGetBufferParameterivARB as glGetBufferParameterivARB;
pub use glad_glGetBufferPointerv as glGetBufferPointerv;
pub use glad_glGetBufferPointervARB as glGetBufferPointervARB;
pub use glad_glGetBufferSubData as glGetBufferSubData;
pub use glad_glGetBufferSubDataARB as glGetBufferSubDataARB;
pub use glad_glGetClipPlanexOES as glGetClipPlanexOES;
pub use glad_glGetCompressedTexImage as glGetCompressedTexImage;
pub use glad_glGetCompressedTexImageARB as glGetCompressedTexImageARB;
pub use glad_glGetCompressedTextureImage as glGetCompressedTextureImage;
pub use glad_glGetCompressedTextureSubImage as glGetCompressedTextureSubImage;
pub use glad_glGetConvolutionParameterxvOES as glGetConvolutionParameterxvOES;
pub use glad_glGetDebugMessageLog as glGetDebugMessageLog;
pub use glad_glGetDebugMessageLogARB as glGetDebugMessageLogARB;
pub use glad_glGetDoublei_v as glGetDoublei_v;
pub use glad_glGetDoublev as glGetDoublev;
pub use glad_glGetError as glGetError;
pub use glad_glGetFixedvOES as glGetFixedvOES;
pub use glad_glGetFloati_v as glGetFloati_v;
pub use glad_glGetFloatv as glGetFloatv;
pub use glad_glGetFragDataIndex as glGetFragDataIndex;
pub use glad_glGetFragDataLocation as glGetFragDataLocation;
pub use glad_glGetFramebufferAttachmentParameteriv as glGetFramebufferAttachmentParameteriv;
pub use glad_glGetFramebufferAttachmentParameterivEXT as glGetFramebufferAttachmentParameterivEXT;
pub use glad_glGetFramebufferParameteriv as glGetFramebufferParameteriv;
pub use glad_glGetHandleARB as glGetHandleARB;
pub use glad_glGetHistogramParameterxvOES as glGetHistogramParameterxvOES;
pub use glad_glGetInfoLogARB as glGetInfoLogARB;
pub use glad_glGetInteger64i_v as glGetInteger64i_v;
pub use glad_glGetInteger64v as glGetInteger64v;
pub use glad_glGetIntegeri_v as glGetIntegeri_v;
pub use glad_glGetIntegerv as glGetIntegerv;
pub use glad_glGetInternalformati64v as glGetInternalformati64v;
pub use glad_glGetInternalformativ as glGetInternalformativ;
pub use glad_glGetLightxOES as glGetLightxOES;
pub use glad_glGetMapxvOES as glGetMapxvOES;
pub use glad_glGetMaterialxOES as glGetMaterialxOES;
pub use glad_glGetMultisamplefv as glGetMultisamplefv;
pub use glad_glGetNamedBufferParameteri64v as glGetNamedBufferParameteri64v;
pub use glad_glGetNamedBufferParameteriv as glGetNamedBufferParameteriv;
pub use glad_glGetNamedBufferPointerv as glGetNamedBufferPointerv;
pub use glad_glGetNamedBufferSubData as glGetNamedBufferSubData;
pub use glad_glGetNamedFramebufferAttachmentParameteriv as glGetNamedFramebufferAttachmentParameteriv;
pub use glad_glGetNamedFramebufferParameteriv as glGetNamedFramebufferParameteriv;
pub use glad_glGetNamedRenderbufferParameteriv as glGetNamedRenderbufferParameteriv;
pub use glad_glGetNamedStringARB as glGetNamedStringARB;
pub use glad_glGetNamedStringivARB as glGetNamedStringivARB;
pub use glad_glGetObjectLabel as glGetObjectLabel;
pub use glad_glGetObjectParameterfvARB as glGetObjectParameterfvARB;
pub use glad_glGetObjectParameterivARB as glGetObjectParameterivARB;
pub use glad_glGetObjectPtrLabel as glGetObjectPtrLabel;
pub use glad_glGetPixelMapxv as glGetPixelMapxv;
pub use glad_glGetPointerv as glGetPointerv;
pub use glad_glGetProgramBinary as glGetProgramBinary;
pub use glad_glGetProgramEnvParameterdvARB as glGetProgramEnvParameterdvARB;
pub use glad_glGetProgramEnvParameterfvARB as glGetProgramEnvParameterfvARB;
pub use glad_glGetProgramInfoLog as glGetProgramInfoLog;
pub use glad_glGetProgramInterfaceiv as glGetProgramInterfaceiv;
pub use glad_glGetProgramLocalParameterdvARB as glGetProgramLocalParameterdvARB;
pub use glad_glGetProgramLocalParameterfvARB as glGetProgramLocalParameterfvARB;
pub use glad_glGetProgramPipelineInfoLog as glGetProgramPipelineInfoLog;
pub use glad_glGetProgramPipelineiv as glGetProgramPipelineiv;
pub use glad_glGetProgramResourceIndex as glGetProgramResourceIndex;
pub use glad_glGetProgramResourceLocation as glGetProgramResourceLocation;
pub use glad_glGetProgramResourceLocationIndex as glGetProgramResourceLocationIndex;
pub use glad_glGetProgramResourceName as glGetProgramResourceName;
pub use glad_glGetProgramResourceiv as glGetProgramResourceiv;
pub use glad_glGetProgramStageiv as glGetProgramStageiv;
pub use glad_glGetProgramStringARB as glGetProgramStringARB;
pub use glad_glGetProgramiv as glGetProgramiv;
pub use glad_glGetProgramivARB as glGetProgramivARB;
pub use glad_glGetQueryBufferObjecti64v as glGetQueryBufferObjecti64v;
pub use glad_glGetQueryBufferObjectiv as glGetQueryBufferObjectiv;
pub use glad_glGetQueryBufferObjectui64v as glGetQueryBufferObjectui64v;
pub use glad_glGetQueryBufferObjectuiv as glGetQueryBufferObjectuiv;
pub use glad_glGetQueryIndexediv as glGetQueryIndexediv;
pub use glad_glGetQueryObjecti64v as glGetQueryObjecti64v;
pub use glad_glGetQueryObjectiv as glGetQueryObjectiv;
pub use glad_glGetQueryObjectivARB as glGetQueryObjectivARB;
pub use glad_glGetQueryObjectui64v as glGetQueryObjectui64v;
pub use glad_glGetQueryObjectuiv as glGetQueryObjectuiv;
pub use glad_glGetQueryObjectuivARB as glGetQueryObjectuivARB;
pub use glad_glGetQueryiv as glGetQueryiv;
pub use glad_glGetQueryivARB as glGetQueryivARB;
pub use glad_glGetRenderbufferParameteriv as glGetRenderbufferParameteriv;
pub use glad_glGetRenderbufferParameterivEXT as glGetRenderbufferParameterivEXT;
pub use glad_glGetSamplerParameterIiv as glGetSamplerParameterIiv;
pub use glad_glGetSamplerParameterIuiv as glGetSamplerParameterIuiv;
pub use glad_glGetSamplerParameterfv as glGetSamplerParameterfv;
pub use glad_glGetSamplerParameteriv as glGetSamplerParameteriv;
pub use glad_glGetShaderInfoLog as glGetShaderInfoLog;
pub use glad_glGetShaderPrecisionFormat as glGetShaderPrecisionFormat;
pub use glad_glGetShaderSource as glGetShaderSource;
pub use glad_glGetShaderSourceARB as glGetShaderSourceARB;
pub use glad_glGetShaderiv as glGetShaderiv;
pub use glad_glGetString as glGetString;
pub use glad_glGetStringi as glGetStringi;
pub use glad_glGetSubroutineIndex as glGetSubroutineIndex;
pub use glad_glGetSubroutineUniformLocation as glGetSubroutineUniformLocation;
pub use glad_glGetSynciv as glGetSynciv;
pub use glad_glGetTexEnvxvOES as glGetTexEnvxvOES;
pub use glad_glGetTexGenxvOES as glGetTexGenxvOES;
pub use glad_glGetTexImage as glGetTexImage;
pub use glad_glGetTexLevelParameterfv as glGetTexLevelParameterfv;
pub use glad_glGetTexLevelParameteriv as glGetTexLevelParameteriv;
pub use glad_glGetTexLevelParameterxvOES as glGetTexLevelParameterxvOES;
pub use glad_glGetTexParameterIiv as glGetTexParameterIiv;
pub use glad_glGetTexParameterIuiv as glGetTexParameterIuiv;
pub use glad_glGetTexParameterfv as glGetTexParameterfv;
pub use glad_glGetTexParameteriv as glGetTexParameteriv;
pub use glad_glGetTexParameterxvOES as glGetTexParameterxvOES;
pub use glad_glGetTextureImage as glGetTextureImage;
pub use glad_glGetTextureLevelParameterfv as glGetTextureLevelParameterfv;
pub use glad_glGetTextureLevelParameteriv as glGetTextureLevelParameteriv;
pub use glad_glGetTextureParameterIiv as glGetTextureParameterIiv;
pub use glad_glGetTextureParameterIuiv as glGetTextureParameterIuiv;
pub use glad_glGetTextureParameterfv as glGetTextureParameterfv;
pub use glad_glGetTextureParameteriv as glGetTextureParameteriv;
pub use glad_glGetTextureSubImage as glGetTextureSubImage;
pub use glad_glGetTransformFeedbackVarying as glGetTransformFeedbackVarying;
pub use glad_glGetTransformFeedbacki64_v as glGetTransformFeedbacki64_v;
pub use glad_glGetTransformFeedbacki_v as glGetTransformFeedbacki_v;
pub use glad_glGetTransformFeedbackiv as glGetTransformFeedbackiv;
pub use glad_glGetUniformBlockIndex as glGetUniformBlockIndex;
pub use glad_glGetUniformIndices as glGetUniformIndices;
pub use glad_glGetUniformLocation as glGetUniformLocation;
pub use glad_glGetUniformLocationARB as glGetUniformLocationARB;
pub use glad_glGetUniformSubroutineuiv as glGetUniformSubroutineuiv;
pub use glad_glGetUniformdv as glGetUniformdv;
pub use glad_glGetUniformfv as glGetUniformfv;
pub use glad_glGetUniformfvARB as glGetUniformfvARB;
pub use glad_glGetUniformi64vARB as glGetUniformi64vARB;
pub use glad_glGetUniformiv as glGetUniformiv;
pub use glad_glGetUniformivARB as glGetUniformivARB;
pub use glad_glGetUniformui64vARB as glGetUniformui64vARB;
pub use glad_glGetUniformuiv as glGetUniformuiv;
pub use glad_glGetVertexArrayIndexed64iv as glGetVertexArrayIndexed64iv;
pub use glad_glGetVertexArrayIndexediv as glGetVertexArrayIndexediv;
pub use glad_glGetVertexArrayiv as glGetVertexArrayiv;
pub use glad_glGetVertexAttribIiv as glGetVertexAttribIiv;
pub use glad_glGetVertexAttribIuiv as glGetVertexAttribIuiv;
pub use glad_glGetVertexAttribLdv as glGetVertexAttribLdv;
pub use glad_glGetVertexAttribPointerv as glGetVertexAttribPointerv;
pub use glad_glGetVertexAttribPointervARB as glGetVertexAttribPointervARB;
pub use glad_glGetVertexAttribdv as glGetVertexAttribdv;
pub use glad_glGetVertexAttribdvARB as glGetVertexAttribdvARB;
pub use glad_glGetVertexAttribfv as glGetVertexAttribfv;
pub use glad_glGetVertexAttribfvARB as glGetVertexAttribfvARB;
pub use glad_glGetVertexAttribiv as glGetVertexAttribiv;
pub use glad_glGetVertexAttribivARB as glGetVertexAttribivARB;
pub use glad_glGetnUniformi64vARB as glGetnUniformi64vARB;
pub use glad_glGetnUniformui64vARB as glGetnUniformui64vARB;
pub use glad_glHint as glHint;
pub use glad_glIndexxOES as glIndexxOES;
pub use glad_glIndexxvOES as glIndexxvOES;
pub use glad_glInvalidateBufferData as glInvalidateBufferData;
pub use glad_glInvalidateBufferSubData as glInvalidateBufferSubData;
pub use glad_glInvalidateFramebuffer as glInvalidateFramebuffer;
pub use glad_glInvalidateNamedFramebufferData as glInvalidateNamedFramebufferData;
pub use glad_glInvalidateNamedFramebufferSubData as glInvalidateNamedFramebufferSubData;
pub use glad_glInvalidateSubFramebuffer as glInvalidateSubFramebuffer;
pub use glad_glInvalidateTexImage as glInvalidateTexImage;
pub use glad_glInvalidateTexSubImage as glInvalidateTexSubImage;
pub use glad_glIsBuffer as glIsBuffer;
pub use glad_glIsBufferARB as glIsBufferARB;
pub use glad_glIsEnabled as glIsEnabled;
pub use glad_glIsEnabledi as glIsEnabledi;
pub use glad_glIsFramebuffer as glIsFramebuffer;
pub use glad_glIsFramebufferEXT as glIsFramebufferEXT;
pub use glad_glIsNamedStringARB as glIsNamedStringARB;
pub use glad_glIsProgram as glIsProgram;
pub use glad_glIsProgramARB as glIsProgramARB;
pub use glad_glIsProgramPipeline as glIsProgramPipeline;
pub use glad_glIsQuery as glIsQuery;
pub use glad_glIsQueryARB as glIsQueryARB;
pub use glad_glIsRenderbuffer as glIsRenderbuffer;
pub use glad_glIsRenderbufferEXT as glIsRenderbufferEXT;
pub use glad_glIsSampler as glIsSampler;
pub use glad_glIsShader as glIsShader;
pub use glad_glIsSync as glIsSync;
pub use glad_glIsTexture as glIsTexture;
pub use glad_glIsTransformFeedback as glIsTransformFeedback;
pub use glad_glIsVertexArray as glIsVertexArray;
pub use glad_glLightModelxOES as glLightModelxOES;
pub use glad_glLightModelxvOES as glLightModelxvOES;
pub use glad_glLightxOES as glLightxOES;
pub use glad_glLightxvOES as glLightxvOES;
pub use glad_glLineWidth as glLineWidth;
pub use glad_glLineWidthxOES as glLineWidthxOES;
pub use glad_glLinkProgram as glLinkProgram;
pub use glad_glLinkProgramARB as glLinkProgramARB;
pub use glad_glLoadMatrixxOES as glLoadMatrixxOES;
pub use glad_glLoadTransposeMatrixdARB as glLoadTransposeMatrixdARB;
pub use glad_glLoadTransposeMatrixfARB as glLoadTransposeMatrixfARB;
pub use glad_glLoadTransposeMatrixxOES as glLoadTransposeMatrixxOES;
pub use glad_glLogicOp as glLogicOp;
pub use glad_glMap1xOES as glMap1xOES;
pub use glad_glMap2xOES as glMap2xOES;
pub use glad_glMapBuffer as glMapBuffer;
pub use glad_glMapBufferARB as glMapBufferARB;
pub use glad_glMapBufferRange as glMapBufferRange;
pub use glad_glMapGrid1xOES as glMapGrid1xOES;
pub use glad_glMapGrid2xOES as glMapGrid2xOES;
pub use glad_glMapNamedBuffer as glMapNamedBuffer;
pub use glad_glMapNamedBufferRange as glMapNamedBufferRange;
pub use glad_glMaterialxOES as glMaterialxOES;
pub use glad_glMaterialxvOES as glMaterialxvOES;
pub use glad_glMemoryBarrier as glMemoryBarrier;
pub use glad_glMemoryBarrierByRegion as glMemoryBarrierByRegion;
pub use glad_glMinSampleShading as glMinSampleShading;
pub use glad_glMinSampleShadingARB as glMinSampleShadingARB;
pub use glad_glMultMatrixxOES as glMultMatrixxOES;
pub use glad_glMultTransposeMatrixdARB as glMultTransposeMatrixdARB;
pub use glad_glMultTransposeMatrixfARB as glMultTransposeMatrixfARB;
pub use glad_glMultTransposeMatrixxOES as glMultTransposeMatrixxOES;
pub use glad_glMultiDrawArrays as glMultiDrawArrays;
pub use glad_glMultiDrawArraysIndirect as glMultiDrawArraysIndirect;
pub use glad_glMultiDrawElements as glMultiDrawElements;
pub use glad_glMultiDrawElementsBaseVertex as glMultiDrawElementsBaseVertex;
pub use glad_glMultiDrawElementsIndirect as glMultiDrawElementsIndirect;
pub use glad_glMultiTexCoord1dARB as glMultiTexCoord1dARB;
pub use glad_glMultiTexCoord1dvARB as glMultiTexCoord1dvARB;
pub use glad_glMultiTexCoord1fARB as glMultiTexCoord1fARB;
pub use glad_glMultiTexCoord1fvARB as glMultiTexCoord1fvARB;
pub use glad_glMultiTexCoord1iARB as glMultiTexCoord1iARB;
pub use glad_glMultiTexCoord1ivARB as glMultiTexCoord1ivARB;
pub use glad_glMultiTexCoord1sARB as glMultiTexCoord1sARB;
pub use glad_glMultiTexCoord1svARB as glMultiTexCoord1svARB;
pub use glad_glMultiTexCoord1xOES as glMultiTexCoord1xOES;
pub use glad_glMultiTexCoord1xvOES as glMultiTexCoord1xvOES;
pub use glad_glMultiTexCoord2dARB as glMultiTexCoord2dARB;
pub use glad_glMultiTexCoord2dvARB as glMultiTexCoord2dvARB;
pub use glad_glMultiTexCoord2fARB as glMultiTexCoord2fARB;
pub use glad_glMultiTexCoord2fvARB as glMultiTexCoord2fvARB;
pub use glad_glMultiTexCoord2iARB as glMultiTexCoord2iARB;
pub use glad_glMultiTexCoord2ivARB as glMultiTexCoord2ivARB;
pub use glad_glMultiTexCoord2sARB as glMultiTexCoord2sARB;
pub use glad_glMultiTexCoord2svARB as glMultiTexCoord2svARB;
pub use glad_glMultiTexCoord2xOES as glMultiTexCoord2xOES;
pub use glad_glMultiTexCoord2xvOES as glMultiTexCoord2xvOES;
pub use glad_glMultiTexCoord3dARB as glMultiTexCoord3dARB;
pub use glad_glMultiTexCoord3dvARB as glMultiTexCoord3dvARB;
pub use glad_glMultiTexCoord3fARB as glMultiTexCoord3fARB;
pub use glad_glMultiTexCoord3fvARB as glMultiTexCoord3fvARB;
pub use glad_glMultiTexCoord3iARB as glMultiTexCoord3iARB;
pub use glad_glMultiTexCoord3ivARB as glMultiTexCoord3ivARB;
pub use glad_glMultiTexCoord3sARB as glMultiTexCoord3sARB;
pub use glad_glMultiTexCoord3svARB as glMultiTexCoord3svARB;
pub use glad_glMultiTexCoord3xOES as glMultiTexCoord3xOES;
pub use glad_glMultiTexCoord3xvOES as glMultiTexCoord3xvOES;
pub use glad_glMultiTexCoord4dARB as glMultiTexCoord4dARB;
pub use glad_glMultiTexCoord4dvARB as glMultiTexCoord4dvARB;
pub use glad_glMultiTexCoord4fARB as glMultiTexCoord4fARB;
pub use glad_glMultiTexCoord4fvARB as glMultiTexCoord4fvARB;
pub use glad_glMultiTexCoord4iARB as glMultiTexCoord4iARB;
pub use glad_glMultiTexCoord4ivARB as glMultiTexCoord4ivARB;
pub use glad_glMultiTexCoord4sARB as glMultiTexCoord4sARB;
pub use glad_glMultiTexCoord4svARB as glMultiTexCoord4svARB;
pub use glad_glMultiTexCoord4xOES as glMultiTexCoord4xOES;
pub use glad_glMultiTexCoord4xvOES as glMultiTexCoord4xvOES;
pub use glad_glNamedBufferData as glNamedBufferData;
pub use glad_glNamedBufferStorage as glNamedBufferStorage;
pub use glad_glNamedBufferSubData as glNamedBufferSubData;
pub use glad_glNamedFramebufferDrawBuffer as glNamedFramebufferDrawBuffer;
pub use glad_glNamedFramebufferDrawBuffers as glNamedFramebufferDrawBuffers;
pub use glad_glNamedFramebufferParameteri as glNamedFramebufferParameteri;
pub use glad_glNamedFramebufferReadBuffer as glNamedFramebufferReadBuffer;
pub use glad_glNamedFramebufferRenderbuffer as glNamedFramebufferRenderbuffer;
pub use glad_glNamedFramebufferSampleLocationsfvARB as glNamedFramebufferSampleLocationsfvARB;
pub use glad_glNamedFramebufferTexture as glNamedFramebufferTexture;
pub use glad_glNamedFramebufferTextureLayer as glNamedFramebufferTextureLayer;
pub use glad_glNamedRenderbufferStorage as glNamedRenderbufferStorage;
pub use glad_glNamedRenderbufferStorageMultisample as glNamedRenderbufferStorageMultisample;
pub use glad_glNamedStringARB as glNamedStringARB;
pub use glad_glNormal3xOES as glNormal3xOES;
pub use glad_glNormal3xvOES as glNormal3xvOES;
pub use glad_glObjectLabel as glObjectLabel;
pub use glad_glObjectPtrLabel as glObjectPtrLabel;
pub use glad_glOrthoxOES as glOrthoxOES;
pub use glad_glPassThroughxOES as glPassThroughxOES;
pub use glad_glPatchParameterfv as glPatchParameterfv;
pub use glad_glPatchParameteri as glPatchParameteri;
pub use glad_glPauseTransformFeedback as glPauseTransformFeedback;
pub use glad_glPixelMapx as glPixelMapx;
pub use glad_glPixelStoref as glPixelStoref;
pub use glad_glPixelStorei as glPixelStorei;
pub use glad_glPixelStorex as glPixelStorex;
pub use glad_glPixelTransferxOES as glPixelTransferxOES;
pub use glad_glPixelZoomxOES as glPixelZoomxOES;
pub use glad_glPointParameterf as glPointParameterf;
pub use glad_glPointParameterfv as glPointParameterfv;
pub use glad_glPointParameteri as glPointParameteri;
pub use glad_glPointParameteriv as glPointParameteriv;
pub use glad_glPointParameterxvOES as glPointParameterxvOES;
pub use glad_glPointSize as glPointSize;
pub use glad_glPointSizexOES as glPointSizexOES;
pub use glad_glPolygonMode as glPolygonMode;
pub use glad_glPolygonOffset as glPolygonOffset;
pub use glad_glPolygonOffsetxOES as glPolygonOffsetxOES;
pub use glad_glPopDebugGroup as glPopDebugGroup;
pub use glad_glPrimitiveBoundingBoxARB as glPrimitiveBoundingBoxARB;
pub use glad_glPrimitiveRestartIndex as glPrimitiveRestartIndex;
pub use glad_glPrioritizeTexturesxOES as glPrioritizeTexturesxOES;
pub use glad_glProgramBinary as glProgramBinary;
pub use glad_glProgramEnvParameter4dARB as glProgramEnvParameter4dARB;
pub use glad_glProgramEnvParameter4dvARB as glProgramEnvParameter4dvARB;
pub use glad_glProgramEnvParameter4fARB as glProgramEnvParameter4fARB;
pub use glad_glProgramEnvParameter4fvARB as glProgramEnvParameter4fvARB;
pub use glad_glProgramLocalParameter4dARB as glProgramLocalParameter4dARB;
pub use glad_glProgramLocalParameter4dvARB as glProgramLocalParameter4dvARB;
pub use glad_glProgramLocalParameter4fARB as glProgramLocalParameter4fARB;
pub use glad_glProgramLocalParameter4fvARB as glProgramLocalParameter4fvARB;
pub use glad_glProgramParameteri as glProgramParameteri;
pub use glad_glProgramParameteriARB as glProgramParameteriARB;
pub use glad_glProgramStringARB as glProgramStringARB;
pub use glad_glProgramUniform1d as glProgramUniform1d;
pub use glad_glProgramUniform1dv as glProgramUniform1dv;
pub use glad_glProgramUniform1f as glProgramUniform1f;
pub use glad_glProgramUniform1fv as glProgramUniform1fv;
pub use glad_glProgramUniform1i as glProgramUniform1i;
pub use glad_glProgramUniform1i64ARB as glProgramUniform1i64ARB;
pub use glad_glProgramUniform1i64vARB as glProgramUniform1i64vARB;
pub use glad_glProgramUniform1iv as glProgramUniform1iv;
pub use glad_glProgramUniform1ui as glProgramUniform1ui;
pub use glad_glProgramUniform1ui64ARB as glProgramUniform1ui64ARB;
pub use glad_glProgramUniform1ui64vARB as glProgramUniform1ui64vARB;
pub use glad_glProgramUniform1uiv as glProgramUniform1uiv;
pub use glad_glProgramUniform2d as glProgramUniform2d;
pub use glad_glProgramUniform2dv as glProgramUniform2dv;
pub use glad_glProgramUniform2f as glProgramUniform2f;
pub use glad_glProgramUniform2fv as glProgramUniform2fv;
pub use glad_glProgramUniform2i as glProgramUniform2i;
pub use glad_glProgramUniform2i64ARB as glProgramUniform2i64ARB;
pub use glad_glProgramUniform2i64vARB as glProgramUniform2i64vARB;
pub use glad_glProgramUniform2iv as glProgramUniform2iv;
pub use glad_glProgramUniform2ui as glProgramUniform2ui;
pub use glad_glProgramUniform2ui64ARB as glProgramUniform2ui64ARB;
pub use glad_glProgramUniform2ui64vARB as glProgramUniform2ui64vARB;
pub use glad_glProgramUniform2uiv as glProgramUniform2uiv;
pub use glad_glProgramUniform3d as glProgramUniform3d;
pub use glad_glProgramUniform3dv as glProgramUniform3dv;
pub use glad_glProgramUniform3f as glProgramUniform3f;
pub use glad_glProgramUniform3fv as glProgramUniform3fv;
pub use glad_glProgramUniform3i as glProgramUniform3i;
pub use glad_glProgramUniform3i64ARB as glProgramUniform3i64ARB;
pub use glad_glProgramUniform3i64vARB as glProgramUniform3i64vARB;
pub use glad_glProgramUniform3iv as glProgramUniform3iv;
pub use glad_glProgramUniform3ui as glProgramUniform3ui;
pub use glad_glProgramUniform3ui64ARB as glProgramUniform3ui64ARB;
pub use glad_glProgramUniform3ui64vARB as glProgramUniform3ui64vARB;
pub use glad_glProgramUniform3uiv as glProgramUniform3uiv;
pub use glad_glProgramUniform4d as glProgramUniform4d;
pub use glad_glProgramUniform4dv as glProgramUniform4dv;
pub use glad_glProgramUniform4f as glProgramUniform4f;
pub use glad_glProgramUniform4fv as glProgramUniform4fv;
pub use glad_glProgramUniform4i as glProgramUniform4i;
pub use glad_glProgramUniform4i64ARB as glProgramUniform4i64ARB;
pub use glad_glProgramUniform4i64vARB as glProgramUniform4i64vARB;
pub use glad_glProgramUniform4iv as glProgramUniform4iv;
pub use glad_glProgramUniform4ui as glProgramUniform4ui;
pub use glad_glProgramUniform4ui64ARB as glProgramUniform4ui64ARB;
pub use glad_glProgramUniform4ui64vARB as glProgramUniform4ui64vARB;
pub use glad_glProgramUniform4uiv as glProgramUniform4uiv;
pub use glad_glProgramUniformMatrix2dv as glProgramUniformMatrix2dv;
pub use glad_glProgramUniformMatrix2fv as glProgramUniformMatrix2fv;
pub use glad_glProgramUniformMatrix2x3dv as glProgramUniformMatrix2x3dv;
pub use glad_glProgramUniformMatrix2x3fv as glProgramUniformMatrix2x3fv;
pub use glad_glProgramUniformMatrix2x4dv as glProgramUniformMatrix2x4dv;
pub use glad_glProgramUniformMatrix2x4fv as glProgramUniformMatrix2x4fv;
pub use glad_glProgramUniformMatrix3dv as glProgramUniformMatrix3dv;
pub use glad_glProgramUniformMatrix3fv as glProgramUniformMatrix3fv;
pub use glad_glProgramUniformMatrix3x2dv as glProgramUniformMatrix3x2dv;
pub use glad_glProgramUniformMatrix3x2fv as glProgramUniformMatrix3x2fv;
pub use glad_glProgramUniformMatrix3x4dv as glProgramUniformMatrix3x4dv;
pub use glad_glProgramUniformMatrix3x4fv as glProgramUniformMatrix3x4fv;
pub use glad_glProgramUniformMatrix4dv as glProgramUniformMatrix4dv;
pub use glad_glProgramUniformMatrix4fv as glProgramUniformMatrix4fv;
pub use glad_glProgramUniformMatrix4x2dv as glProgramUniformMatrix4x2dv;
pub use glad_glProgramUniformMatrix4x2fv as glProgramUniformMatrix4x2fv;
pub use glad_glProgramUniformMatrix4x3dv as glProgramUniformMatrix4x3dv;
pub use glad_glProgramUniformMatrix4x3fv as glProgramUniformMatrix4x3fv;
pub use glad_glProvokingVertex as glProvokingVertex;
pub use glad_glPushDebugGroup as glPushDebugGroup;
pub use glad_glQueryCounter as glQueryCounter;
pub use glad_glRasterPos2xOES as glRasterPos2xOES;
pub use glad_glRasterPos2xvOES as glRasterPos2xvOES;
pub use glad_glRasterPos3xOES as glRasterPos3xOES;
pub use glad_glRasterPos3xvOES as glRasterPos3xvOES;
pub use glad_glRasterPos4xOES as glRasterPos4xOES;
pub use glad_glRasterPos4xvOES as glRasterPos4xvOES;
pub use glad_glReadBuffer as glReadBuffer;
pub use glad_glReadPixels as glReadPixels;
pub use glad_glRectxOES as glRectxOES;
pub use glad_glRectxvOES as glRectxvOES;
pub use glad_glReleaseShaderCompiler as glReleaseShaderCompiler;
pub use glad_glRenderbufferStorage as glRenderbufferStorage;
pub use glad_glRenderbufferStorageEXT as glRenderbufferStorageEXT;
pub use glad_glRenderbufferStorageMultisample as glRenderbufferStorageMultisample;
pub use glad_glRenderbufferStorageMultisampleEXT as glRenderbufferStorageMultisampleEXT;
pub use glad_glResumeTransformFeedback as glResumeTransformFeedback;
pub use glad_glRotatexOES as glRotatexOES;
pub use glad_glSampleCoverage as glSampleCoverage;
pub use glad_glSampleCoverageARB as glSampleCoverageARB;
pub use glad_glSampleMaski as glSampleMaski;
pub use glad_glSamplerParameterIiv as glSamplerParameterIiv;
pub use glad_glSamplerParameterIuiv as glSamplerParameterIuiv;
pub use glad_glSamplerParameterf as glSamplerParameterf;
pub use glad_glSamplerParameterfv as glSamplerParameterfv;
pub use glad_glSamplerParameteri as glSamplerParameteri;
pub use glad_glSamplerParameteriv as glSamplerParameteriv;
pub use glad_glScalexOES as glScalexOES;
pub use glad_glScissor as glScissor;
pub use glad_glScissorArrayv as glScissorArrayv;
pub use glad_glScissorIndexed as glScissorIndexed;
pub use glad_glScissorIndexedv as glScissorIndexedv;
pub use glad_glShaderBinary as glShaderBinary;
pub use glad_glShaderSource as glShaderSource;
pub use glad_glShaderSourceARB as glShaderSourceARB;
pub use glad_glShaderStorageBlockBinding as glShaderStorageBlockBinding;
pub use glad_glSpecializeShaderARB as glSpecializeShaderARB;
pub use glad_glStencilFunc as glStencilFunc;
pub use glad_glStencilFuncSeparate as glStencilFuncSeparate;
pub use glad_glStencilMask as glStencilMask;
pub use glad_glStencilMaskSeparate as glStencilMaskSeparate;
pub use glad_glStencilOp as glStencilOp;
pub use glad_glStencilOpSeparate as glStencilOpSeparate;
pub use glad_glTexBuffer as glTexBuffer;
pub use glad_glTexBufferRange as glTexBufferRange;
pub use glad_glTexCoord1xOES as glTexCoord1xOES;
pub use glad_glTexCoord1xvOES as glTexCoord1xvOES;
pub use glad_glTexCoord2xOES as glTexCoord2xOES;
pub use glad_glTexCoord2xvOES as glTexCoord2xvOES;
pub use glad_glTexCoord3xOES as glTexCoord3xOES;
pub use glad_glTexCoord3xvOES as glTexCoord3xvOES;
pub use glad_glTexCoord4xOES as glTexCoord4xOES;
pub use glad_glTexCoord4xvOES as glTexCoord4xvOES;
pub use glad_glTexEnvxOES as glTexEnvxOES;
pub use glad_glTexEnvxvOES as glTexEnvxvOES;
pub use glad_glTexGenxOES as glTexGenxOES;
pub use glad_glTexGenxvOES as glTexGenxvOES;
pub use glad_glTexImage1D as glTexImage1D;
pub use glad_glTexImage2D as glTexImage2D;
pub use glad_glTexImage2DMultisample as glTexImage2DMultisample;
pub use glad_glTexImage3D as glTexImage3D;
pub use glad_glTexImage3DMultisample as glTexImage3DMultisample;
pub use glad_glTexParameterIiv as glTexParameterIiv;
pub use glad_glTexParameterIuiv as glTexParameterIuiv;
pub use glad_glTexParameterf as glTexParameterf;
pub use glad_glTexParameterfv as glTexParameterfv;
pub use glad_glTexParameteri as glTexParameteri;
pub use glad_glTexParameteriv as glTexParameteriv;
pub use glad_glTexParameterxOES as glTexParameterxOES;
pub use glad_glTexParameterxvOES as glTexParameterxvOES;
pub use glad_glTexStorage1D as glTexStorage1D;
pub use glad_glTexStorage2D as glTexStorage2D;
pub use glad_glTexStorage2DMultisample as glTexStorage2DMultisample;
pub use glad_glTexStorage3D as glTexStorage3D;
pub use glad_glTexStorage3DMultisample as glTexStorage3DMultisample;
pub use glad_glTexSubImage1D as glTexSubImage1D;
pub use glad_glTexSubImage2D as glTexSubImage2D;
pub use glad_glTexSubImage3D as glTexSubImage3D;
pub use glad_glTextureBuffer as glTextureBuffer;
pub use glad_glTextureBufferRange as glTextureBufferRange;
pub use glad_glTextureParameterIiv as glTextureParameterIiv;
pub use glad_glTextureParameterIuiv as glTextureParameterIuiv;
pub use glad_glTextureParameterf as glTextureParameterf;
pub use glad_glTextureParameterfv as glTextureParameterfv;
pub use glad_glTextureParameteri as glTextureParameteri;
pub use glad_glTextureParameteriv as glTextureParameteriv;
pub use glad_glTextureStorage1D as glTextureStorage1D;
pub use glad_glTextureStorage2D as glTextureStorage2D;
pub use glad_glTextureStorage2DMultisample as glTextureStorage2DMultisample;
pub use glad_glTextureStorage3D as glTextureStorage3D;
pub use glad_glTextureStorage3DMultisample as glTextureStorage3DMultisample;
pub use glad_glTextureSubImage1D as glTextureSubImage1D;
pub use glad_glTextureSubImage2D as glTextureSubImage2D;
pub use glad_glTextureSubImage3D as glTextureSubImage3D;
pub use glad_glTextureView as glTextureView;
pub use glad_glTransformFeedbackBufferBase as glTransformFeedbackBufferBase;
pub use glad_glTransformFeedbackBufferRange as glTransformFeedbackBufferRange;
pub use glad_glTransformFeedbackVaryings as glTransformFeedbackVaryings;
pub use glad_glTranslatexOES as glTranslatexOES;
pub use glad_glUniform1d as glUniform1d;
pub use glad_glUniform1dv as glUniform1dv;
pub use glad_glUniform1f as glUniform1f;
pub use glad_glUniform1fARB as glUniform1fARB;
pub use glad_glUniform1fv as glUniform1fv;
pub use glad_glUniform1fvARB as glUniform1fvARB;
pub use glad_glUniform1i as glUniform1i;
pub use glad_glUniform1i64ARB as glUniform1i64ARB;
pub use glad_glUniform1i64vARB as glUniform1i64vARB;
pub use glad_glUniform1iARB as glUniform1iARB;
pub use glad_glUniform1iv as glUniform1iv;
pub use glad_glUniform1ivARB as glUniform1ivARB;
pub use glad_glUniform1ui as glUniform1ui;
pub use glad_glUniform1ui64ARB as glUniform1ui64ARB;
pub use glad_glUniform1ui64vARB as glUniform1ui64vARB;
pub use glad_glUniform1uiv as glUniform1uiv;
pub use glad_glUniform2d as glUniform2d;
pub use glad_glUniform2dv as glUniform2dv;
pub use glad_glUniform2f as glUniform2f;
pub use glad_glUniform2fARB as glUniform2fARB;
pub use glad_glUniform2fv as glUniform2fv;
pub use glad_glUniform2fvARB as glUniform2fvARB;
pub use glad_glUniform2i as glUniform2i;
pub use glad_glUniform2i64ARB as glUniform2i64ARB;
pub use glad_glUniform2i64vARB as glUniform2i64vARB;
pub use glad_glUniform2iARB as glUniform2iARB;
pub use glad_glUniform2iv as glUniform2iv;
pub use glad_glUniform2ivARB as glUniform2ivARB;
pub use glad_glUniform2ui as glUniform2ui;
pub use glad_glUniform2ui64ARB as glUniform2ui64ARB;
pub use glad_glUniform2ui64vARB as glUniform2ui64vARB;
pub use glad_glUniform2uiv as glUniform2uiv;
pub use glad_glUniform3d as glUniform3d;
pub use glad_glUniform3dv as glUniform3dv;
pub use glad_glUniform3f as glUniform3f;
pub use glad_glUniform3fARB as glUniform3fARB;
pub use glad_glUniform3fv as glUniform3fv;
pub use glad_glUniform3fvARB as glUniform3fvARB;
pub use glad_glUniform3i as glUniform3i;
pub use glad_glUniform3i64ARB as glUniform3i64ARB;
pub use glad_glUniform3i64vARB as glUniform3i64vARB;
pub use glad_glUniform3iARB as glUniform3iARB;
pub use glad_glUniform3iv as glUniform3iv;
pub use glad_glUniform3ivARB as glUniform3ivARB;
pub use glad_glUniform3ui as glUniform3ui;
pub use glad_glUniform3ui64ARB as glUniform3ui64ARB;
pub use glad_glUniform3ui64vARB as glUniform3ui64vARB;
pub use glad_glUniform3uiv as glUniform3uiv;
pub use glad_glUniform4d as glUniform4d;
pub use glad_glUniform4dv as glUniform4dv;
pub use glad_glUniform4f as glUniform4f;
pub use glad_glUniform4fARB as glUniform4fARB;
pub use glad_glUniform4fv as glUniform4fv;
pub use glad_glUniform4fvARB as glUniform4fvARB;
pub use glad_glUniform4i as glUniform4i;
pub use glad_glUniform4i64ARB as glUniform4i64ARB;
pub use glad_glUniform4i64vARB as glUniform4i64vARB;
pub use glad_glUniform4iARB as glUniform4iARB;
pub use glad_glUniform4iv as glUniform4iv;
pub use glad_glUniform4ivARB as glUniform4ivARB;
pub use glad_glUniform4ui as glUniform4ui;
pub use glad_glUniform4ui64ARB as glUniform4ui64ARB;
pub use glad_glUniform4ui64vARB as glUniform4ui64vARB;
pub use glad_glUniform4uiv as glUniform4uiv;
pub use glad_glUniformBlockBinding as glUniformBlockBinding;
pub use glad_glUniformMatrix2dv as glUniformMatrix2dv;
pub use glad_glUniformMatrix2fv as glUniformMatrix2fv;
pub use glad_glUniformMatrix2fvARB as glUniformMatrix2fvARB;
pub use glad_glUniformMatrix2x3dv as glUniformMatrix2x3dv;
pub use glad_glUniformMatrix2x3fv as glUniformMatrix2x3fv;
pub use glad_glUniformMatrix2x4dv as glUniformMatrix2x4dv;
pub use glad_glUniformMatrix2x4fv as glUniformMatrix2x4fv;
pub use glad_glUniformMatrix3dv as glUniformMatrix3dv;
pub use glad_glUniformMatrix3fv as glUniformMatrix3fv;
pub use glad_glUniformMatrix3fvARB as glUniformMatrix3fvARB;
pub use glad_glUniformMatrix3x2dv as glUniformMatrix3x2dv;
pub use glad_glUniformMatrix3x2fv as glUniformMatrix3x2fv;
pub use glad_glUniformMatrix3x4dv as glUniformMatrix3x4dv;
pub use glad_glUniformMatrix3x4fv as glUniformMatrix3x4fv;
pub use glad_glUniformMatrix4dv as glUniformMatrix4dv;
pub use glad_glUniformMatrix4fv as glUniformMatrix4fv;
pub use glad_glUniformMatrix4fvARB as glUniformMatrix4fvARB;
pub use glad_glUniformMatrix4x2dv as glUniformMatrix4x2dv;
pub use glad_glUniformMatrix4x2fv as glUniformMatrix4x2fv;
pub use glad_glUniformMatrix4x3dv as glUniformMatrix4x3dv;
pub use glad_glUniformMatrix4x3fv as glUniformMatrix4x3fv;
pub use glad_glUniformSubroutinesuiv as glUniformSubroutinesuiv;
pub use glad_glUnmapBuffer as glUnmapBuffer;
pub use glad_glUnmapBufferARB as glUnmapBufferARB;
pub use glad_glUnmapNamedBuffer as glUnmapNamedBuffer;
pub use glad_glUseProgram as glUseProgram;
pub use glad_glUseProgramObjectARB as glUseProgramObjectARB;
pub use glad_glUseProgramStages as glUseProgramStages;
pub use glad_glValidateProgram as glValidateProgram;
pub use glad_glValidateProgramARB as glValidateProgramARB;
pub use glad_glValidateProgramPipeline as glValidateProgramPipeline;
pub use glad_glVertex2xOES as glVertex2xOES;
pub use glad_glVertex2xvOES as glVertex2xvOES;
pub use glad_glVertex3xOES as glVertex3xOES;
pub use glad_glVertex3xvOES as glVertex3xvOES;
pub use glad_glVertex4xOES as glVertex4xOES;
pub use glad_glVertex4xvOES as glVertex4xvOES;
pub use glad_glVertexArrayAttribBinding as glVertexArrayAttribBinding;
pub use glad_glVertexArrayAttribFormat as glVertexArrayAttribFormat;
pub use glad_glVertexArrayAttribIFormat as glVertexArrayAttribIFormat;
pub use glad_glVertexArrayAttribLFormat as glVertexArrayAttribLFormat;
pub use glad_glVertexArrayBindingDivisor as glVertexArrayBindingDivisor;
pub use glad_glVertexArrayElementBuffer as glVertexArrayElementBuffer;
pub use glad_glVertexArrayVertexBuffer as glVertexArrayVertexBuffer;
pub use glad_glVertexArrayVertexBuffers as glVertexArrayVertexBuffers;
pub use glad_glVertexAttrib1d as glVertexAttrib1d;
pub use glad_glVertexAttrib1dARB as glVertexAttrib1dARB;
pub use glad_glVertexAttrib1dv as glVertexAttrib1dv;
pub use glad_glVertexAttrib1dvARB as glVertexAttrib1dvARB;
pub use glad_glVertexAttrib1f as glVertexAttrib1f;
pub use glad_glVertexAttrib1fARB as glVertexAttrib1fARB;
pub use glad_glVertexAttrib1fv as glVertexAttrib1fv;
pub use glad_glVertexAttrib1fvARB as glVertexAttrib1fvARB;
pub use glad_glVertexAttrib1s as glVertexAttrib1s;
pub use glad_glVertexAttrib1sARB as glVertexAttrib1sARB;
pub use glad_glVertexAttrib1sv as glVertexAttrib1sv;
pub use glad_glVertexAttrib1svARB as glVertexAttrib1svARB;
pub use glad_glVertexAttrib2d as glVertexAttrib2d;
pub use glad_glVertexAttrib2dARB as glVertexAttrib2dARB;
pub use glad_glVertexAttrib2dv as glVertexAttrib2dv;
pub use glad_glVertexAttrib2dvARB as glVertexAttrib2dvARB;
pub use glad_glVertexAttrib2f as glVertexAttrib2f;
pub use glad_glVertexAttrib2fARB as glVertexAttrib2fARB;
pub use glad_glVertexAttrib2fv as glVertexAttrib2fv;
pub use glad_glVertexAttrib2fvARB as glVertexAttrib2fvARB;
pub use glad_glVertexAttrib2s as glVertexAttrib2s;
pub use glad_glVertexAttrib2sARB as glVertexAttrib2sARB;
pub use glad_glVertexAttrib2sv as glVertexAttrib2sv;
pub use glad_glVertexAttrib2svARB as glVertexAttrib2svARB;
pub use glad_glVertexAttrib3d as glVertexAttrib3d;
pub use glad_glVertexAttrib3dARB as glVertexAttrib3dARB;
pub use glad_glVertexAttrib3dv as glVertexAttrib3dv;
pub use glad_glVertexAttrib3dvARB as glVertexAttrib3dvARB;
pub use glad_glVertexAttrib3f as glVertexAttrib3f;
pub use glad_glVertexAttrib3fARB as glVertexAttrib3fARB;
pub use glad_glVertexAttrib3fv as glVertexAttrib3fv;
pub use glad_glVertexAttrib3fvARB as glVertexAttrib3fvARB;
pub use glad_glVertexAttrib3s as glVertexAttrib3s;
pub use glad_glVertexAttrib3sARB as glVertexAttrib3sARB;
pub use glad_glVertexAttrib3sv as glVertexAttrib3sv;
pub use glad_glVertexAttrib3svARB as glVertexAttrib3svARB;
pub use glad_glVertexAttrib4Nbv as glVertexAttrib4Nbv;
pub use glad_glVertexAttrib4NbvARB as glVertexAttrib4NbvARB;
pub use glad_glVertexAttrib4Niv as glVertexAttrib4Niv;
pub use glad_glVertexAttrib4NivARB as glVertexAttrib4NivARB;
pub use glad_glVertexAttrib4Nsv as glVertexAttrib4Nsv;
pub use glad_glVertexAttrib4NsvARB as glVertexAttrib4NsvARB;
pub use glad_glVertexAttrib4Nub as glVertexAttrib4Nub;
pub use glad_glVertexAttrib4NubARB as glVertexAttrib4NubARB;
pub use glad_glVertexAttrib4Nubv as glVertexAttrib4Nubv;
pub use glad_glVertexAttrib4NubvARB as glVertexAttrib4NubvARB;
pub use glad_glVertexAttrib4Nuiv as glVertexAttrib4Nuiv;
pub use glad_glVertexAttrib4NuivARB as glVertexAttrib4NuivARB;
pub use glad_glVertexAttrib4Nusv as glVertexAttrib4Nusv;
pub use glad_glVertexAttrib4NusvARB as glVertexAttrib4NusvARB;
pub use glad_glVertexAttrib4bv as glVertexAttrib4bv;
pub use glad_glVertexAttrib4bvARB as glVertexAttrib4bvARB;
pub use glad_glVertexAttrib4d as glVertexAttrib4d;
pub use glad_glVertexAttrib4dARB as glVertexAttrib4dARB;
pub use glad_glVertexAttrib4dv as glVertexAttrib4dv;
pub use glad_glVertexAttrib4dvARB as glVertexAttrib4dvARB;
pub use glad_glVertexAttrib4f as glVertexAttrib4f;
pub use glad_glVertexAttrib4fARB as glVertexAttrib4fARB;
pub use glad_glVertexAttrib4fv as glVertexAttrib4fv;
pub use glad_glVertexAttrib4fvARB as glVertexAttrib4fvARB;
pub use glad_glVertexAttrib4iv as glVertexAttrib4iv;
pub use glad_glVertexAttrib4ivARB as glVertexAttrib4ivARB;
pub use glad_glVertexAttrib4s as glVertexAttrib4s;
pub use glad_glVertexAttrib4sARB as glVertexAttrib4sARB;
pub use glad_glVertexAttrib4sv as glVertexAttrib4sv;
pub use glad_glVertexAttrib4svARB as glVertexAttrib4svARB;
pub use glad_glVertexAttrib4ubv as glVertexAttrib4ubv;
pub use glad_glVertexAttrib4ubvARB as glVertexAttrib4ubvARB;
pub use glad_glVertexAttrib4uiv as glVertexAttrib4uiv;
pub use glad_glVertexAttrib4uivARB as glVertexAttrib4uivARB;
pub use glad_glVertexAttrib4usv as glVertexAttrib4usv;
pub use glad_glVertexAttrib4usvARB as glVertexAttrib4usvARB;
pub use glad_glVertexAttribBinding as glVertexAttribBinding;
pub use glad_glVertexAttribDivisor as glVertexAttribDivisor;
pub use glad_glVertexAttribDivisorARB as glVertexAttribDivisorARB;
pub use glad_glVertexAttribFormat as glVertexAttribFormat;
pub use glad_glVertexAttribI1i as glVertexAttribI1i;
pub use glad_glVertexAttribI1iv as glVertexAttribI1iv;
pub use glad_glVertexAttribI1ui as glVertexAttribI1ui;
pub use glad_glVertexAttribI1uiv as glVertexAttribI1uiv;
pub use glad_glVertexAttribI2i as glVertexAttribI2i;
pub use glad_glVertexAttribI2iv as glVertexAttribI2iv;
pub use glad_glVertexAttribI2ui as glVertexAttribI2ui;
pub use glad_glVertexAttribI2uiv as glVertexAttribI2uiv;
pub use glad_glVertexAttribI3i as glVertexAttribI3i;
pub use glad_glVertexAttribI3iv as glVertexAttribI3iv;
pub use glad_glVertexAttribI3ui as glVertexAttribI3ui;
pub use glad_glVertexAttribI3uiv as glVertexAttribI3uiv;
pub use glad_glVertexAttribI4bv as glVertexAttribI4bv;
pub use glad_glVertexAttribI4i as glVertexAttribI4i;
pub use glad_glVertexAttribI4iv as glVertexAttribI4iv;
pub use glad_glVertexAttribI4sv as glVertexAttribI4sv;
pub use glad_glVertexAttribI4ubv as glVertexAttribI4ubv;
pub use glad_glVertexAttribI4ui as glVertexAttribI4ui;
pub use glad_glVertexAttribI4uiv as glVertexAttribI4uiv;
pub use glad_glVertexAttribI4usv as glVertexAttribI4usv;
pub use glad_glVertexAttribIFormat as glVertexAttribIFormat;
pub use glad_glVertexAttribIPointer as glVertexAttribIPointer;
pub use glad_glVertexAttribL1d as glVertexAttribL1d;
pub use glad_glVertexAttribL1dv as glVertexAttribL1dv;
pub use glad_glVertexAttribL2d as glVertexAttribL2d;
pub use glad_glVertexAttribL2dv as glVertexAttribL2dv;
pub use glad_glVertexAttribL3d as glVertexAttribL3d;
pub use glad_glVertexAttribL3dv as glVertexAttribL3dv;
pub use glad_glVertexAttribL4d as glVertexAttribL4d;
pub use glad_glVertexAttribL4dv as glVertexAttribL4dv;
pub use glad_glVertexAttribLFormat as glVertexAttribLFormat;
pub use glad_glVertexAttribLPointer as glVertexAttribLPointer;
pub use glad_glVertexAttribP1ui as glVertexAttribP1ui;
pub use glad_glVertexAttribP1uiv as glVertexAttribP1uiv;
pub use glad_glVertexAttribP2ui as glVertexAttribP2ui;
pub use glad_glVertexAttribP2uiv as glVertexAttribP2uiv;
pub use glad_glVertexAttribP3ui as glVertexAttribP3ui;
pub use glad_glVertexAttribP3uiv as glVertexAttribP3uiv;
pub use glad_glVertexAttribP4ui as glVertexAttribP4ui;
pub use glad_glVertexAttribP4uiv as glVertexAttribP4uiv;
pub use glad_glVertexAttribPointer as glVertexAttribPointer;
pub use glad_glVertexAttribPointerARB as glVertexAttribPointerARB;
pub use glad_glVertexBindingDivisor as glVertexBindingDivisor;
pub use glad_glViewport as glViewport;
pub use glad_glViewportArrayv as glViewportArrayv;
pub use glad_glViewportIndexedf as glViewportIndexedf;
pub use glad_glViewportIndexedfv as glViewportIndexedfv;
pub use glad_glWaitSync as glWaitSync;
